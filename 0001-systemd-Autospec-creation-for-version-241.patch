From cb2cc35f13b6e9709c1bd984270eee11148ed488 Mon Sep 17 00:00:00 2001
From: Auke Kok <auke-jan.h.kok@intel.com>
Date: Wed, 27 Feb 2019 15:14:45 -0800
Subject: [PATCH systemd] systemd: Autospec creation for version 241

---
 ...-issues-with-MS_MOVE-not-getting-def.patch |   50 +-
 ...-journal-raise-compression-threshold.patch |   10 +-
 0003-journal-clearout-drop-kmsg.patch         |   12 +-
 0004-core-use-mmap-to-load-files.patch        |   12 +-
 ...op-pam-nsswitch-ship-legacy-tmpfiles.patch |   28 +-
 ...ournal-flush-var-kmsg-after-starting.patch |    8 +-
 ...ystemd-user-to-include-common-sessio.patch |    8 +-
 0008-analyze-increase-precision.patch         |   81 +-
 ...malloc-memory-reserves-when-main-loo.patch |   14 +-
 ...ator-Do-not-automount-boot-partition.patch |   10 +-
 0011-core-do-not-apply-presets.patch          |   22 +-
 ...-set-default-locale-to-a-unicode-one.patch |   17 +-
 ...unt-setup-mount-kernel-fs-by-default.patch |   26 +-
 ...-default-services-in-system-unit-dir.patch |   22 +-
 ...e-option-to-enable-chroot-install-re.patch |   40 +-
 ...upport-alternate-root-usage-via-SUBD.patch |   28 +-
 ...l-Handle-gummiboot-systemd-migration.patch |   35 +-
 ...ke-var-cache-ldconfig-world-readable.patch |    8 +-
 ...ique-hostname-when-it-is-either-clr-.patch |   18 +-
 0020-more-udev-children-workers.patch         |    8 +-
 0021-not-load-iptables.patch                  |   12 +-
 ...lush-service-for-Microsoft-Azure-VMs.patch |   75 +-
 ...ed-as-default-resolver-write-at-boot.patch |    8 +-
 ...ble-BBR-Bottleneck-Bandwidth-and-RTT.patch |   12 +-
 ...omplete-once-one-link-is-online-not-.patch |   11 +-
 0026-DHCP-retry-faster.patch                  |   10 +-
 0027-Remove-libm-memory-overhead.patch        |    8 +-
 0028-udev-log-also-device-path.patch          |   34 +-
 0029-skip-not-present-ACPI-devices.patch      |   14 +-
 ...-Ensure-var-run-is-never-a-directory.patch |   10 +-
 0031-Make-timesyncd-a-simple-service.patch    |   22 +-
 0032-Compile-udev-with-O3.patch               |   16 +-
 0033-Don-t-wait-for-utmp-at-shutdown.patch    |    8 +-
 ...nsient-hostnames-we-set-ours-already.patch |   10 +-
 ...on-t-use-libm-just-for-integer-exp10.patch |   12 +-
 ...stemd-earlier-that-resolved-is-ready.patch |   36 +-
 ...udev-hasn-t-initialized-one-link-yet.patch |   10 +-
 ...ps-to-a-wrapper-that-will-optionally.patch |   12 +-
 ...r-locale-files-locale.conf-00-keyboa.patch |   58 +-
 ...-whether-struct-statx-is-defined-in-.patch |  108 -
 ...able-audit-by-default-in-the-journal.patch |   29 +
 ...-meson-rename-Ddebug-to-Ddebug-extra.patch |   43 -
 0041-Disable-XZ-support-in-the-journal.patch  |   25 +
 ...tional-dependency-for-systemd-import.patch |  158 --
 0042-Localize-1-symbol.patch                  |   37 +
 ...en-a-bit-the-options-for-certan-moun.patch |    7 +-
 CVE-2018-15688.patch                          |   23 -
 CVE-2018-16864.patch                          |  201 --
 CVE-2018-16866.patch                          |   60 -
 CVE-2018-6954_2.patch                         | 2086 -----------------
 Makefile                                      |    2 +-
 NEWS                                          |  751 +++++-
 buildreq_add                                  |    1 +
 buildreq_cache                                |    2 +-
 configure32                                   |    1 +
 cve-2018-15686.patch                          |  231 --
 cve-2018-15687.patch                          |  209 --
 excludes                                      |    2 -
 install_append                                |    2 +
 install_prepend                               |    6 +-
 make_check_command                            |    1 +
 meson_options.txt                             |   76 +-
 mkdirp-disable.patch                          |   10 -
 mq_getattr.patch                              |   34 -
 no-audit-by-default.patch                     |   19 -
 no-xz-for-libsystemd.patch                    |   11 -
 options.conf                                  |    4 +-
 release                                       |    2 +-
 series                                        |   18 +-
 symbols                                       |   78 +
 symbols32                                     |   78 +
 systemd-stack-1.patch                         |   33 -
 systemd-stack-2.patch                         |   69 -
 systemd.spec                                  |  170 +-
 upstream                                      |    2 +-
 used_libs32                                   |    1 -
 76 files changed, 1569 insertions(+), 3856 deletions(-)
 rename 0042-add-stateless-for-locale-files-locale.conf-00-keyboa.patch => 0039-add-stateless-for-locale-files-locale.conf-00-keyboa.patch (73%)
 delete mode 100644 0039-build-sys-Detect-whether-struct-statx-is-defined-in-.patch
 create mode 100644 0040-Do-not-enable-audit-by-default-in-the-journal.patch
 delete mode 100644 0040-meson-rename-Ddebug-to-Ddebug-extra.patch
 create mode 100644 0041-Disable-XZ-support-in-the-journal.patch
 delete mode 100644 0041-Make-bzip2-an-optional-dependency-for-systemd-import.patch
 create mode 100644 0042-Localize-1-symbol.patch
 delete mode 100644 CVE-2018-15688.patch
 delete mode 100644 CVE-2018-16864.patch
 delete mode 100644 CVE-2018-16866.patch
 delete mode 100644 CVE-2018-6954_2.patch
 delete mode 100644 cve-2018-15686.patch
 delete mode 100644 cve-2018-15687.patch
 create mode 100644 make_check_command
 delete mode 100644 mkdirp-disable.patch
 delete mode 100644 mq_getattr.patch
 delete mode 100644 no-audit-by-default.patch
 delete mode 100644 no-xz-for-libsystemd.patch
 delete mode 100644 systemd-stack-1.patch
 delete mode 100644 systemd-stack-2.patch

diff --git a/0001-Fix-preprocessor-issues-with-MS_MOVE-not-getting-def.patch b/0001-Fix-preprocessor-issues-with-MS_MOVE-not-getting-def.patch
index 9fef70f..75e5233 100644
--- a/0001-Fix-preprocessor-issues-with-MS_MOVE-not-getting-def.patch
+++ b/0001-Fix-preprocessor-issues-with-MS_MOVE-not-getting-def.patch
@@ -1,12 +1,12 @@
-From afbc9e26bd5beaebe1e38e92c0fe1c887930cf8b Mon Sep 17 00:00:00 2001
+From 24630ec9c3b5c23325a8a7e7e326a89b0dd99ec7 Mon Sep 17 00:00:00 2001
 From: Auke Kok <auke-jan.h.kok@intel.com>
 Date: Wed, 4 Apr 2018 09:56:53 -0700
-Subject: [PATCH] Fix preprocessor issues with MS_MOVE not getting defined.
+Subject: [PATCH 01/42] Fix preprocessor issues with MS_MOVE not getting
+ defined.
 
 ---
  src/basic/btrfs-util.c     | 1 +
  src/basic/chattr-util.c    | 1 +
- src/basic/missing.h        | 1 +
  src/core/load-fragment.c   | 1 +
  src/core/namespace.c       | 1 +
  src/import/import-raw.c    | 1 +
@@ -17,10 +17,10 @@ Subject: [PATCH] Fix preprocessor issues with MS_MOVE not getting defined.
  src/shared/machine-image.c | 1 +
  src/shared/sleep-config.c  | 1 +
  src/tmpfiles/tmpfiles.c    | 1 +
- 13 files changed, 13 insertions(+)
+ 12 files changed, 12 insertions(+)
 
 diff --git a/src/basic/btrfs-util.c b/src/basic/btrfs-util.c
-index 6d2490f3d..8dd4e03ef 100644
+index da4dd2a827..553ca98f24 100644
 --- a/src/basic/btrfs-util.c
 +++ b/src/basic/btrfs-util.c
 @@ -3,6 +3,7 @@
@@ -32,7 +32,7 @@ index 6d2490f3d..8dd4e03ef 100644
  #include <linux/loop.h>
  #include <stddef.h>
 diff --git a/src/basic/chattr-util.c b/src/basic/chattr-util.c
-index 4ec14515e..69449a054 100644
+index 235cfb9bd7..a6bbddbb98 100644
 --- a/src/basic/chattr-util.c
 +++ b/src/basic/chattr-util.c
 @@ -4,6 +4,7 @@
@@ -43,20 +43,8 @@ index 4ec14515e..69449a054 100644
  #include <linux/fs.h>
  
  #include "chattr-util.h"
-diff --git a/src/basic/missing.h b/src/basic/missing.h
-index 71a07d057..16867bdd9 100644
---- a/src/basic/missing.h
-+++ b/src/basic/missing.h
-@@ -22,6 +22,7 @@
- #include <sys/socket.h>
- #include <sys/stat.h>
- #include <sys/syscall.h>
-+#include <sys/mount.h>
- #include <uchar.h>
- #include <unistd.h>
- 
 diff --git a/src/core/load-fragment.c b/src/core/load-fragment.c
-index d9a5094aa..73cc8adc2 100644
+index 44f00a3046..098f8dd515 100644
 --- a/src/core/load-fragment.c
 +++ b/src/core/load-fragment.c
 @@ -5,6 +5,7 @@
@@ -68,7 +56,7 @@ index d9a5094aa..73cc8adc2 100644
  #include <linux/oom.h>
  #if HAVE_SECCOMP
 diff --git a/src/core/namespace.c b/src/core/namespace.c
-index e4930db15..08c709b54 100644
+index 7f553a42c2..29b8413a6f 100644
 --- a/src/core/namespace.c
 +++ b/src/core/namespace.c
 @@ -7,6 +7,7 @@
@@ -80,7 +68,7 @@ index e4930db15..08c709b54 100644
  
  #include "alloc-util.h"
 diff --git a/src/import/import-raw.c b/src/import/import-raw.c
-index f31432cd0..8118f72c1 100644
+index 4b1161557d..c6c191b92a 100644
 --- a/src/import/import-raw.c
 +++ b/src/import/import-raw.c
 @@ -1,5 +1,6 @@
@@ -91,7 +79,7 @@ index f31432cd0..8118f72c1 100644
  
  #include "sd-daemon.h"
 diff --git a/src/import/import-tar.c b/src/import/import-tar.c
-index 89c95af27..f12c3d077 100644
+index 4d0d9254d0..92c5a3f270 100644
 --- a/src/import/import-tar.c
 +++ b/src/import/import-tar.c
 @@ -1,5 +1,6 @@
@@ -102,7 +90,7 @@ index 89c95af27..f12c3d077 100644
  
  #include "sd-daemon.h"
 diff --git a/src/import/pull-raw.c b/src/import/pull-raw.c
-index e68f197c7..818145c89 100644
+index 3a3e015df8..17e008f6ce 100644
 --- a/src/import/pull-raw.c
 +++ b/src/import/pull-raw.c
 @@ -1,6 +1,7 @@
@@ -114,7 +102,7 @@ index e68f197c7..818145c89 100644
  #include <sys/xattr.h>
  
 diff --git a/src/journal/journal-file.c b/src/journal/journal-file.c
-index 62e7f68a1..c9df6a57a 100644
+index 56827f9f36..309fbb5af7 100644
 --- a/src/journal/journal-file.c
 +++ b/src/journal/journal-file.c
 @@ -2,6 +2,7 @@
@@ -126,7 +114,7 @@ index 62e7f68a1..c9df6a57a 100644
  #include <pthread.h>
  #include <stddef.h>
 diff --git a/src/journal/journalctl.c b/src/journal/journalctl.c
-index 56b1be530..c1bf36d8f 100644
+index 14a02eda74..778e88420c 100644
 --- a/src/journal/journalctl.c
 +++ b/src/journal/journalctl.c
 @@ -4,6 +4,7 @@
@@ -138,11 +126,11 @@ index 56b1be530..c1bf36d8f 100644
  #include <locale.h>
  #include <poll.h>
 diff --git a/src/shared/machine-image.c b/src/shared/machine-image.c
-index 00a5eff67..87859ec4c 100644
+index af06ab22e8..ab1496e037 100644
 --- a/src/shared/machine-image.c
 +++ b/src/shared/machine-image.c
-@@ -9,6 +9,7 @@
- #include <sys/file.h>
+@@ -10,6 +10,7 @@
+ #include <sys/ioctl.h>
  #include <sys/stat.h>
  #include <unistd.h>
 +#include <sys/mount.h>
@@ -150,7 +138,7 @@ index 00a5eff67..87859ec4c 100644
  
  #include "alloc-util.h"
 diff --git a/src/shared/sleep-config.c b/src/shared/sleep-config.c
-index 9e4ce183d..949bf5388 100644
+index 2e22bd0bbe..d72ba8f9c8 100644
 --- a/src/shared/sleep-config.c
 +++ b/src/shared/sleep-config.c
 @@ -4,6 +4,7 @@
@@ -162,7 +150,7 @@ index 9e4ce183d..949bf5388 100644
  #include <stdbool.h>
  #include <stddef.h>
 diff --git a/src/tmpfiles/tmpfiles.c b/src/tmpfiles/tmpfiles.c
-index 927de35f3..689ab15ef 100644
+index b66765b407..f41a895ded 100644
 --- a/src/tmpfiles/tmpfiles.c
 +++ b/src/tmpfiles/tmpfiles.c
 @@ -6,6 +6,7 @@
@@ -174,5 +162,5 @@ index 927de35f3..689ab15ef 100644
  #include <stdbool.h>
  #include <stddef.h>
 -- 
-2.19.0
+2.20.1
 
diff --git a/0002-journal-raise-compression-threshold.patch b/0002-journal-raise-compression-threshold.patch
index 2757664..957e268 100644
--- a/0002-journal-raise-compression-threshold.patch
+++ b/0002-journal-raise-compression-threshold.patch
@@ -1,17 +1,17 @@
-From 922827fd27a4e22bb9accc935318f402d0db8f65 Mon Sep 17 00:00:00 2001
+From 997b0481de018869584fcdd255591d447a6b8642 Mon Sep 17 00:00:00 2001
 From: Dimitri John Ledkov <dimitri.j.ledkov@intel.com>
 Date: Tue, 23 Jun 2015 11:23:57 +0100
-Subject: [PATCH] journal: raise compression threshold.
+Subject: [PATCH 02/42] journal: raise compression threshold.
 
 ---
  src/journal/journal-file.c | 2 +-
  1 file changed, 1 insertion(+), 1 deletion(-)
 
 diff --git a/src/journal/journal-file.c b/src/journal/journal-file.c
-index c9df6a57a..1af28dc02 100644
+index 309fbb5af7..d966b5828d 100644
 --- a/src/journal/journal-file.c
 +++ b/src/journal/journal-file.c
-@@ -34,7 +34,7 @@
+@@ -35,7 +35,7 @@
  #define DEFAULT_DATA_HASH_TABLE_SIZE (2047ULL*sizeof(HashItem))
  #define DEFAULT_FIELD_HASH_TABLE_SIZE (333ULL*sizeof(HashItem))
  
@@ -21,5 +21,5 @@ index c9df6a57a..1af28dc02 100644
  
  /* This is the minimum journal file size */
 -- 
-2.19.0
+2.20.1
 
diff --git a/0003-journal-clearout-drop-kmsg.patch b/0003-journal-clearout-drop-kmsg.patch
index d72f27b..0fdce20 100644
--- a/0003-journal-clearout-drop-kmsg.patch
+++ b/0003-journal-clearout-drop-kmsg.patch
@@ -1,17 +1,17 @@
-From 700fd2940eb028d7e5174bfe281af3462aa06244 Mon Sep 17 00:00:00 2001
+From be06e2a8cdd594e4f7becd22b1b011c62287dfb7 Mon Sep 17 00:00:00 2001
 From: Dimitri John Ledkov <dimitri.j.ledkov@intel.com>
 Date: Tue, 23 Jun 2015 11:25:41 +0100
-Subject: [PATCH] journal: clearout & drop kmsg.
+Subject: [PATCH 03/42] journal: clearout & drop kmsg.
 
 ---
  src/journal/journald-kmsg.c | 9 +++++++++
  1 file changed, 9 insertions(+)
 
 diff --git a/src/journal/journald-kmsg.c b/src/journal/journald-kmsg.c
-index e9aff1316..97531c4a1 100644
+index ce82102eed..b7546129ff 100644
 --- a/src/journal/journald-kmsg.c
 +++ b/src/journal/journald-kmsg.c
-@@ -375,6 +375,7 @@ static int dispatch_dev_kmsg(sd_event_source *es, int fd, uint32_t revents, void
+@@ -366,6 +366,7 @@ static int dispatch_dev_kmsg(sd_event_source *es, int fd, uint32_t revents, void
  int server_open_dev_kmsg(Server *s) {
          mode_t mode;
          int r;
@@ -19,7 +19,7 @@ index e9aff1316..97531c4a1 100644
  
          assert(s);
  
-@@ -393,6 +394,14 @@ int server_open_dev_kmsg(Server *s) {
+@@ -384,6 +385,14 @@ int server_open_dev_kmsg(Server *s) {
          if (!s->read_kmsg)
                  return 0;
  
@@ -35,5 +35,5 @@ index e9aff1316..97531c4a1 100644
          if (r < 0) {
  
 -- 
-2.19.0
+2.20.1
 
diff --git a/0004-core-use-mmap-to-load-files.patch b/0004-core-use-mmap-to-load-files.patch
index 226e25f..8a96885 100644
--- a/0004-core-use-mmap-to-load-files.patch
+++ b/0004-core-use-mmap-to-load-files.patch
@@ -1,25 +1,25 @@
-From 413cb7a591d04269aae406be2c0f8ee416832d72 Mon Sep 17 00:00:00 2001
+From 32f31ca69954d5258b3f600887e474d9fab542b4 Mon Sep 17 00:00:00 2001
 From: Dimitri John Ledkov <dimitri.j.ledkov@intel.com>
 Date: Tue, 23 Jun 2015 11:26:11 +0100
-Subject: [PATCH] core: use mmap to load files.
+Subject: [PATCH 04/42] core: use mmap to load files.
 
 ---
  src/core/load-fragment.c | 2 +-
  1 file changed, 1 insertion(+), 1 deletion(-)
 
 diff --git a/src/core/load-fragment.c b/src/core/load-fragment.c
-index 73cc8adc2..151b526a0 100644
+index 098f8dd515..5b6288c328 100644
 --- a/src/core/load-fragment.c
 +++ b/src/core/load-fragment.c
-@@ -4175,7 +4175,7 @@ static int open_follow(char **filename, FILE **_f, Set *names, char **_final) {
+@@ -4422,7 +4422,7 @@ static int open_follow(char **filename, FILE **_f, Set *names, char **_final) {
                  free_and_replace(*filename, target);
          }
  
--        f = fdopen(fd, "re");
+-        f = fdopen(fd, "r");
 +        f = fdopen(fd, "rem");
          if (!f) {
                  safe_close(fd);
                  return -errno;
 -- 
-2.19.0
+2.20.1
 
diff --git a/0005-Build-drop-pam-nsswitch-ship-legacy-tmpfiles.patch b/0005-Build-drop-pam-nsswitch-ship-legacy-tmpfiles.patch
index 2981654..402f367 100644
--- a/0005-Build-drop-pam-nsswitch-ship-legacy-tmpfiles.patch
+++ b/0005-Build-drop-pam-nsswitch-ship-legacy-tmpfiles.patch
@@ -1,20 +1,20 @@
-From 958f54d3f95cc1b1ba14a84b203240a49b6384cc Mon Sep 17 00:00:00 2001
+From 714db07c040dfd7e1b15b10b90d52f6e578b737f Mon Sep 17 00:00:00 2001
 From: Auke Kok <auke-jan.h.kok@intel.com>
 Date: Thu, 5 Apr 2018 10:02:14 -0700
-Subject: [PATCH] Build: drop pam/nsswitch, ship legacy tmpfiles.
+Subject: [PATCH 05/42] Build: drop pam/nsswitch, ship legacy tmpfiles.
 
 Adapted from Makefile.am patch by Dimitri John Ledkov.
 ---
- meson.build            | 3 ---
+ meson.build            | 5 ++---
  tmpfiles.d/etc.conf.m4 | 6 ------
  tmpfiles.d/meson.build | 2 +-
- 3 files changed, 1 insertion(+), 10 deletions(-)
+ 3 files changed, 3 insertions(+), 10 deletions(-)
 
 diff --git a/meson.build b/meson.build
-index 04331dd41..c3260b2ba 100644
+index 56c98b9c1b..0123762851 100644
 --- a/meson.build
 +++ b/meson.build
-@@ -130,7 +130,6 @@ udevrulesdir = join_paths(udevlibexecdir, 'rules.d')
+@@ -140,7 +140,6 @@ udevrulesdir = join_paths(udevlibexecdir, 'rules.d')
  udevhwdbdir = join_paths(udevlibexecdir, 'hwdb.d')
  catalogdir = join_paths(prefixdir, 'lib/systemd/catalog')
  kernelinstalldir = join_paths(prefixdir, 'lib/kernel/install.d')
@@ -22,17 +22,19 @@ index 04331dd41..c3260b2ba 100644
  bootlibdir = join_paths(prefixdir, 'lib/systemd/boot/efi')
  testsdir = join_paths(prefixdir, 'lib/systemd/tests')
  systemdstatedir = join_paths(localstatedir, 'lib/systemd')
-@@ -2688,8 +2687,6 @@ subdir('doc/var-log')
+@@ -2928,8 +2927,8 @@ subdir('shell-completion/zsh')
+ subdir('docs/sysvinit')
+ subdir('docs/var-log')
  
- # FIXME: figure out if the warning is true:
- # https://github.com/mesonbuild/meson/wiki/Reference-manual#install_subdir
 -install_subdir('factory/etc',
 -               install_dir : factorydir)
- 
++# FIXME: figure out if the warning is true:
++# https://github.com/mesonbuild/meson/wiki/Reference-manual#install_subdir
  
  install_data('xorg/50-systemd-user.sh',
+              install_dir : xinitrcdir)
 diff --git a/tmpfiles.d/etc.conf.m4 b/tmpfiles.d/etc.conf.m4
-index df8d42101..ad55479bc 100644
+index df8d42101c..ad55479bc5 100644
 --- a/tmpfiles.d/etc.conf.m4
 +++ b/tmpfiles.d/etc.conf.m4
 @@ -7,8 +7,6 @@
@@ -53,7 +55,7 @@ index df8d42101..ad55479bc 100644
 -C /etc/pam.d - - - -
 -)m4_dnl
 diff --git a/tmpfiles.d/meson.build b/tmpfiles.d/meson.build
-index 35eea2be5..0a246fef8 100644
+index 35eea2be5c..0a246fef8b 100644
 --- a/tmpfiles.d/meson.build
 +++ b/tmpfiles.d/meson.build
 @@ -9,7 +9,7 @@ tmpfiles = [['home.conf',            ''],
@@ -66,5 +68,5 @@ index 35eea2be5..0a246fef8 100644
  
  foreach pair : tmpfiles
 -- 
-2.19.0
+2.20.1
 
diff --git a/0006-journal-flush-var-kmsg-after-starting.patch b/0006-journal-flush-var-kmsg-after-starting.patch
index 6fc0e7e..f0fa221 100644
--- a/0006-journal-flush-var-kmsg-after-starting.patch
+++ b/0006-journal-flush-var-kmsg-after-starting.patch
@@ -1,14 +1,14 @@
-From 5ab9702b8364c026f20077b6e61c3da8f6c64a4d Mon Sep 17 00:00:00 2001
+From c9118c18b57acc9650ee0bf3173905bfddad0abc Mon Sep 17 00:00:00 2001
 From: Dimitri John Ledkov <dimitri.j.ledkov@intel.com>
 Date: Tue, 23 Jun 2015 11:38:31 +0100
-Subject: [PATCH] journal: flush var/kmsg after starting.
+Subject: [PATCH 06/42] journal: flush var/kmsg after starting.
 
 ---
  src/journal/journald.c | 5 +++--
  1 file changed, 3 insertions(+), 2 deletions(-)
 
 diff --git a/src/journal/journald.c b/src/journal/journald.c
-index 5e7b1dcb4..e7122ce6b 100644
+index 5e7b1dcb4a..e7122ce6b4 100644
 --- a/src/journal/journald.c
 +++ b/src/journal/journald.c
 @@ -37,8 +37,6 @@ int main(int argc, char *argv[]) {
@@ -31,5 +31,5 @@ index 5e7b1dcb4..e7122ce6b 100644
           * journal so entries from the runtime journals are ordered
           * before this message. See #4190 for some details. */
 -- 
-2.19.0
+2.20.1
 
diff --git a/0007-logind-pam-fix-systemd-user-to-include-common-sessio.patch b/0007-logind-pam-fix-systemd-user-to-include-common-sessio.patch
index e0386c2..eb109d5 100644
--- a/0007-logind-pam-fix-systemd-user-to-include-common-sessio.patch
+++ b/0007-logind-pam-fix-systemd-user-to-include-common-sessio.patch
@@ -1,14 +1,14 @@
-From 1474da4ff17fcb513055741579f6e458011cc1d9 Mon Sep 17 00:00:00 2001
+From 9b8c243601e3b5e8ff0c51c7d5c32edd3c61f6c7 Mon Sep 17 00:00:00 2001
 From: Dimitri John Ledkov <dimitri.j.ledkov@intel.com>
 Date: Tue, 23 Jun 2015 11:40:24 +0100
-Subject: [PATCH] logind,pam: fix systemd-user to include common-session.
+Subject: [PATCH 07/42] logind,pam: fix systemd-user to include common-session.
 
 ---
  factory/etc/pam.d/other | 1 +
  1 file changed, 1 insertion(+)
 
 diff --git a/factory/etc/pam.d/other b/factory/etc/pam.d/other
-index c1f729659..83408c327 100644
+index c1f729659c..83408c327b 100644
 --- a/factory/etc/pam.d/other
 +++ b/factory/etc/pam.d/other
 @@ -4,3 +4,4 @@ auth     include system-auth
@@ -17,5 +17,5 @@ index c1f729659..83408c327 100644
  session  include system-auth
 +session  include common-session
 -- 
-2.19.0
+2.20.1
 
diff --git a/0008-analyze-increase-precision.patch b/0008-analyze-increase-precision.patch
index 63290c9..30de4ea 100644
--- a/0008-analyze-increase-precision.patch
+++ b/0008-analyze-increase-precision.patch
@@ -1,26 +1,28 @@
-From bedae46890bb8e3e3548f4af25c0e1df177206a0 Mon Sep 17 00:00:00 2001
+From 4e8a061f55c1b8387f50ab347ae9dedbb7be43bb Mon Sep 17 00:00:00 2001
 From: Dimitri John Ledkov <dimitri.j.ledkov@intel.com>
 Date: Tue, 23 Jun 2015 11:41:17 +0100
-Subject: [PATCH] analyze: increase precision.
+Subject: [PATCH 08/42] analyze: increase precision.
 
 ---
- src/analyze/analyze.c | 30 ++++++++++++++++--------------
- 1 file changed, 16 insertions(+), 14 deletions(-)
+ src/analyze/analyze.c | 52 ++++++++++++++++++++++++++++++-------------
+ 1 file changed, 37 insertions(+), 15 deletions(-)
 
 diff --git a/src/analyze/analyze.c b/src/analyze/analyze.c
-index de0fe6eba..449eb70ce 100644
+index 3915b66739..6f0109f878 100644
 --- a/src/analyze/analyze.c
 +++ b/src/analyze/analyze.c
-@@ -41,6 +41,8 @@
+@@ -48,6 +48,10 @@
  #define SCALE_X (0.1 / 1000.0)   /* pixels per us */
  #define SCALE_Y (20.0)
  
 +#define USEC_PER_MSEC_DECIMAL (USEC_PER_MSEC/10)
 +
- #define compare(a, b) (((a) > (b))? 1 : (((b) > (a))? -1 : 0))
- 
++#define compare(a, b) (((a) > (b))? 1 : (((b) > (a))? -1 : 0))
++
  #define svg(...) printf(__VA_ARGS__)
-@@ -533,20 +535,20 @@ static int pretty_boot_time(sd_bus *bus, char **_buf) {
+ 
+ #define svg_bar(class, x1, x2, y)                                       \
+@@ -525,23 +529,23 @@ static int pretty_boot_time(sd_bus *bus, char **_buf) {
  
          size = strpcpyf(&ptr, size, "Startup finished in ");
          if (t->firmware_time > 0)
@@ -29,7 +31,7 @@ index de0fe6eba..449eb70ce 100644
          if (t->loader_time > 0)
 -                size = strpcpyf(&ptr, size, "%s (loader) + ", format_timespan(ts, sizeof(ts), t->loader_time, USEC_PER_MSEC));
 +                size = strpcpyf(&ptr, size, "%s (loader) + ", format_timespan(ts, sizeof(ts), t->loader_time, USEC_PER_MSEC_DECIMAL));
-         if (t->kernel_time > 0)
+         if (t->kernel_done_time > 0)
 -                size = strpcpyf(&ptr, size, "%s (kernel) + ", format_timespan(ts, sizeof(ts), t->kernel_done_time, USEC_PER_MSEC));
 +                size = strpcpyf(&ptr, size, "%s (kernel) + ", format_timespan(ts, sizeof(ts), t->kernel_done_time, USEC_PER_MSEC_DECIMAL));
          if (t->initrd_time > 0)
@@ -38,26 +40,49 @@ index de0fe6eba..449eb70ce 100644
  
 -        size = strpcpyf(&ptr, size, "%s (userspace) ", format_timespan(ts, sizeof(ts), t->finish_time - t->userspace_time, USEC_PER_MSEC));
 +        size = strpcpyf(&ptr, size, "%s (userspace) ", format_timespan(ts, sizeof(ts), t->finish_time - t->userspace_time, USEC_PER_MSEC_DECIMAL));
-         if (t->kernel_time > 0)
--                strpcpyf(&ptr, size, "= %s", format_timespan(ts, sizeof(ts), t->firmware_time + t->finish_time, USEC_PER_MSEC));
+         if (t->kernel_done_time > 0)
+-                strpcpyf(&ptr, size, "= %s ", format_timespan(ts, sizeof(ts), t->firmware_time + t->finish_time, USEC_PER_MSEC));
 +                strpcpyf(&ptr, size, "= %s", format_timespan(ts, sizeof(ts), t->firmware_time + t->finish_time, USEC_PER_MSEC_DECIMAL));
  
-         if (unit_id && activated_time > 0 && activated_time != USEC_INFINITY)
--                size = strpcpyf(&ptr, size, "\n%s reached after %s in userspace", unit_id, format_timespan(ts, sizeof(ts), activated_time - t->userspace_time, USEC_PER_MSEC));
-+                size = strpcpyf(&ptr, size, "\n%s reached after %s in userspace", unit_id, format_timespan(ts, sizeof(ts), activated_time - t->userspace_time, USEC_PER_MSEC_DECIMAL));
-         else if (unit_id && activated_time == 0)
+         if (unit_id && activated_time > 0 && activated_time != USEC_INFINITY) {
+                 usec_t base = t->userspace_time > 0 ? t->userspace_time : t->reverse_offset;
+ 
+                 size = strpcpyf(&ptr, size, "\n%s reached after %s in userspace", unit_id,
+-                                format_timespan(ts, sizeof(ts), activated_time - base, USEC_PER_MSEC));
++                                format_timespan(ts, sizeof(ts), activated_time - base, USEC_PER_MSEC_DECIMAL));
+         } else if (unit_id && activated_time == 0)
                  size = strpcpyf(&ptr, size, "\n%s was never reached", unit_id);
          else if (unit_id && activated_time == USEC_INFINITY)
-@@ -765,7 +767,7 @@ static int analyze_plot(int argc, char *argv[], void *userdata) {
-                 b = u->activating * SCALE_X < width / 2;
-                 if (u->time)
-                         svg_text(b, u->activating, y, "%s (%s)",
--                                 u->name, format_timespan(ts, sizeof(ts), u->time, USEC_PER_MSEC));
+@@ -782,8 +786,26 @@ static int analyze_plot(int argc, char *argv[], void *userdata) {
+         svg_text(true, boot->userspace_time, y, "systemd");
+         y++;
+ 
+-        for (; u->has_data; u++)
+-                y += plot_unit_times(u, width, y);
++        for (u = times; u->has_data; u++) {
++                char ts[FORMAT_TIMESPAN_MAX];
++                bool b;
++
++                if (!u->name)
++                        continue;
++
++                svg_bar("activating",   u->activating, u->activated, y);
++                svg_bar("active",       u->activated, u->deactivating, y);
++                svg_bar("deactivating", u->deactivating, u->deactivated, y);
++
++                /* place the text on the left if we have passed the half of the svg width */
++                b = u->activating * SCALE_X < width / 2;
++                if (u->time)
++                        svg_text(b, u->activating, y, "%s (%s)",
 +                                 u->name, format_timespan(ts, sizeof(ts), u->time, USEC_PER_MSEC_DECIMAL));
-                 else
-                         svg_text(b, u->activating, y, "%s", u->name);
-                 y++;
-@@ -815,10 +817,10 @@ static int list_dependencies_print(const char *name, unsigned int level, unsigne
++                else
++                        svg_text(b, u->activating, y, "%s", u->name);
++                y++;
++        }
+ 
+         svg("</g>\n");
+ 
+@@ -831,10 +853,10 @@ static int list_dependencies_print(const char *name, unsigned level, unsigned br
          if (times) {
                  if (times->time > 0)
                          printf("%s%s @%s +%s%s", ansi_highlight_red(), name,
@@ -71,7 +96,7 @@ index de0fe6eba..449eb70ce 100644
                  else
                          printf("%s", name);
          } else
-@@ -985,9 +987,9 @@ static int list_dependencies(sd_bus *bus, const char *name) {
+@@ -995,9 +1017,9 @@ static int list_dependencies(sd_bus *bus, const char *name) {
          if (times) {
                  if (times->time)
                          printf("%s%s +%s%s\n", ansi_highlight_red(), id,
@@ -83,7 +108,7 @@ index de0fe6eba..449eb70ce 100644
                  else
                          printf("%s\n", id);
          }
-@@ -1059,7 +1061,7 @@ static int analyze_blame(int argc, char *argv[], void *userdata) {
+@@ -1069,7 +1091,7 @@ static int analyze_blame(int argc, char *argv[], void *userdata) {
                  char ts[FORMAT_TIMESPAN_MAX];
  
                  if (u->time > 0)
@@ -93,5 +118,5 @@ index de0fe6eba..449eb70ce 100644
  
          return 0;
 -- 
-2.19.0
+2.20.1
 
diff --git a/0009-sd-event-return-malloc-memory-reserves-when-main-loo.patch b/0009-sd-event-return-malloc-memory-reserves-when-main-loo.patch
index b4b8ab7..fd76e99 100644
--- a/0009-sd-event-return-malloc-memory-reserves-when-main-loo.patch
+++ b/0009-sd-event-return-malloc-memory-reserves-when-main-loo.patch
@@ -1,18 +1,18 @@
-From c2e8f2b9670f9508b9aa7ee372a02ba010bac115 Mon Sep 17 00:00:00 2001
+From 2896053168ca0aaef4d1ae87854b925f8346eec3 Mon Sep 17 00:00:00 2001
 From: Dimitri John Ledkov <dimitri.j.ledkov@intel.com>
 Date: Tue, 23 Jun 2015 11:47:18 +0100
-Subject: [PATCH] sd-event: return malloc() memory reserves when main loop is
- idle.
+Subject: [PATCH 09/42] sd-event: return malloc() memory reserves when main
+ loop is idle.
 
 ---
  src/libsystemd/sd-event/sd-event.c | 13 +++++++++++--
  1 file changed, 11 insertions(+), 2 deletions(-)
 
 diff --git a/src/libsystemd/sd-event/sd-event.c b/src/libsystemd/sd-event/sd-event.c
-index d53b9a702..f7dfca851 100644
+index 04ba7e2574..62b2f1a745 100644
 --- a/src/libsystemd/sd-event/sd-event.c
 +++ b/src/libsystemd/sd-event/sd-event.c
-@@ -5,6 +5,7 @@
+@@ -3,6 +3,7 @@
  #include <sys/epoll.h>
  #include <sys/timerfd.h>
  #include <sys/wait.h>
@@ -20,7 +20,7 @@ index d53b9a702..f7dfca851 100644
  
  #include "sd-daemon.h"
  #include "sd-event.h"
-@@ -3561,9 +3562,17 @@ _public_ int sd_event_run(sd_event *e, uint64_t timeout) {
+@@ -3279,9 +3280,17 @@ _public_ int sd_event_run(sd_event *e, uint64_t timeout) {
          }
  
          r = sd_event_prepare(e);
@@ -41,5 +41,5 @@ index d53b9a702..f7dfca851 100644
          if (e->profile_delays)
                  e->last_run = now(CLOCK_MONOTONIC);
 -- 
-2.19.0
+2.20.1
 
diff --git a/0010-efi-boot-generator-Do-not-automount-boot-partition.patch b/0010-efi-boot-generator-Do-not-automount-boot-partition.patch
index 6aa6fa8..fcfcb7e 100644
--- a/0010-efi-boot-generator-Do-not-automount-boot-partition.patch
+++ b/0010-efi-boot-generator-Do-not-automount-boot-partition.patch
@@ -1,17 +1,17 @@
-From 59f9145f7efb9163a2c4c0d877c29ea167be2b01 Mon Sep 17 00:00:00 2001
+From 82d19a981922c9f2cd8bfa15bf90fd2a8809d5f3 Mon Sep 17 00:00:00 2001
 From: Dimitri John Ledkov <dimitri.j.ledkov@intel.com>
 Date: Tue, 23 Jun 2015 11:48:36 +0100
-Subject: [PATCH] efi-boot-generator: Do not automount boot partition.
+Subject: [PATCH 10/42] efi-boot-generator: Do not automount boot partition.
 
 ---
  src/gpt-auto-generator/gpt-auto-generator.c | 3 +++
  1 file changed, 3 insertions(+)
 
 diff --git a/src/gpt-auto-generator/gpt-auto-generator.c b/src/gpt-auto-generator/gpt-auto-generator.c
-index f72a55c20..40942f142 100644
+index d9e29c47f3..f452562acd 100644
 --- a/src/gpt-auto-generator/gpt-auto-generator.c
 +++ b/src/gpt-auto-generator/gpt-auto-generator.c
-@@ -380,6 +380,9 @@ static int add_automount(
+@@ -381,6 +381,9 @@ static int add_automount(
          if (r < 0)
                  return log_error_errno(r, "Failed to write unit file %s: %m", p);
  
@@ -22,5 +22,5 @@ index f72a55c20..40942f142 100644
  }
  
 -- 
-2.19.0
+2.20.1
 
diff --git a/0011-core-do-not-apply-presets.patch b/0011-core-do-not-apply-presets.patch
index 76597d6..6395dcd 100644
--- a/0011-core-do-not-apply-presets.patch
+++ b/0011-core-do-not-apply-presets.patch
@@ -1,24 +1,30 @@
-From 358d102e0d782dad261d8eda0e56b54eeb58fe93 Mon Sep 17 00:00:00 2001
+From 2a4777ba32cbff5b9168c98e5e4f0bc9d0e6e2eb Mon Sep 17 00:00:00 2001
 From: Dimitri John Ledkov <dimitri.j.ledkov@intel.com>
 Date: Tue, 23 Jun 2015 11:50:13 +0100
-Subject: [PATCH] core: do not apply presets.
+Subject: [PATCH 11/42] core: do not apply presets.
 
 ---
- src/core/manager.c | 1 -
- 1 file changed, 1 deletion(-)
+ src/core/manager.c | 3 +--
+ 1 file changed, 1 insertion(+), 2 deletions(-)
 
 diff --git a/src/core/manager.c b/src/core/manager.c
-index 930df4e23..53b392830 100644
+index 6086531bab..dfb6ba5642 100644
 --- a/src/core/manager.c
 +++ b/src/core/manager.c
-@@ -1564,7 +1564,6 @@ int manager_startup(Manager *m, FILE *serialization, FDSet *fds) {
+@@ -1651,12 +1651,11 @@ int manager_startup(Manager *m, FILE *serialization, FDSet *fds) {
          if (r < 0)
                  return r;
  
 -        manager_preset_all(m);
-         lookup_paths_reduce(&m->lookup_paths);
+-
+         r = lookup_paths_reduce(&m->lookup_paths);
+         if (r < 0)
+                 log_warning_errno(r, "Failed ot reduce unit file paths, ignoring: %m");
+ 
++        lookup_paths_reduce(&m->lookup_paths);
          manager_build_unit_path_cache(m);
  
+         {
 -- 
-2.19.0
+2.20.1
 
diff --git a/0012-locale-setup-set-default-locale-to-a-unicode-one.patch b/0012-locale-setup-set-default-locale-to-a-unicode-one.patch
index fb197d2..df3b4af 100644
--- a/0012-locale-setup-set-default-locale-to-a-unicode-one.patch
+++ b/0012-locale-setup-set-default-locale-to-a-unicode-one.patch
@@ -1,17 +1,17 @@
-From 06372a72309235636f619e1b31aeef86414895fd Mon Sep 17 00:00:00 2001
+From cbefa92d7fd0251c14767c97f629081ac94d9b06 Mon Sep 17 00:00:00 2001
 From: Dimitri John Ledkov <dimitri.j.ledkov@intel.com>
 Date: Tue, 23 Jun 2015 11:50:44 +0100
-Subject: [PATCH] locale-setup: set default locale to a unicode one.
+Subject: [PATCH 12/42] locale-setup: set default locale to a unicode one.
 
 ---
- src/core/locale-setup.c | 5 +++++
- 1 file changed, 5 insertions(+)
+ src/core/locale-setup.c | 6 ++++++
+ 1 file changed, 6 insertions(+)
 
 diff --git a/src/core/locale-setup.c b/src/core/locale-setup.c
-index c14523fee..bc80398a5 100644
+index aa4a89c17a..186fa12f05 100644
 --- a/src/core/locale-setup.c
 +++ b/src/core/locale-setup.c
-@@ -64,6 +64,11 @@ int locale_setup(char ***environment) {
+@@ -59,6 +59,12 @@ int locale_setup(char ***environment) {
                          log_warning_errno(r, "Failed to read /etc/locale.conf: %m");
          }
  
@@ -20,9 +20,10 @@ index c14523fee..bc80398a5 100644
 +                variables[VARIABLE_LANG] = strdup("en_US.UTF-8");
 +        }
 +
-         add = NULL;
++        add = NULL;
          for (i = 0; i < _VARIABLE_LC_MAX; i++) {
                  char *s;
+ 
 -- 
-2.19.0
+2.20.1
 
diff --git a/0013-mount-setup-mount-kernel-fs-by-default.patch b/0013-mount-setup-mount-kernel-fs-by-default.patch
index f80d067..f80087d 100644
--- a/0013-mount-setup-mount-kernel-fs-by-default.patch
+++ b/0013-mount-setup-mount-kernel-fs-by-default.patch
@@ -1,7 +1,7 @@
-From eeebb5c93ab215b7a8fbc6cb0d16f5aea7aedb97 Mon Sep 17 00:00:00 2001
+From 852b9f1fd3a32fdd114452a9f3927ed9ad78057e Mon Sep 17 00:00:00 2001
 From: Dimitri John Ledkov <dimitri.j.ledkov@intel.com>
 Date: Mon, 6 Jul 2015 17:07:42 +0100
-Subject: [PATCH] mount-setup: mount kernel fs by default.
+Subject: [PATCH 13/42] mount-setup: mount kernel fs by default.
 
 Instead of using mount units, just mount hugetlbfs, mqueue, fusectl,
 configfs, debugfs directly from mount-setup.
@@ -21,10 +21,10 @@ configfs, debugfs directly from mount-setup.
  delete mode 100644 units/sys-kernel-debug.mount
 
 diff --git a/src/core/mount-setup.c b/src/core/mount-setup.c
-index 16880e615..c03e4788b 100644
+index 3ce6164b06..4576a29845 100644
 --- a/src/core/mount-setup.c
 +++ b/src/core/mount-setup.c
-@@ -103,6 +103,16 @@ static const MountPoint mount_table[] = {
+@@ -105,6 +105,16 @@ static const MountPoint mount_table[] = {
  #endif
          { "bpf",         "/sys/fs/bpf",               "bpf",        "mode=700",                MS_NOSUID|MS_NOEXEC|MS_NODEV,
            NULL,          MNT_NONE,                  },
@@ -43,7 +43,7 @@ index 16880e615..c03e4788b 100644
  /* These are API file systems that might be mounted by other software,
 diff --git a/units/dev-hugepages.mount b/units/dev-hugepages.mount
 deleted file mode 100644
-index 278ed9b61..000000000
+index 278ed9b610..0000000000
 --- a/units/dev-hugepages.mount
 +++ /dev/null
 @@ -1,23 +0,0 @@
@@ -72,7 +72,7 @@ index 278ed9b61..000000000
 -Type=hugetlbfs
 diff --git a/units/dev-mqueue.mount b/units/dev-mqueue.mount
 deleted file mode 100644
-index be32433d6..000000000
+index be32433d6c..0000000000
 --- a/units/dev-mqueue.mount
 +++ /dev/null
 @@ -1,22 +0,0 @@
@@ -99,10 +99,10 @@ index be32433d6..000000000
 -Where=/dev/mqueue
 -Type=mqueue
 diff --git a/units/meson.build b/units/meson.build
-index e4ac6ced6..545b63314 100644
+index d69508467f..cc75751c11 100644
 --- a/units/meson.build
 +++ b/units/meson.build
-@@ -6,10 +6,6 @@ units = [
+@@ -7,10 +7,6 @@ units = [
          ['cryptsetup-pre.target',               'HAVE_LIBCRYPTSETUP'],
          ['cryptsetup.target',                   'HAVE_LIBCRYPTSETUP',
           'sysinit.target.wants/'],
@@ -113,7 +113,7 @@ index e4ac6ced6..545b63314 100644
          ['emergency.target',                    ''],
          ['exit.target',                         ''],
          ['final.target',                        ''],
-@@ -68,12 +64,6 @@ units = [
+@@ -69,12 +65,6 @@ units = [
          ['sound.target',                        ''],
          ['suspend.target',                      ''],
          ['swap.target',                         ''],
@@ -128,7 +128,7 @@ index e4ac6ced6..545b63314 100644
          ['system-update.target',                ''],
 diff --git a/units/sys-fs-fuse-connections.mount b/units/sys-fs-fuse-connections.mount
 deleted file mode 100644
-index 7e7b05c3a..000000000
+index 7e7b05c3a2..0000000000
 --- a/units/sys-fs-fuse-connections.mount
 +++ /dev/null
 @@ -1,24 +0,0 @@
@@ -158,7 +158,7 @@ index 7e7b05c3a..000000000
 -Type=fusectl
 diff --git a/units/sys-kernel-config.mount b/units/sys-kernel-config.mount
 deleted file mode 100644
-index e213ca58b..000000000
+index e213ca58b3..0000000000
 --- a/units/sys-kernel-config.mount
 +++ /dev/null
 @@ -1,23 +0,0 @@
@@ -187,7 +187,7 @@ index e213ca58b..000000000
 -Type=configfs
 diff --git a/units/sys-kernel-debug.mount b/units/sys-kernel-debug.mount
 deleted file mode 100644
-index 53ce820b8..000000000
+index 53ce820b87..0000000000
 --- a/units/sys-kernel-debug.mount
 +++ /dev/null
 @@ -1,22 +0,0 @@
@@ -214,5 +214,5 @@ index 53ce820b8..000000000
 -Where=/sys/kernel/debug
 -Type=debugfs
 -- 
-2.19.0
+2.20.1
 
diff --git a/0014-Ship-default-services-in-system-unit-dir.patch b/0014-Ship-default-services-in-system-unit-dir.patch
index 2f641ac..6dd5dfa 100644
--- a/0014-Ship-default-services-in-system-unit-dir.patch
+++ b/0014-Ship-default-services-in-system-unit-dir.patch
@@ -1,17 +1,17 @@
-From bb60269c650db3197cb514bc3ee1a3fb189da8de Mon Sep 17 00:00:00 2001
+From 895f8ea7e97994d8e96ed8a0f9a73e1e001d66b0 Mon Sep 17 00:00:00 2001
 From: Dimitri John Ledkov <dimitri.j.ledkov@intel.com>
 Date: Mon, 24 Aug 2015 14:42:53 +0100
-Subject: [PATCH] Ship default services in system unit dir.
+Subject: [PATCH 14/42] Ship default services in system unit dir.
 
 ---
  units/meson.build | 16 ++++++++--------
  1 file changed, 8 insertions(+), 8 deletions(-)
 
 diff --git a/units/meson.build b/units/meson.build
-index 545b63314..4d9163226 100644
+index cc75751c11..1ed0342638 100644
 --- a/units/meson.build
 +++ b/units/meson.build
-@@ -51,7 +51,7 @@ units = [
+@@ -52,7 +52,7 @@ units = [
           join_paths(pkgsysconfdir, 'system/multi-user.target.wants/')],
          ['remote-fs-pre.target',                ''],
          ['remote-fs.target',                    '',
@@ -20,16 +20,16 @@ index 545b63314..4d9163226 100644
          ['rescue.target',                       '',
           'runlevel1.target'],
          ['rpcbind.target',                      ''],
-@@ -86,7 +86,7 @@ units = [
+@@ -88,7 +88,7 @@ units = [
          ['systemd-journald.socket',             '',
           'sockets.target.wants/'],
          ['systemd-networkd.socket',             'ENABLE_NETWORKD',
 -         join_paths(pkgsysconfdir, 'system/sockets.target.wants/')],
 +         'sockets.target.wants/'],
+         ['systemd-poweroff.service',             ''],
+         ['systemd-reboot.service',               ''],
          ['systemd-rfkill.socket',               'ENABLE_RFKILL'],
-         ['systemd-tmpfiles-clean.timer',        '',
-          'timers.target.wants/'],
-@@ -161,10 +161,10 @@ in_units = [
+@@ -166,10 +166,10 @@ in_units = [
          ['systemd-modules-load.service',         'HAVE_KMOD',
           'sysinit.target.wants/'],
          ['systemd-networkd.service',             'ENABLE_NETWORKD',
@@ -43,7 +43,7 @@ index 545b63314..4d9163226 100644
          ['systemd-nspawn@.service',              ''],
          ['systemd-portabled.service',            'ENABLE_PORTABLED',
           'dbus-org.freedesktop.portable1.service'],
-@@ -176,8 +176,8 @@ in_units = [
+@@ -179,8 +179,8 @@ in_units = [
          ['systemd-remount-fs.service',           '',
           'local-fs.target.wants/'],
          ['systemd-resolved.service',             'ENABLE_RESOLVE',
@@ -54,7 +54,7 @@ index 545b63314..4d9163226 100644
          ['systemd-rfkill.service',               'ENABLE_RFKILL'],
          ['systemd-suspend.service',              ''],
          ['systemd-sysctl.service',               '',
-@@ -187,7 +187,7 @@ in_units = [
+@@ -190,7 +190,7 @@ in_units = [
          ['systemd-timedated.service',            'ENABLE_TIMEDATED',
           'dbus-org.freedesktop.timedate1.service'],
          ['systemd-timesyncd.service',            'ENABLE_TIMESYNCD',
@@ -64,5 +64,5 @@ index 545b63314..4d9163226 100644
          ['systemd-tmpfiles-clean.service',       'ENABLE_TMPFILES'],
          ['systemd-tmpfiles-setup-dev.service',   'ENABLE_TMPFILES',
 -- 
-2.19.0
+2.20.1
 
diff --git a/0015-bootctl-Add-force-option-to-enable-chroot-install-re.patch b/0015-bootctl-Add-force-option-to-enable-chroot-install-re.patch
index 1d30ac8..5481130 100644
--- a/0015-bootctl-Add-force-option-to-enable-chroot-install-re.patch
+++ b/0015-bootctl-Add-force-option-to-enable-chroot-install-re.patch
@@ -1,8 +1,8 @@
-From fa28bc90efa36f48f2a0f2baf5ff2b9148184d32 Mon Sep 17 00:00:00 2001
+From 07a569ae7e149664f18754ac224a504d533d449f Mon Sep 17 00:00:00 2001
 From: Ikey Doherty <michael.i.doherty@intel.com>
 Date: Wed, 23 Sep 2015 03:36:36 +0100
-Subject: [PATCH] bootctl: Add --force option to enable chroot install/remove
- of sd-boot
+Subject: [PATCH 15/42] bootctl: Add --force option to enable chroot
+ install/remove of sd-boot
 
 This change enables the force-installation, removal, and update of
 the systemd EFI boot binaries and supporting assets, without requiring
@@ -26,36 +26,36 @@ configuration and layout.
  1 file changed, 10 insertions(+), 2 deletions(-)
 
 diff --git a/src/boot/bootctl.c b/src/boot/bootctl.c
-index 2832a39dd..61fb0d7d5 100644
+index dc2fd96628..0cefa810a8 100644
 --- a/src/boot/bootctl.c
 +++ b/src/boot/bootctl.c
-@@ -44,6 +44,8 @@ static char *arg_path = NULL;
- static bool arg_print_path = false;
- static bool arg_touch_variables = true;
+@@ -52,6 +52,8 @@ static PagerFlags arg_pager_flags = 0;
+ 
+ STATIC_DESTRUCTOR_REGISTER(arg_path, freep);
  
 +static bool arg_force = false;
 +
  static int acquire_esp(
                  bool unprivileged_mode,
                  uint32_t *ret_part,
-@@ -852,6 +854,7 @@ static int parse_argv(int argc, char *argv[]) {
-                 ARG_PATH = 0x100,
+@@ -886,6 +888,7 @@ static int parse_argv(int argc, char *argv[]) {
                  ARG_VERSION,
                  ARG_NO_VARIABLES,
+                 ARG_NO_PAGER,
 +                ARG_FORCE,
          };
  
          static const struct option options[] = {
-@@ -860,6 +863,7 @@ static int parse_argv(int argc, char *argv[]) {
-                 { "path",         required_argument, NULL, ARG_PATH         },
+@@ -895,6 +898,7 @@ static int parse_argv(int argc, char *argv[]) {
                  { "print-path",   no_argument,       NULL, 'p'              },
                  { "no-variables", no_argument,       NULL, ARG_NO_VARIABLES },
+                 { "no-pager",     no_argument,       NULL, ARG_NO_PAGER     },
 +                { "force",        no_argument,       NULL, ARG_FORCE        },
-                 { NULL,           0,                 NULL, 0                }
+                 {}
          };
  
-@@ -892,6 +896,10 @@ static int parse_argv(int argc, char *argv[]) {
-                         arg_touch_variables = false;
+@@ -931,6 +935,10 @@ static int parse_argv(int argc, char *argv[]) {
+                         arg_pager_flags |= PAGER_DISABLE;
                          break;
  
 +                case ARG_FORCE:
@@ -65,18 +65,18 @@ index 2832a39dd..61fb0d7d5 100644
                  case '?':
                          return -EINVAL;
  
-@@ -1093,7 +1101,7 @@ static int verb_install(int argc, char *argv[], void *userdata) {
-                 }
-         }
+@@ -1158,7 +1166,7 @@ static int verb_install(int argc, char *argv[], void *userdata) {
+ 
+         (void) sync_esp();
  
 -        if (arg_touch_variables)
 +        if (arg_touch_variables && !arg_force)
                  r = install_variables(arg_path,
                                        part, pstart, psize, uuid,
                                        "/EFI/systemd/systemd-boot" EFI_MACHINE_TYPE_NAME ".efi",
-@@ -1112,7 +1120,7 @@ static int verb_remove(int argc, char *argv[], void *userdata) {
+@@ -1179,7 +1187,7 @@ static int verb_remove(int argc, char *argv[], void *userdata) {
  
-         r = remove_binaries(arg_path);
+         (void) sync_esp();
  
 -        if (arg_touch_variables) {
 +        if (arg_touch_variables && !arg_force) {
@@ -84,5 +84,5 @@ index 2832a39dd..61fb0d7d5 100644
  
                  q = remove_variables(uuid, "/EFI/systemd/systemd-boot" EFI_MACHINE_TYPE_NAME ".efi", true);
 -- 
-2.19.0
+2.20.1
 
diff --git a/0016-kernel-install-Support-alternate-root-usage-via-SUBD.patch b/0016-kernel-install-Support-alternate-root-usage-via-SUBD.patch
index d5df114..ded2944 100644
--- a/0016-kernel-install-Support-alternate-root-usage-via-SUBD.patch
+++ b/0016-kernel-install-Support-alternate-root-usage-via-SUBD.patch
@@ -1,7 +1,7 @@
-From 73bdb16960deab2616ea4b3c5a36ca11e4b04a03 Mon Sep 17 00:00:00 2001
+From f0fd0ca85a623a291f1dd5b048ba1863c477e58c Mon Sep 17 00:00:00 2001
 From: Ikey Doherty <michael.i.doherty@intel.com>
 Date: Thu, 24 Sep 2015 19:15:55 +0100
-Subject: [PATCH] kernel-install: Support alternate root usage via
+Subject: [PATCH 16/42] kernel-install: Support alternate root usage via
  SUBDIR/PLUGIN_SUBDIR
 
 This enables kernel-install to be used with an alternative root, by accepting a new
@@ -18,12 +18,12 @@ Signed-off-by: Ikey Doherty <michael.i.doherty@intel.com>
  1 file changed, 42 insertions(+), 10 deletions(-)
 
 diff --git a/src/kernel-install/kernel-install b/src/kernel-install/kernel-install
-index f9d628a8e..de522a56c 100644
+index b85c7c557e..47f2c9f807 100644
 --- a/src/kernel-install/kernel-install
 +++ b/src/kernel-install/kernel-install
-@@ -27,8 +27,11 @@ usage()
+@@ -26,8 +26,11 @@ usage()
      echo "Usage:"
-     echo "        $0 add KERNEL-VERSION KERNEL-IMAGE"
+     echo "        $0 add KERNEL-VERSION KERNEL-IMAGE [INITRD-FILE ...]"
      echo "        $0 remove KERNEL-VERSION"
 +    echo "        $0 -p | --root: Optional. Prefix kernel-install operations with different root"
  }
@@ -33,7 +33,7 @@ index f9d628a8e..de522a56c 100644
  dropindirs_sort()
  {
      local suffix=$1; shift
-@@ -57,12 +60,26 @@ dropindirs_sort()
+@@ -56,12 +59,26 @@ dropindirs_sort()
  
  export LC_COLLATE=C
  
@@ -63,7 +63,7 @@ index f9d628a8e..de522a56c 100644
  
  if [[ "${0##*/}" == 'installkernel' ]]; then
      COMMAND='add'
-@@ -74,8 +91,21 @@ fi
+@@ -76,8 +93,21 @@ fi
  KERNEL_VERSION="$1"
  KERNEL_IMAGE="$2"
  
@@ -87,7 +87,7 @@ index f9d628a8e..de522a56c 100644
  fi
  
  if [[ ! $COMMAND ]] || [[ ! $KERNEL_VERSION ]]; then
-@@ -106,8 +136,8 @@ ret=0
+@@ -108,8 +138,8 @@ ret=0
  
  readarray -t PLUGINS <<<"$(
      dropindirs_sort ".install" \
@@ -98,16 +98,16 @@ index f9d628a8e..de522a56c 100644
  )"
  
  case $COMMAND in
-@@ -124,7 +154,7 @@ case $COMMAND in
+@@ -126,7 +156,7 @@ case $COMMAND in
  
          for f in "${PLUGINS[@]}"; do
              if [[ -x $f ]]; then
--                "$f" add "$KERNEL_VERSION" "$BOOT_DIR_ABS" "$KERNEL_IMAGE"
-+                PLUGIN_SUBDIR="${SUBDIR}" "$f" add "$KERNEL_VERSION" "$BOOT_DIR_ABS" "$KERNEL_IMAGE"
+-                "$f" add "$KERNEL_VERSION" "$BOOT_DIR_ABS" "$KERNEL_IMAGE" "${INITRD_OPTIONS[@]}"
++                PLUGIN_SUBDIR="${SUBDIR}" "$f" add "$KERNEL_VERSION" "$BOOT_DIR_ABS" "$KERNEL_IMAGE" "${INITRD_OPTIONS[@]}"
                  x=$?
                  if [[ $x == $SKIP_REMAINING ]]; then
                      ret=0
-@@ -146,7 +176,7 @@ case $COMMAND in
+@@ -148,7 +178,7 @@ case $COMMAND in
      remove)
          for f in "${PLUGINS[@]}"; do
              if [[ -x $f ]]; then
@@ -116,7 +116,7 @@ index f9d628a8e..de522a56c 100644
                  x=$?
                  if [[ $x == $SKIP_REMAINING ]]; then
                      ret=0
-@@ -156,7 +186,9 @@ case $COMMAND in
+@@ -158,7 +188,9 @@ case $COMMAND in
              fi
          done
  
@@ -128,5 +128,5 @@ index f9d628a8e..de522a56c 100644
          ;;
  
 -- 
-2.19.0
+2.20.1
 
diff --git a/0017-bootctl-Handle-gummiboot-systemd-migration.patch b/0017-bootctl-Handle-gummiboot-systemd-migration.patch
index 06325f5..72de3bb 100644
--- a/0017-bootctl-Handle-gummiboot-systemd-migration.patch
+++ b/0017-bootctl-Handle-gummiboot-systemd-migration.patch
@@ -1,7 +1,7 @@
-From 2841eeb29ea3cb7d8d2418e866236a831e6e7aaa Mon Sep 17 00:00:00 2001
+From a7baceda337aac51b269ead7edf09e25599c2680 Mon Sep 17 00:00:00 2001
 From: Ikey Doherty <michael.i.doherty@intel.com>
 Date: Wed, 14 Oct 2015 17:40:56 +0100
-Subject: [PATCH] bootctl: Handle gummiboot -> systemd migration
+Subject: [PATCH 17/42] bootctl: Handle gummiboot -> systemd migration
 
 On Linux systems we may encounter cases where the legacy gummiboot binary
 is still present on the ESP. In these cases a `bootctl install` or even
@@ -12,26 +12,31 @@ To counteract this upgrade problem, we will always continue to replace the
 legacy gummiboot (<=48) with systemd's merged tree, to provide a valid upgrade
 route for distributions.
 ---
- src/boot/bootctl.c | 6 ++++--
- 1 file changed, 4 insertions(+), 2 deletions(-)
+ src/boot/bootctl.c | 11 +++++++----
+ 1 file changed, 7 insertions(+), 4 deletions(-)
 
 diff --git a/src/boot/bootctl.c b/src/boot/bootctl.c
-index 61fb0d7d5..bfdacd4ff 100644
+index 0cefa810a8..9cd5e16bcd 100644
 --- a/src/boot/bootctl.c
 +++ b/src/boot/bootctl.c
-@@ -361,8 +361,10 @@ static int version_check(int fd_from, const char *from, int fd_to, const char *t
+@@ -383,10 +383,13 @@ static int version_check(int fd_from, const char *from, int fd_to, const char *t
+         r = get_file_version(fd_to, &b);
          if (r < 0)
                  return r;
-         if (r == 0 || compare_product(a, b) != 0) {
--                log_notice("Skipping \"%s\", since it's owned by another boot loader.", to);
--                return -EEXIST;
-+                if (!compare_product(b, "gummiboot")) {
-+                        log_notice("Skipping \"%s\", since it's owned by another boot loader.", to);
-+                        return -EEXIST;
-+                }
-         }
+-        if (r == 0 || compare_product(a, b) != 0)
+-                return log_notice_errno(SYNTHETIC_ERRNO(EEXIST),
+-                                        "Skipping \"%s\", since it's owned by another boot loader.",
+-                                        to);
++
++        if (r == 0 || compare_product(a, b) != 0) {
++                if (!compare_product(b, "gummiboot"))
++                        return log_notice_errno(SYNTHETIC_ERRNO(EEXIST),
++                                                "Skipping \"%s\", since it's owned by another boot loader.",
++                                                to);
++        }
  
          if (compare_version(a, b) < 0) {
+                 log_warning("Skipping \"%s\", since a newer boot loader version exists already.", to);
 -- 
-2.19.0
+2.20.1
 
diff --git a/0018-tmpfiles-Make-var-cache-ldconfig-world-readable.patch b/0018-tmpfiles-Make-var-cache-ldconfig-world-readable.patch
index 89dc0f9..eb6b957 100644
--- a/0018-tmpfiles-Make-var-cache-ldconfig-world-readable.patch
+++ b/0018-tmpfiles-Make-var-cache-ldconfig-world-readable.patch
@@ -1,7 +1,7 @@
-From c8b536308e70e8eb54db46784f00dba8015c7c2d Mon Sep 17 00:00:00 2001
+From 228491ae0ef9f570e0bc687abc9557f45b4534ce Mon Sep 17 00:00:00 2001
 From: Ikey Doherty <michael.i.doherty@intel.com>
 Date: Fri, 27 Nov 2015 16:30:12 +0000
-Subject: [PATCH] tmpfiles: Make /var/cache/ldconfig world readable
+Subject: [PATCH 18/42] tmpfiles: Make /var/cache/ldconfig world readable
 
 Signed-off-by: Ikey Doherty <michael.i.doherty@intel.com>
 ---
@@ -9,7 +9,7 @@ Signed-off-by: Ikey Doherty <michael.i.doherty@intel.com>
  1 file changed, 2 insertions(+)
 
 diff --git a/tmpfiles.d/var.conf.m4 b/tmpfiles.d/var.conf.m4
-index 0e2c50966..ea51397a4 100644
+index 0e2c50966d..ea51397a46 100644
 --- a/tmpfiles.d/var.conf.m4
 +++ b/tmpfiles.d/var.conf.m4
 @@ -19,6 +19,8 @@ f /var/log/lastlog 0664 root utmp -
@@ -22,5 +22,5 @@ index 0e2c50966..ea51397a4 100644
  d /var/lib 0755 - - -
  
 -- 
-2.19.0
+2.20.1
 
diff --git a/0019-Set-a-default-unique-hostname-when-it-is-either-clr-.patch b/0019-Set-a-default-unique-hostname-when-it-is-either-clr-.patch
index 5eab720..1ec448d 100644
--- a/0019-Set-a-default-unique-hostname-when-it-is-either-clr-.patch
+++ b/0019-Set-a-default-unique-hostname-when-it-is-either-clr-.patch
@@ -1,8 +1,8 @@
-From 0fff0a99a334842ccb42af94ffea990fa2392db0 Mon Sep 17 00:00:00 2001
+From 1342653fad771598b3476a666be39374516bc8a7 Mon Sep 17 00:00:00 2001
 From: Ikey Doherty <michael.i.doherty@intel.com>
 Date: Thu, 14 Apr 2016 19:15:46 +0100
-Subject: [PATCH] Set a default, unique, hostname, when it is either 'clr' or
- 'localhost'
+Subject: [PATCH 19/42] Set a default, unique, hostname, when it is either
+ 'clr' or 'localhost'
 
 Signed-off-by: Ikey Doherty <michael.i.doherty@intel.com>
 ---
@@ -12,7 +12,7 @@ Signed-off-by: Ikey Doherty <michael.i.doherty@intel.com>
  3 files changed, 43 insertions(+)
 
 diff --git a/src/core/hostname-setup.c b/src/core/hostname-setup.c
-index 83cce8813..981d9e443 100644
+index 83cce88131..981d9e443b 100644
 --- a/src/core/hostname-setup.c
 +++ b/src/core/hostname-setup.c
 @@ -3,6 +3,9 @@
@@ -67,7 +67,7 @@ index 83cce8813..981d9e443 100644
 +        return 0;
 +}
 diff --git a/src/core/hostname-setup.h b/src/core/hostname-setup.h
-index dc7b9a626..e62793e5c 100644
+index dc7b9a6262..e62793e5c5 100644
 --- a/src/core/hostname-setup.h
 +++ b/src/core/hostname-setup.h
 @@ -2,3 +2,5 @@
@@ -77,17 +77,17 @@ index dc7b9a626..e62793e5c 100644
 +
 +int set_first_hostname(void);
 diff --git a/src/core/main.c b/src/core/main.c
-index 44dd8348b..f0f2f78b3 100644
+index 561f956f0a..de0b5b9f78 100644
 --- a/src/core/main.c
 +++ b/src/core/main.c
-@@ -1825,6 +1825,7 @@ static int initialize_runtime(
+@@ -2033,6 +2033,7 @@ static int initialize_runtime(
                          status_welcome();
                          hostname_setup();
                          machine_id_setup(NULL, arg_machine_id, NULL);
 +                        set_first_hostname();
                          loopback_setup();
                          bump_unix_max_dgram_qlen();
-                         test_usr();
+                         bump_file_max_and_nr_open();
 -- 
-2.19.0
+2.20.1
 
diff --git a/0020-more-udev-children-workers.patch b/0020-more-udev-children-workers.patch
index 8ba632f..bce40bd 100644
--- a/0020-more-udev-children-workers.patch
+++ b/0020-more-udev-children-workers.patch
@@ -1,14 +1,14 @@
-From e0d2e20257c77c0078902b48f3f62fe977bd1952 Mon Sep 17 00:00:00 2001
+From 3ab270830893e537f4c436d90714d6a1c388a3e8 Mon Sep 17 00:00:00 2001
 From: Arjan van de Ven <arjan@linux.intel.com>
 Date: Sat, 18 Jun 2016 17:33:33 +0000
-Subject: [PATCH] more udev children workers
+Subject: [PATCH 20/42] more udev children workers
 
 ---
  units/systemd-udevd.service.in | 2 +-
  1 file changed, 1 insertion(+), 1 deletion(-)
 
 diff --git a/units/systemd-udevd.service.in b/units/systemd-udevd.service.in
-index 6a3814e5d..f95701100 100644
+index 6a3814e5d9..f957011007 100644
 --- a/units/systemd-udevd.service.in
 +++ b/units/systemd-udevd.service.in
 @@ -21,7 +21,7 @@ OOMScoreAdjust=-1000
@@ -21,5 +21,5 @@ index 6a3814e5d..f95701100 100644
  WatchdogSec=3min
  TasksMax=infinity
 -- 
-2.19.0
+2.20.1
 
diff --git a/0021-not-load-iptables.patch b/0021-not-load-iptables.patch
index 1d72ad0..94225bf 100644
--- a/0021-not-load-iptables.patch
+++ b/0021-not-load-iptables.patch
@@ -1,18 +1,18 @@
-From 6c3fb54f769d76852d2e06cf058b4d9be0463dbf Mon Sep 17 00:00:00 2001
+From 39a8f3716a2f684382f6d138f9c9885f5319ceed Mon Sep 17 00:00:00 2001
 From: Arjan van de Ven <arjan@linux.intel.com>
 Date: Sun, 19 Jun 2016 00:51:22 +0000
-Subject: [PATCH] not load iptables
+Subject: [PATCH 21/42] not load iptables
 
 ---
  src/core/kmod-setup.c | 4 ----
  1 file changed, 4 deletions(-)
 
 diff --git a/src/core/kmod-setup.c b/src/core/kmod-setup.c
-index 925192955..33a3de6be 100644
+index a91cfebc67..bfb5377202 100644
 --- a/src/core/kmod-setup.c
 +++ b/src/core/kmod-setup.c
-@@ -85,10 +85,6 @@ int kmod_setup(void) {
-                 /* this should never be a module */
+@@ -87,10 +87,6 @@ int kmod_setup(void) {
+                 /* This should never be a module */
                  { "unix",      "/proc/net/unix",            true,   true,    NULL      },
  
 -#if HAVE_LIBIPTC
@@ -23,5 +23,5 @@ index 925192955..33a3de6be 100644
                  { "virtio_rng", NULL,                       false,  false,   has_virtio_rng },
          };
 -- 
-2.19.0
+2.20.1
 
diff --git a/0022-Add-journal-flush-service-for-Microsoft-Azure-VMs.patch b/0022-Add-journal-flush-service-for-Microsoft-Azure-VMs.patch
index 133fba1..c6c7957 100644
--- a/0022-Add-journal-flush-service-for-Microsoft-Azure-VMs.patch
+++ b/0022-Add-journal-flush-service-for-Microsoft-Azure-VMs.patch
@@ -1,21 +1,21 @@
-From 48083bbfbcc5bf410c776f0885c1fc5974944d79 Mon Sep 17 00:00:00 2001
+From d957fb5ff420e02bb5d587ff4eee6c11960cb85f Mon Sep 17 00:00:00 2001
 From: Matthew Johnson <matthew.johnson@intel.com>
 Date: Tue, 20 Sep 2016 10:49:55 -0700
-Subject: [PATCH] Add journal flush service for Microsoft Azure VMs
+Subject: [PATCH 22/42] Add journal flush service for Microsoft Azure VMs
 
 Removes "Before" clause when in a Microsoft VM.
 ---
- units/meson.build                                             | 2 ++
- ...flush.service.in => systemd-journal-flush-msft.service.in} | 4 +---
- units/systemd-journal-flush.service.in                        | 1 +
- 3 files changed, 4 insertions(+), 3 deletions(-)
- copy units/{systemd-journal-flush.service.in => systemd-journal-flush-msft.service.in} (86%)
+ units/meson.build                           |  2 ++
+ units/systemd-journal-flush-msft.service.in | 22 +++++++++++++++++++++
+ units/systemd-journal-flush.service.in      |  1 +
+ 3 files changed, 25 insertions(+)
+ create mode 100644 units/systemd-journal-flush-msft.service.in
 
 diff --git a/units/meson.build b/units/meson.build
-index 4d9163226..f1e929f5d 100644
+index 1ed0342638..3e3ef30967 100644
 --- a/units/meson.build
 +++ b/units/meson.build
-@@ -144,6 +144,8 @@ in_units = [
+@@ -149,6 +149,8 @@ in_units = [
           'sysinit.target.wants/'],
          ['systemd-journal-flush.service',         '',
           'sysinit.target.wants/'],
@@ -24,41 +24,46 @@ index 4d9163226..f1e929f5d 100644
          ['systemd-journal-gatewayd.service',     'ENABLE_REMOTE HAVE_MICROHTTPD'],
          ['systemd-journal-remote.service',       'ENABLE_REMOTE HAVE_MICROHTTPD'],
          ['systemd-journal-upload.service',       'ENABLE_REMOTE HAVE_LIBCURL'],
-diff --git a/units/systemd-journal-flush.service.in b/units/systemd-journal-flush-msft.service.in
-similarity index 86%
-copy from units/systemd-journal-flush.service.in
-copy to units/systemd-journal-flush-msft.service.in
-index 439f5f3f7..056da1f6e 100644
---- a/units/systemd-journal-flush.service.in
+diff --git a/units/systemd-journal-flush-msft.service.in b/units/systemd-journal-flush-msft.service.in
+new file mode 100644
+index 0000000000..056da1f6e2
+--- /dev/null
 +++ b/units/systemd-journal-flush-msft.service.in
-@@ -1,5 +1,3 @@
--#  SPDX-License-Identifier: LGPL-2.1+
--#
- #  This file is part of systemd.
- #
- #  systemd is free software; you can redistribute it and/or modify it
-@@ -14,8 +12,8 @@ DefaultDependencies=no
- Requires=systemd-journald.service
- After=systemd-journald.service
- After=systemd-remount-fs.service
--Before=systemd-user-sessions.service systemd-tmpfiles-setup.service
- RequiresMountsFor=/var/log/journal
+@@ -0,0 +1,22 @@
++#  This file is part of systemd.
++#
++#  systemd is free software; you can redistribute it and/or modify it
++#  under the terms of the GNU Lesser General Public License as published by
++#  the Free Software Foundation; either version 2.1 of the License, or
++#  (at your option) any later version.
++
++[Unit]
++Description=Flush Journal to Persistent Storage
++Documentation=man:systemd-journald.service(8) man:journald.conf(5)
++DefaultDependencies=no
++Requires=systemd-journald.service
++After=systemd-journald.service
++After=systemd-remount-fs.service
++RequiresMountsFor=/var/log/journal
 +ConditionVirtualization=microsoft
- 
- [Service]
- ExecStart=@rootbindir@/journalctl --flush
++
++[Service]
++ExecStart=@rootbindir@/journalctl --flush
++Type=oneshot
++RemainAfterExit=yes
++TimeoutSec=90s
 diff --git a/units/systemd-journal-flush.service.in b/units/systemd-journal-flush.service.in
-index 439f5f3f7..09f5c9e85 100644
+index bacfe51d6f..4640675c6e 100644
 --- a/units/systemd-journal-flush.service.in
 +++ b/units/systemd-journal-flush.service.in
-@@ -16,6 +16,7 @@ After=systemd-journald.service
- After=systemd-remount-fs.service
- Before=systemd-user-sessions.service systemd-tmpfiles-setup.service
+@@ -15,6 +15,7 @@ Requires=systemd-journald.service
+ After=systemd-journald.service systemd-remount-fs.service
+ Before=systemd-tmpfiles-setup.service
  RequiresMountsFor=/var/log/journal
 +ConditionVirtualization=!microsoft
  
  [Service]
  ExecStart=@rootbindir@/journalctl --flush
 -- 
-2.19.0
+2.20.1
 
diff --git a/0023-Disable-resolved-as-default-resolver-write-at-boot.patch b/0023-Disable-resolved-as-default-resolver-write-at-boot.patch
index a7ef028..dbd72ee 100644
--- a/0023-Disable-resolved-as-default-resolver-write-at-boot.patch
+++ b/0023-Disable-resolved-as-default-resolver-write-at-boot.patch
@@ -1,7 +1,7 @@
-From 35f559c5e484d095198001275628c37ae0b73f6d Mon Sep 17 00:00:00 2001
+From ee1b6dadb13c35bc67f783bcc247fcd7506ec620 Mon Sep 17 00:00:00 2001
 From: Miguel Bernal Marin <miguel.bernal.marin@linux.intel.com>
 Date: Mon, 18 Jul 2016 14:02:51 -0500
-Subject: [PATCH] Disable resolved as default resolver, write at boot
+Subject: [PATCH 23/42] Disable resolved as default resolver, write at boot
 
 Write the resolv.conf at boot immediately.
 
@@ -16,7 +16,7 @@ Ref: https://github.com/coreos/coreos-overlay/pull/2129/commits/76830bedf02a8c54
  1 file changed, 1 insertion(+), 1 deletion(-)
 
 diff --git a/tmpfiles.d/etc.conf.m4 b/tmpfiles.d/etc.conf.m4
-index ad55479bc..0e58e3133 100644
+index ad55479bc5..0e58e3133a 100644
 --- a/tmpfiles.d/etc.conf.m4
 +++ b/tmpfiles.d/etc.conf.m4
 @@ -12,5 +12,5 @@ m4_ifdef(`HAVE_SMACK_RUN_LABEL',
@@ -27,5 +27,5 @@ index ad55479bc..0e58e3133 100644
 +L+! /etc/resolv.conf - - - - ../run/systemd/resolve/resolv.conf
  )m4_dnl
 -- 
-2.19.0
+2.20.1
 
diff --git a/0024-Enable-BBR-Bottleneck-Bandwidth-and-RTT.patch b/0024-Enable-BBR-Bottleneck-Bandwidth-and-RTT.patch
index f0fca0b..f01be3f 100644
--- a/0024-Enable-BBR-Bottleneck-Bandwidth-and-RTT.patch
+++ b/0024-Enable-BBR-Bottleneck-Bandwidth-and-RTT.patch
@@ -1,7 +1,7 @@
-From e2ad6686e232a7a660587a2b370d8fb017b0932b Mon Sep 17 00:00:00 2001
+From 93ec17f8998cc51f0bd0735efaf9fd042fc8b9ec Mon Sep 17 00:00:00 2001
 From: Auke Kok <auke-jan.h.kok@intel.com>
 Date: Fri, 31 Mar 2017 10:14:16 -0700
-Subject: [PATCH] Enable BBR - Bottleneck Bandwidth and RTT
+Subject: [PATCH 24/42] Enable BBR - Bottleneck Bandwidth and RTT
 
 Enable the `fq` qdisc.
 ---
@@ -9,7 +9,7 @@ Enable the `fq` qdisc.
  1 file changed, 1 insertion(+), 1 deletion(-)
 
 diff --git a/sysctl.d/50-default.conf b/sysctl.d/50-default.conf
-index b67ae87ca..39f944117 100644
+index 27084f6242..b7043d0f49 100644
 --- a/sysctl.d/50-default.conf
 +++ b/sysctl.d/50-default.conf
 @@ -31,7 +31,7 @@ net.ipv4.conf.all.accept_source_route = 0
@@ -19,8 +19,8 @@ index b67ae87ca..39f944117 100644
 -net.core.default_qdisc = fq_codel
 +net.core.default_qdisc = fq
  
- # Request Explicit Congestion Notification (ECN) on both in and outgoing connections
- net.ipv4.tcp_ecn = 1
+ # Enable hard and soft link protection
+ fs.protected_hardlinks = 1
 -- 
-2.19.0
+2.20.1
 
diff --git a/0025-network-online-complete-once-one-link-is-online-not-.patch b/0025-network-online-complete-once-one-link-is-online-not-.patch
index 48aef66..168d03f 100644
--- a/0025-network-online-complete-once-one-link-is-online-not-.patch
+++ b/0025-network-online-complete-once-one-link-is-online-not-.patch
@@ -1,17 +1,18 @@
-From 7d4c86cfae417928667cedb1744f2733b68a2378 Mon Sep 17 00:00:00 2001
+From 79e796c1daeb731a2fd5807189cc9bfe1252deaf Mon Sep 17 00:00:00 2001
 From: Auke Kok <auke-jan.h.kok@intel.com>
 Date: Fri, 31 Mar 2017 10:15:52 -0700
-Subject: [PATCH] network-online: complete once one link is online, not all.
+Subject: [PATCH 25/42] network-online: complete once one link is online, not
+ all.
 
 ---
  src/network/wait-online/manager.c | 2 --
  1 file changed, 2 deletions(-)
 
 diff --git a/src/network/wait-online/manager.c b/src/network/wait-online/manager.c
-index ccda93bab..824f292c3 100644
+index 67218b6db3..776b886a73 100644
 --- a/src/network/wait-online/manager.c
 +++ b/src/network/wait-online/manager.c
-@@ -57,13 +57,11 @@ bool manager_all_configured(Manager *m) {
+@@ -58,13 +58,11 @@ bool manager_all_configured(Manager *m) {
                  if (!l->state) {
                          log_debug("link %s has not yet been processed by udev",
                                    l->ifname);
@@ -26,5 +27,5 @@ index ccda93bab..824f292c3 100644
  
                  if (l->operational_state &&
 -- 
-2.19.0
+2.20.1
 
diff --git a/0026-DHCP-retry-faster.patch b/0026-DHCP-retry-faster.patch
index 1b96ab2..318d629 100644
--- a/0026-DHCP-retry-faster.patch
+++ b/0026-DHCP-retry-faster.patch
@@ -1,17 +1,17 @@
-From 41a92e78eb1eaafb2f7552d782747f82a5c6fc99 Mon Sep 17 00:00:00 2001
+From 3cf6203995f9c5c94ee60f1125e4e39cfefad258 Mon Sep 17 00:00:00 2001
 From: Auke Kok <auke-jan.h.kok@intel.com>
 Date: Fri, 31 Mar 2017 10:16:21 -0700
-Subject: [PATCH] DHCP: retry faster.
+Subject: [PATCH 26/42] DHCP: retry faster.
 
 ---
  src/libsystemd-network/sd-dhcp-client.c | 2 +-
  1 file changed, 1 insertion(+), 1 deletion(-)
 
 diff --git a/src/libsystemd-network/sd-dhcp-client.c b/src/libsystemd-network/sd-dhcp-client.c
-index ff434f8ce..18eac879b 100644
+index 35fc88ef91..1b131795ef 100644
 --- a/src/libsystemd-network/sd-dhcp-client.c
 +++ b/src/libsystemd-network/sd-dhcp-client.c
-@@ -1013,7 +1013,7 @@ static int client_timeout_resend(
+@@ -1053,7 +1053,7 @@ static int client_timeout_resend(
                  if (client->attempt < 64)
                          client->attempt *= 2;
  
@@ -21,5 +21,5 @@ index ff434f8ce..18eac879b 100644
                  break;
  
 -- 
-2.19.0
+2.20.1
 
diff --git a/0027-Remove-libm-memory-overhead.patch b/0027-Remove-libm-memory-overhead.patch
index a24c037..081db74 100644
--- a/0027-Remove-libm-memory-overhead.patch
+++ b/0027-Remove-libm-memory-overhead.patch
@@ -1,7 +1,7 @@
-From af1f003004cfa6d434c9247e7e7076fc0d8e0c81 Mon Sep 17 00:00:00 2001
+From e40142288b7d01953fc92760b44bb639b388cf5a Mon Sep 17 00:00:00 2001
 From: Auke Kok <auke-jan.h.kok@intel.com>
 Date: Fri, 14 Jul 2017 11:31:38 -0700
-Subject: [PATCH] Remove libm memory overhead.
+Subject: [PATCH 27/42] Remove libm memory overhead.
 
 timesyncd pulls in libm, only for one single exp2() in a debug log
 statement save the memory by not logging this little bit of info.
@@ -10,7 +10,7 @@ statement save the memory by not logging this little bit of info.
  1 file changed, 1 insertion(+), 1 deletion(-)
 
 diff --git a/src/timesync/timesyncd-manager.c b/src/timesync/timesyncd-manager.c
-index 2b731af9e..99929ed9a 100644
+index 6fde4a316b..99a638b874 100644
 --- a/src/timesync/timesyncd-manager.c
 +++ b/src/timesync/timesyncd-manager.c
 @@ -579,7 +579,7 @@ static int manager_receive_response(sd_event_source *source, int fd, uint32_t re
@@ -23,5 +23,5 @@ index 2b731af9e..99929ed9a 100644
                    ntpmsg.stratum == 1 ? ntpmsg.refid : "n/a",
                    origin - OFFSET_1900_1970,
 -- 
-2.19.0
+2.20.1
 
diff --git a/0028-udev-log-also-device-path.patch b/0028-udev-log-also-device-path.patch
index 845b6fa..c1c9359 100644
--- a/0028-udev-log-also-device-path.patch
+++ b/0028-udev-log-also-device-path.patch
@@ -1,27 +1,33 @@
-From 2fd1bd15440eab0da0b94d6837d3b61ad5521627 Mon Sep 17 00:00:00 2001
+From e9ad78d7e2862b8f7f6a73761803f74287d7b2a6 Mon Sep 17 00:00:00 2001
 From: Auke Kok <auke-jan.h.kok@intel.com>
 Date: Fri, 14 Jul 2017 11:32:54 -0700
-Subject: [PATCH] udev: log also device path.
+Subject: [PATCH 28/42] udev: log also device path.
 
 ---
- src/udev/udevd.c | 4 ++--
- 1 file changed, 2 insertions(+), 2 deletions(-)
+ src/udev/udevd.c | 10 +++++++++-
+ 1 file changed, 9 insertions(+), 1 deletion(-)
 
 diff --git a/src/udev/udevd.c b/src/udev/udevd.c
-index 34f6a9550..89b2063ba 100644
+index 0303f36b4f..944c0cd889 100644
 --- a/src/udev/udevd.c
 +++ b/src/udev/udevd.c
-@@ -605,8 +605,8 @@ static int event_queue_insert(Manager *manager, struct udev_device *dev) {
-         event->is_block = streq("block", udev_device_get_subsystem(dev));
-         event->ifindex = udev_device_get_ifindex(dev);
+@@ -647,7 +647,15 @@ static int event_queue_insert(Manager *manager, sd_device *dev) {
  
--        log_debug("seq %llu queued, '%s' '%s'", udev_device_get_seqnum(dev),
--             udev_device_get_action(dev), udev_device_get_subsystem(dev));
-+        log_debug("seq %llu queued, '%s' '%s' '%s'", udev_device_get_seqnum(dev),
-+             udev_device_get_action(dev), udev_device_get_subsystem(dev), udev_device_get_devpath(dev));
+         LIST_APPEND(event, manager->events, event);
  
-         event->state = EVENT_QUEUED;
+-        log_device_debug(dev, "Device (SEQNUM=%"PRIu64", ACTION=%s) is queued", seqnum, action);
++        if (DEBUG_LOGGING) {
++                const char* devpath;
++                if (sd_device_get_property_value(dev, "ACTION", &val) < 0)
++                        val = NULL;
++                if (sd_device_get_devpath(event->dev, &devpath) < 0)
++                        devpath = NULL;
++
++                log_device_debug(dev, "Device (SEQNUM=%"PRIu64", ACTION=%s, PATH=%s) is queued", seqnum, strnull(val), strnull(devpath));
++        }
  
+         return 0;
+ }
 -- 
-2.19.0
+2.20.1
 
diff --git a/0029-skip-not-present-ACPI-devices.patch b/0029-skip-not-present-ACPI-devices.patch
index 0e61279..2864b3d 100644
--- a/0029-skip-not-present-ACPI-devices.patch
+++ b/0029-skip-not-present-ACPI-devices.patch
@@ -1,7 +1,7 @@
-From f378e6f14c7306dbe10a7c73ac1ac2a0515e5130 Mon Sep 17 00:00:00 2001
+From 821d876eecc44ad73c4ba3a0d8be3b93a02aab7e Mon Sep 17 00:00:00 2001
 From: Auke Kok <auke-jan.h.kok@intel.com>
 Date: Fri, 14 Jul 2017 11:33:26 -0700
-Subject: [PATCH] skip not-present ACPI devices
+Subject: [PATCH 29/42] skip not-present ACPI devices
 
 Xen and older Qemu expose a boatload (253) ACPI devices to the guest
 that are not present; these show up in sysfs but there's nothing
@@ -14,10 +14,10 @@ boot time
  1 file changed, 20 insertions(+)
 
 diff --git a/src/libsystemd/sd-device/device-enumerator.c b/src/libsystemd/sd-device/device-enumerator.c
-index ee71fa881..7fda4f492 100644
+index 20529aafd3..c1b0909507 100644
 --- a/src/libsystemd/sd-device/device-enumerator.c
 +++ b/src/libsystemd/sd-device/device-enumerator.c
-@@ -446,6 +446,23 @@ static bool match_sysname(sd_device_enumerator *enumerator, const char *sysname)
+@@ -434,6 +434,23 @@ static bool match_sysname(sd_device_enumerator *enumerator, const char *sysname)
          return false;
  }
  
@@ -41,9 +41,9 @@ index ee71fa881..7fda4f492 100644
  static int enumerator_scan_dir_and_add_devices(sd_device_enumerator *enumerator, const char *basedir, const char *subdir1, const char *subdir2) {
          _cleanup_closedir_ DIR *dir = NULL;
          char *path;
-@@ -481,6 +498,9 @@ static int enumerator_scan_dir_and_add_devices(sd_device_enumerator *enumerator,
+@@ -468,6 +485,9 @@ static int enumerator_scan_dir_and_add_devices(sd_device_enumerator *enumerator,
  
-                 (void)sprintf(syspath, "%s%s", path, dent->d_name);
+                 (void) sprintf(syspath, "%s%s", path, dent->d_name);
  
 +                if (acpi_status_disabled(syspath))
 +                        continue;
@@ -52,5 +52,5 @@ index ee71fa881..7fda4f492 100644
                  if (k < 0) {
                          if (k != -ENODEV)
 -- 
-2.19.0
+2.20.1
 
diff --git a/0030-Ensure-var-run-is-never-a-directory.patch b/0030-Ensure-var-run-is-never-a-directory.patch
index b751c47..141e3ba 100644
--- a/0030-Ensure-var-run-is-never-a-directory.patch
+++ b/0030-Ensure-var-run-is-never-a-directory.patch
@@ -1,17 +1,17 @@
-From a8ad29f21411578a1af67384e3649f0c3a29d10d Mon Sep 17 00:00:00 2001
+From abfe98ef5cba4ee4e7f3d7ec41ed31aa52a95d8d Mon Sep 17 00:00:00 2001
 From: Auke Kok <auke-jan.h.kok@intel.com>
 Date: Fri, 14 Jul 2017 11:34:00 -0700
-Subject: [PATCH] Ensure /var/run is never a directory.
+Subject: [PATCH 30/42] Ensure /var/run is never a directory.
 
 ---
  src/core/mount-setup.c | 8 ++++++++
  1 file changed, 8 insertions(+)
 
 diff --git a/src/core/mount-setup.c b/src/core/mount-setup.c
-index c03e4788b..f52445b07 100644
+index 4576a29845..f5ad6bf925 100644
 --- a/src/core/mount-setup.c
 +++ b/src/core/mount-setup.c
-@@ -410,11 +410,19 @@ static int relabel_cgroup_filesystems(void) {
+@@ -514,11 +514,19 @@ static int relabel_extra(void) {
  
  int mount_setup(bool loaded_policy) {
          int r = 0;
@@ -32,5 +32,5 @@ index c03e4788b..f52445b07 100644
          /* Nodes in devtmpfs and /run need to be manually updated for
           * the appropriate labels, after mounting. The other virtual
 -- 
-2.19.0
+2.20.1
 
diff --git a/0031-Make-timesyncd-a-simple-service.patch b/0031-Make-timesyncd-a-simple-service.patch
index 91da81f..7896207 100644
--- a/0031-Make-timesyncd-a-simple-service.patch
+++ b/0031-Make-timesyncd-a-simple-service.patch
@@ -1,7 +1,7 @@
-From 44e7ea6f888b2043a1bc71b47cc5e11472f1a4e6 Mon Sep 17 00:00:00 2001
+From ff8e50b3a9e186d94610a91a570d88b22f0eef11 Mon Sep 17 00:00:00 2001
 From: Auke Kok <auke-jan.h.kok@intel.com>
 Date: Fri, 14 Jul 2017 11:34:36 -0700
-Subject: [PATCH] Make timesyncd a "simple" service
+Subject: [PATCH 31/42] Make timesyncd a "simple" service
 
 the daemon ends up waiting 100 msec on networking conditions before notifying
 that it is done, even though that's really not relevant
@@ -10,18 +10,18 @@ that it is done, even though that's really not relevant
  1 file changed, 1 insertion(+), 1 deletion(-)
 
 diff --git a/units/systemd-timesyncd.service.in b/units/systemd-timesyncd.service.in
-index 4a490b6e1..1638c1bc3 100644
+index 03ade45d08..7b0e9e8b96 100644
 --- a/units/systemd-timesyncd.service.in
 +++ b/units/systemd-timesyncd.service.in
-@@ -19,7 +19,7 @@ Conflicts=shutdown.target
- Wants=time-sync.target
- 
- [Service]
+@@ -42,7 +42,7 @@ StateDirectory=systemd/timesync
+ SystemCallArchitectures=native
+ SystemCallErrorNumber=EPERM
+ SystemCallFilter=@system-service @clock
 -Type=notify
 +Type=simple
- Restart=always
- RestartSec=0
- ExecStart=!!@rootlibexecdir@/systemd-timesyncd
+ User=systemd-timesync
+ WatchdogSec=3min
+ 
 -- 
-2.19.0
+2.20.1
 
diff --git a/0032-Compile-udev-with-O3.patch b/0032-Compile-udev-with-O3.patch
index 32c3a4c..77f67d1 100644
--- a/0032-Compile-udev-with-O3.patch
+++ b/0032-Compile-udev-with-O3.patch
@@ -1,7 +1,7 @@
-From e8665c6eeaa08bafd05d52becec121fefcc7f5a5 Mon Sep 17 00:00:00 2001
+From bf518d0196d69eac47c35bfebaccb859a878081b Mon Sep 17 00:00:00 2001
 From: Auke Kok <auke-jan.h.kok@intel.com>
 Date: Fri, 14 Jul 2017 11:35:13 -0700
-Subject: [PATCH] Compile udev with -O3
+Subject: [PATCH 32/42] Compile udev with -O3
 
 udevd benefits from -O3 as it heavily affects boot time.
 ---
@@ -9,27 +9,27 @@ udevd benefits from -O3 as it heavily affects boot time.
  1 file changed, 2 insertions(+), 2 deletions(-)
 
 diff --git a/meson.build b/meson.build
-index c3260b2ba..0d13e7d64 100644
+index 0123762851..a455d48a52 100644
 --- a/meson.build
 +++ b/meson.build
-@@ -2413,7 +2413,7 @@ public_programs += [exe]
+@@ -2638,7 +2638,7 @@ public_programs += exe
  exe = executable('systemd-udevd',
                   systemd_udevd_sources,
                   include_directories : includes,
--                 c_args : ['-DLOG_REALM=LOG_REALM_UDEV'],
+-                 c_args : '-DLOG_REALM=LOG_REALM_UDEV',
 +                 c_args : ['-DLOG_REALM=LOG_REALM_UDEV', '-O3'],
                   link_with : [libudev_core,
                                libsystemd_network,
                                libudev_static],
-@@ -2429,7 +2429,7 @@ public_programs += [exe]
+@@ -2654,7 +2654,7 @@ public_programs += exe
  
  exe = executable('udevadm',
                   udevadm_sources,
--                 c_args : ['-DLOG_REALM=LOG_REALM_UDEV'],
+-                 c_args : '-DLOG_REALM=LOG_REALM_UDEV',
 +                 c_args : ['-DLOG_REALM=LOG_REALM_UDEV', '-O3'],
                   include_directories : includes,
                   link_with : [libudev_core,
                                libsystemd_network,
 -- 
-2.19.0
+2.20.1
 
diff --git a/0033-Don-t-wait-for-utmp-at-shutdown.patch b/0033-Don-t-wait-for-utmp-at-shutdown.patch
index 7fb5529..1faff16 100644
--- a/0033-Don-t-wait-for-utmp-at-shutdown.patch
+++ b/0033-Don-t-wait-for-utmp-at-shutdown.patch
@@ -1,14 +1,14 @@
-From 64f6cebd22dece563fd0a020f1bf5de22e51f762 Mon Sep 17 00:00:00 2001
+From a9b114bb7798308e3eb841d33950b3c0cc2d6a5e Mon Sep 17 00:00:00 2001
 From: Auke Kok <auke-jan.h.kok@intel.com>
 Date: Fri, 14 Jul 2017 11:37:58 -0700
-Subject: [PATCH] Don't wait for utmp at shutdown.
+Subject: [PATCH 33/42] Don't wait for utmp at shutdown.
 
 ---
  units/systemd-update-utmp.service.in | 2 +-
  1 file changed, 1 insertion(+), 1 deletion(-)
 
 diff --git a/units/systemd-update-utmp.service.in b/units/systemd-update-utmp.service.in
-index b9a668fae..ed9eb0417 100644
+index b9a668faeb..ed9eb04178 100644
 --- a/units/systemd-update-utmp.service.in
 +++ b/units/systemd-update-utmp.service.in
 @@ -14,7 +14,7 @@ DefaultDependencies=no
@@ -21,5 +21,5 @@ index b9a668fae..ed9eb0417 100644
  [Service]
  Type=oneshot
 -- 
-2.19.0
+2.20.1
 
diff --git a/0034-Don-t-do-transient-hostnames-we-set-ours-already.patch b/0034-Don-t-do-transient-hostnames-we-set-ours-already.patch
index 6813062..037ef40 100644
--- a/0034-Don-t-do-transient-hostnames-we-set-ours-already.patch
+++ b/0034-Don-t-do-transient-hostnames-we-set-ours-already.patch
@@ -1,17 +1,17 @@
-From 0681e5787587d806a35a11f2e307e42f6d40d545 Mon Sep 17 00:00:00 2001
+From b8ff5da76088b11c94dbb053f56d96653caff170 Mon Sep 17 00:00:00 2001
 From: Arjan van de Ven <arjan@linux.intel.com>
 Date: Fri, 11 May 2018 11:08:34 -0700
-Subject: [PATCH] Don't do transient hostnames; we set ours already
+Subject: [PATCH 34/42] Don't do transient hostnames; we set ours already
 
 ---
  src/network/networkd-manager.c | 2 ++
  1 file changed, 2 insertions(+)
 
 diff --git a/src/network/networkd-manager.c b/src/network/networkd-manager.c
-index 1c4866077..26b9192d3 100644
+index c8d369e2a0..df497d58f6 100644
 --- a/src/network/networkd-manager.c
 +++ b/src/network/networkd-manager.c
-@@ -1749,6 +1749,8 @@ static int set_hostname_handler(sd_bus_message *m, void *userdata, sd_bus_error
+@@ -1727,6 +1727,8 @@ static int set_hostname_handler(sd_bus_message *m, void *userdata, sd_bus_error
  }
  
  int manager_set_hostname(Manager *m, const char *hostname) {
@@ -21,5 +21,5 @@ index 1c4866077..26b9192d3 100644
  
          log_debug("Setting transient hostname: '%s'", strna(hostname));
 -- 
-2.19.0
+2.20.1
 
diff --git a/0035-don-t-use-libm-just-for-integer-exp10.patch b/0035-don-t-use-libm-just-for-integer-exp10.patch
index 10475de..26fb486 100644
--- a/0035-don-t-use-libm-just-for-integer-exp10.patch
+++ b/0035-don-t-use-libm-just-for-integer-exp10.patch
@@ -1,17 +1,17 @@
-From 8c9cca730aa96c64a3b3ba6e0d0b44c3ecadab12 Mon Sep 17 00:00:00 2001
+From 8c096bb4d0892128fcb19d2571b1a6b7db1a7f88 Mon Sep 17 00:00:00 2001
 From: Arjan van de Ven <arjan@linux.intel.com>
 Date: Wed, 13 Jun 2018 11:49:55 -0700
-Subject: [PATCH] don't use libm just for integer exp10()
+Subject: [PATCH 35/42] don't use libm just for integer exp10()
 
 ---
  src/resolve/resolved-dns-rr.c | 8 +++++---
  1 file changed, 5 insertions(+), 3 deletions(-)
 
 diff --git a/src/resolve/resolved-dns-rr.c b/src/resolve/resolved-dns-rr.c
-index cfd0ed214..bee8da092 100644
+index a1dffb08a3..ad2bc83945 100644
 --- a/src/resolve/resolved-dns-rr.c
 +++ b/src/resolve/resolved-dns-rr.c
-@@ -716,6 +716,8 @@ int dns_resource_record_equal(const DnsResourceRecord *a, const DnsResourceRecor
+@@ -692,6 +692,8 @@ int dns_resource_record_equal(const DnsResourceRecord *a, const DnsResourceRecor
          }
  }
  
@@ -20,7 +20,7 @@ index cfd0ed214..bee8da092 100644
  static char* format_location(uint32_t latitude, uint32_t longitude, uint32_t altitude,
                               uint8_t size, uint8_t horiz_pre, uint8_t vert_pre) {
          char *s;
-@@ -725,9 +727,9 @@ static char* format_location(uint32_t latitude, uint32_t longitude, uint32_t alt
+@@ -701,9 +703,9 @@ static char* format_location(uint32_t latitude, uint32_t longitude, uint32_t alt
          int lat = latitude >= 1U<<31 ? (int) (latitude - (1U<<31)) : (int) ((1U<<31) - latitude);
          int lon = longitude >= 1U<<31 ? (int) (longitude - (1U<<31)) : (int) ((1U<<31) - longitude);
          double alt = altitude >= 10000000u ? altitude - 10000000u : -(double)(10000000u - altitude);
@@ -34,5 +34,5 @@ index cfd0ed214..bee8da092 100644
          if (asprintf(&s, "%d %d %.3f %c %d %d %.3f %c %.2fm %.2fm %.2fm %.2fm",
                       (lat / 60000 / 60),
 -- 
-2.19.0
+2.20.1
 
diff --git a/0036-Notify-systemd-earlier-that-resolved-is-ready.patch b/0036-Notify-systemd-earlier-that-resolved-is-ready.patch
index 4dd4e62..07edda4 100644
--- a/0036-Notify-systemd-earlier-that-resolved-is-ready.patch
+++ b/0036-Notify-systemd-earlier-that-resolved-is-ready.patch
@@ -1,38 +1,34 @@
-From b739282f4412cf5b82f3d46cc5e1cb8f0fab046d Mon Sep 17 00:00:00 2001
+From 523ad0556f90aab5d87d54d67fd1602c4d1b31b7 Mon Sep 17 00:00:00 2001
 From: Arjan van de Ven <arjan@linux.intel.com>
 Date: Wed, 13 Jun 2018 13:42:12 -0700
-Subject: [PATCH] Notify systemd earlier that resolved is ready.
+Subject: [PATCH 36/42] Notify systemd earlier that resolved is ready.
 
 ---
- src/resolve/resolved.c | 8 ++++----
- 1 file changed, 4 insertions(+), 4 deletions(-)
+ src/resolve/resolved.c | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
 
 diff --git a/src/resolve/resolved.c b/src/resolve/resolved.c
-index c01e53e9d..f58f48117 100644
+index 0845b2c1ae..dd504c17db 100644
 --- a/src/resolve/resolved.c
 +++ b/src/resolve/resolved.c
-@@ -65,6 +65,10 @@ int main(int argc, char *argv[]) {
+@@ -57,6 +57,8 @@ static int run(int argc, char *argv[]) {
  
          assert_se(sigprocmask_many(SIG_BLOCK, NULL, SIGTERM, SIGINT, SIGUSR1, SIGUSR2, SIGRTMIN+1, -1) >= 0);
  
-+        sd_notify(false,
-+                  "READY=1\n"
-+                  "STATUS=Processing requests...");
++        notify_stop = notify_start(NOTIFY_READY, NOTIFY_STOPPING);
 +
          r = manager_new(&m);
-         if (r < 0) {
-                 log_error_errno(r, "Could not create manager: %m");
-@@ -87,10 +91,6 @@ int main(int argc, char *argv[]) {
-                 goto finish;
-         }
+         if (r < 0)
+                 return log_error_errno(r, "Could not create manager: %m");
+@@ -75,8 +77,6 @@ static int run(int argc, char *argv[]) {
+         if (r < 0)
+                 return log_error_errno(r, "Failed to drop remaining caps: %m");
  
--        sd_notify(false,
--                  "READY=1\n"
--                  "STATUS=Processing requests...");
+-        notify_stop = notify_start(NOTIFY_READY, NOTIFY_STOPPING);
 -
          r = sd_event_loop(m->event);
-         if (r < 0) {
-                 log_error_errno(r, "Event loop failed: %m");
+         if (r < 0)
+                 return log_error_errno(r, "Event loop failed: %m");
 -- 
-2.19.0
+2.20.1
 
diff --git a/0037-Do-not-crash-if-udev-hasn-t-initialized-one-link-yet.patch b/0037-Do-not-crash-if-udev-hasn-t-initialized-one-link-yet.patch
index 35037ad..e3ff5c6 100644
--- a/0037-Do-not-crash-if-udev-hasn-t-initialized-one-link-yet.patch
+++ b/0037-Do-not-crash-if-udev-hasn-t-initialized-one-link-yet.patch
@@ -1,17 +1,17 @@
-From 79729ca2dfb5ca7c5fa7f440a3643670326c2d0e Mon Sep 17 00:00:00 2001
+From 55313166811c7d7fa743d0a41039728fd257afe4 Mon Sep 17 00:00:00 2001
 From: Auke Kok <auke-jan.h.kok@intel.com>
 Date: Thu, 14 Jun 2018 11:20:27 -0700
-Subject: [PATCH] Do not crash if udev hasn't initialized one link yet.
+Subject: [PATCH 37/42] Do not crash if udev hasn't initialized one link yet.
 
 ---
  src/network/wait-online/manager.c | 1 +
  1 file changed, 1 insertion(+)
 
 diff --git a/src/network/wait-online/manager.c b/src/network/wait-online/manager.c
-index 824f292c3..74437d2b4 100644
+index 776b886a73..cbc26a8743 100644
 --- a/src/network/wait-online/manager.c
 +++ b/src/network/wait-online/manager.c
-@@ -57,6 +57,7 @@ bool manager_all_configured(Manager *m) {
+@@ -58,6 +58,7 @@ bool manager_all_configured(Manager *m) {
                  if (!l->state) {
                          log_debug("link %s has not yet been processed by udev",
                                    l->ifname);
@@ -20,5 +20,5 @@ index 824f292c3..74437d2b4 100644
  
                  if (STR_IN_SET(l->state, "configuring", "pending")) {
 -- 
-2.19.0
+2.20.1
 
diff --git a/0038-Hand-off-coredumps-to-a-wrapper-that-will-optionally.patch b/0038-Hand-off-coredumps-to-a-wrapper-that-will-optionally.patch
index defa3b2..61c2c06 100644
--- a/0038-Hand-off-coredumps-to-a-wrapper-that-will-optionally.patch
+++ b/0038-Hand-off-coredumps-to-a-wrapper-that-will-optionally.patch
@@ -1,8 +1,8 @@
-From 28104357a5b6262c569cc11ca00afcbfe618070a Mon Sep 17 00:00:00 2001
+From ebe0f2e999ffb6c8c495243f8d7a985889937230 Mon Sep 17 00:00:00 2001
 From: William Douglas <william.douglas@intel.com>
 Date: Fri, 27 Jul 2018 17:50:48 +0000
-Subject: [PATCH] Hand off coredumps to a wrapper that will optionally use
- telemetry
+Subject: [PATCH 38/42] Hand off coredumps to a wrapper that will optionally
+ use telemetry
 
 Send core files to a wrapper script that will try and send the coredumps to the
 telemetry core handler if it exists and also send the coredumps to systemd's
@@ -15,7 +15,7 @@ core file handler.
 
 diff --git a/src/coredump/coredump-wrapper b/src/coredump/coredump-wrapper
 new file mode 100755
-index 000000000..1a74a5d6e
+index 0000000000..1a74a5d6ed
 --- /dev/null
 +++ b/src/coredump/coredump-wrapper
 @@ -0,0 +1,17 @@
@@ -37,7 +37,7 @@ index 000000000..1a74a5d6e
 +        /usr/lib/systemd/systemd-coredump "$@"
 +fi
 diff --git a/sysctl.d/50-coredump.conf.in b/sysctl.d/50-coredump.conf.in
-index ccd5c2cc5..2df3f4089 100644
+index ccd5c2cc56..2df3f40891 100644
 --- a/sysctl.d/50-coredump.conf.in
 +++ b/sysctl.d/50-coredump.conf.in
 @@ -9,4 +9,4 @@
@@ -47,5 +47,5 @@ index ccd5c2cc5..2df3f4089 100644
 -kernel.core_pattern=|@rootlibexecdir@/systemd-coredump %P %u %g %s %t %c %h %e
 +kernel.core_pattern=|@rootlibexecdir@/coredump-wrapper %E %P %u %g %s %t %c %h %e
 -- 
-2.19.0
+2.20.1
 
diff --git a/0042-add-stateless-for-locale-files-locale.conf-00-keyboa.patch b/0039-add-stateless-for-locale-files-locale.conf-00-keyboa.patch
similarity index 73%
rename from 0042-add-stateless-for-locale-files-locale.conf-00-keyboa.patch
rename to 0039-add-stateless-for-locale-files-locale.conf-00-keyboa.patch
index 92bae91..84dfb9f 100644
--- a/0042-add-stateless-for-locale-files-locale.conf-00-keyboa.patch
+++ b/0039-add-stateless-for-locale-files-locale.conf-00-keyboa.patch
@@ -1,30 +1,31 @@
-From 8321572db8d805e28462d9d654b4568077bd1501 Mon Sep 17 00:00:00 2001
+From 3b13d8fd80141833d75ba4a5a4bf550ef8bc0096 Mon Sep 17 00:00:00 2001
 From: Josue David Hernandez Gutierrez <josue.d.hernandez.gutierrez@intel.com>
 Date: Fri, 26 Oct 2018 16:46:37 -0500
-Subject: [PATCH] add stateless for locale files locale.conf 00-keyboard.conf
+Subject: [PATCH 39/42] add stateless for locale files locale.conf
+ 00-keyboard.conf
 
 systemd must take this files from /etc and in case there are not files
 there /usr/share/defaults/etc
 
 Signed-off-by: Josue David Hernandez Gutierrez <josue.d.hernandez.gutierrez@intel.com>
 ---
- src/locale/keymap-util.c | 44 ++++++++++++++++++++++++++++++----------
- 1 file changed, 33 insertions(+), 11 deletions(-)
+ src/locale/keymap-util.c | 42 ++++++++++++++++++++++++++++++----------
+ 1 file changed, 32 insertions(+), 10 deletions(-)
 
 diff --git a/src/locale/keymap-util.c b/src/locale/keymap-util.c
-index 598b931..a9a6465 100644
+index 6b6b32a591..11dfb09c92 100644
 --- a/src/locale/keymap-util.c
 +++ b/src/locale/keymap-util.c
-@@ -85,6 +85,7 @@ void locale_simplify(char *locale[_VARIABLE_LC_MAX]) {
+@@ -95,6 +95,7 @@ void locale_simplify(char *locale[_VARIABLE_LC_MAX]) {
  int locale_read_data(Context *c, sd_bus_message *m) {
          struct stat st;
          int r;
 +        bool etc_conf = false;
  
          /* Do not try to re-read the file within single bus operation. */
-         if (m && m == c->locale_cache)
-@@ -94,6 +95,11 @@ int locale_read_data(Context *c, sd_bus_message *m) {
-         c->locale_cache = m;
+         if (m) {
+@@ -106,6 +107,11 @@ int locale_read_data(Context *c, sd_bus_message *m) {
+         }
  
          r = stat("/etc/locale.conf", &st);
 +        if (r >= 0)
@@ -35,28 +36,28 @@ index 598b931..a9a6465 100644
          if (r < 0 && errno != ENOENT)
                  return -errno;
  
-@@ -108,7 +114,9 @@ int locale_read_data(Context *c, sd_bus_message *m) {
+@@ -120,7 +126,9 @@ int locale_read_data(Context *c, sd_bus_message *m) {
                  c->locale_mtime = t;
                  context_free_locale(c);
  
--                r = parse_env_file(NULL, "/etc/locale.conf", NEWLINE,
+-                r = parse_env_file(NULL, "/etc/locale.conf",
 +                r = parse_env_file(NULL,
 +                                   (etc_conf)?"/etc/locale.conf":
 +                                              "/usr/share/defaults/etc/locale.conf", NEWLINE,
                                     "LANG",              &c->locale[VARIABLE_LANG],
                                     "LANGUAGE",          &c->locale[VARIABLE_LANGUAGE],
                                     "LC_CTYPE",          &c->locale[VARIABLE_LC_CTYPE],
-@@ -153,6 +161,7 @@ int vconsole_read_data(Context *c, sd_bus_message *m) {
+@@ -164,6 +172,7 @@ int vconsole_read_data(Context *c, sd_bus_message *m) {
          struct stat st;
          usec_t t;
          int r;
 +        bool etc_conf = false;
  
          /* Do not try to re-read the file within single bus operation. */
-         if (m && m == c->vc_cache)
-@@ -161,14 +170,19 @@ int vconsole_read_data(Context *c, sd_bus_message *m) {
-         /* To suppress multiple call of stat(), store the message to cache here. */
-         c->vc_cache = m;
+         if (m) {
+@@ -174,14 +183,19 @@ int vconsole_read_data(Context *c, sd_bus_message *m) {
+                 c->vc_cache = sd_bus_message_ref(m);
+         }
  
 -        if (stat("/etc/vconsole.conf", &st) < 0) {
 -                if (errno != ENOENT)
@@ -77,39 +78,38 @@ index 598b931..a9a6465 100644
  
          /* If mtime is not changed, then we do not need to re-read */
          t = timespec_load(&st.st_mtim);
-@@ -178,7 +192,9 @@ int vconsole_read_data(Context *c, sd_bus_message *m) {
+@@ -191,7 +205,9 @@ int vconsole_read_data(Context *c, sd_bus_message *m) {
          c->vc_mtime = t;
          context_free_vconsole(c);
  
--        r = parse_env_file(NULL, "/etc/vconsole.conf", NEWLINE,
+-        r = parse_env_file(NULL, "/etc/vconsole.conf",
 +        r = parse_env_file(NULL, (etc_conf)?
 +                           "/etc/vconsole.conf":
 +                               "/usr/share/defaults/etc/vconsole.conf", NEWLINE,
                             "KEYMAP",        &c->vc_keymap,
-                            "KEYMAP_TOGGLE", &c->vc_keymap_toggle,
-                            NULL);
-@@ -195,6 +211,7 @@ int x11_read_data(Context *c, sd_bus_message *m) {
+                            "KEYMAP_TOGGLE", &c->vc_keymap_toggle);
+         if (r < 0)
+@@ -206,6 +222,7 @@ int x11_read_data(Context *c, sd_bus_message *m) {
          struct stat st;
          usec_t t;
          int r;
 +        bool etc_conf = false;
  
          /* Do not try to re-read the file within single bus operation. */
-         if (m && m == c->x11_cache)
-@@ -203,14 +220,18 @@ int x11_read_data(Context *c, sd_bus_message *m) {
-         /* To suppress multiple call of stat(), store the message to cache here. */
-         c->x11_cache = m;
+         if (m) {
+@@ -216,14 +233,18 @@ int x11_read_data(Context *c, sd_bus_message *m) {
+                 c->x11_cache = sd_bus_message_ref(m);
+         }
  
 -        if (stat("/etc/X11/xorg.conf.d/00-keyboard.conf", &st) < 0) {
 -                if (errno != ENOENT)
 -                        return -errno;
--
 +        r = stat("/etc/X11/xorg.conf.d/00-keyboard.conf", &st);
 +        if (r >= 0) {
 +                etc_conf = true;
 +        } else if (errno == ENOENT)
 +                r = stat("/usr/share/defaults/etc/X11/xorg.conf.d/00-keyboard.conf", &st);
-+
+ 
 +        if (r < 0 && errno == ENOENT) {
                  c->x11_mtime = USEC_INFINITY;
                  context_free_x11(c);
@@ -120,7 +120,7 @@ index 598b931..a9a6465 100644
  
          /* If mtime is not changed, then we do not need to re-read */
          t = timespec_load(&st.st_mtim);
-@@ -220,7 +241,8 @@ int x11_read_data(Context *c, sd_bus_message *m) {
+@@ -233,7 +254,8 @@ int x11_read_data(Context *c, sd_bus_message *m) {
          c->x11_mtime = t;
          context_free_x11(c);
  
@@ -131,5 +131,5 @@ index 598b931..a9a6465 100644
                  return -errno;
  
 -- 
-2.19.1
+2.20.1
 
diff --git a/0039-build-sys-Detect-whether-struct-statx-is-defined-in-.patch b/0039-build-sys-Detect-whether-struct-statx-is-defined-in-.patch
deleted file mode 100644
index d4362f8..0000000
--- a/0039-build-sys-Detect-whether-struct-statx-is-defined-in-.patch
+++ /dev/null
@@ -1,108 +0,0 @@
-From c0e14283b5aa39d63790596a35353fc0772eb16f Mon Sep 17 00:00:00 2001
-From: Filipe Brandenburger <filbranden@google.com>
-Date: Sun, 15 Jul 2018 22:43:35 -0700
-Subject: [PATCH] build-sys: Detect whether struct statx is defined in
- sys/stat.h
-MIME-Version: 1.0
-Content-Type: text/plain; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-
-Starting with glibc 2.27.9000-36.fc29, include file sys/stat.h will have a
-definition for struct statx, in which case include file linux/stat.h should be
-avoided, in order to prevent a duplicate definition.
-
-    In file included from ../src/basic/missing.h:18,
-		     from ../src/basic/util.h:28,
-		     from ../src/basic/hashmap.h:10,
-		     from ../src/shared/bus-util.h:12,
-		     from ../src/libsystemd/sd-bus/bus-creds.c:11:
-    /usr/include/linux/stat.h:99:8: error: redefinition of ‘struct statx’
-     struct statx {
-	    ^~~~~
-    In file included from /usr/include/sys/stat.h:446,
-		     from ../src/basic/util.h:19,
-		     from ../src/basic/hashmap.h:10,
-		     from ../src/shared/bus-util.h:12,
-		     from ../src/libsystemd/sd-bus/bus-creds.c:11:
-    /usr/include/bits/statx.h:36:8: note: originally defined here
-     struct statx
-	    ^~~~~
-
-Extend our meson.build to look for struct statx when only sys/stat.h is
-included and, in that case, do not include linux/stat.h anymore.
-
-Tested that systemd builds correctly when using a glibc version that includes a
-definition for struct statx.
-
-glibc Fedora RPM update:
-https://src.fedoraproject.org/rpms/glibc/c/28cb5d31fc1e5887912283c889689c47076278ae
-
-glibc upstream commit:
-https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=fd70af45528d59a00eb3190ef6706cb299488fcd
----
- meson.build            | 5 +++++
- src/basic/missing.h    | 5 ++++-
- src/basic/xattr-util.c | 1 -
- 3 files changed, 9 insertions(+), 2 deletions(-)
-
-diff --git a/meson.build b/meson.build
-index 0d13e7d64..6d37d567f 100644
---- a/meson.build
-+++ b/meson.build
-@@ -424,6 +424,7 @@ decl_headers = '''
- #include <sys/stat.h>
- '''
- # FIXME: key_serial_t is only defined in keyutils.h, this is bound to fail
-+# FIXME: these should use -D_GNU_SOURCE, since that is defined at build time
- 
- foreach decl : ['char16_t',
-                 'char32_t',
-@@ -438,6 +439,10 @@ foreach decl : ['char16_t',
-         conf.set10('HAVE_' + decl.underscorify().to_upper(), have)
- endforeach
- 
-+conf.set10('HAVE_STRUCT_STATX_IN_SYS_STAT_H', cc.sizeof('struct statx', prefix : '''
-+#include <sys/stat.h>
-+''', args : '-D_GNU_SOURCE') > 0)
-+
- foreach decl : [['IFLA_INET6_ADDR_GEN_MODE',         'linux/if_link.h'],
-                 ['IN6_ADDR_GEN_MODE_STABLE_PRIVACY', 'linux/if_link.h'],
-                 ['IFLA_VRF_TABLE',                   'linux/if_link.h'],
-diff --git a/src/basic/missing.h b/src/basic/missing.h
-index 16867bdd9..fe17d4e95 100644
---- a/src/basic/missing.h
-+++ b/src/basic/missing.h
-@@ -15,7 +15,6 @@
- #include <linux/neighbour.h>
- #include <linux/oom.h>
- #include <linux/rtnetlink.h>
--#include <linux/stat.h>
- #include <net/ethernet.h>
- #include <stdlib.h>
- #include <sys/resource.h>
-@@ -26,6 +25,10 @@
- #include <uchar.h>
- #include <unistd.h>
- 
-+#if !HAVE_STRUCT_STATX_IN_SYS_STAT_H
-+#include <linux/stat.h>
-+#endif
-+
- #if HAVE_AUDIT
- #include <libaudit.h>
- #endif
-diff --git a/src/basic/xattr-util.c b/src/basic/xattr-util.c
-index c5c55ea84..0ee097983 100644
---- a/src/basic/xattr-util.c
-+++ b/src/basic/xattr-util.c
-@@ -2,7 +2,6 @@
- 
- #include <errno.h>
- #include <fcntl.h>
--#include <linux/stat.h>
- #include <stdint.h>
- #include <stdlib.h>
- #include <string.h>
--- 
-2.19.0
-
diff --git a/0040-Do-not-enable-audit-by-default-in-the-journal.patch b/0040-Do-not-enable-audit-by-default-in-the-journal.patch
new file mode 100644
index 0000000..10ecd7a
--- /dev/null
+++ b/0040-Do-not-enable-audit-by-default-in-the-journal.patch
@@ -0,0 +1,29 @@
+From 5b0649ca25bb9022e8898a6581599c80bbc96e74 Mon Sep 17 00:00:00 2001
+From: Arjan van de Ven <arjan@linux.intel.com>
+Date: Mon, 14 Jan 2019 09:43:59 -0800
+Subject: [PATCH 40/42] Do not enable audit by default in the journal.
+
+---
+ src/journal/journald-audit.c | 3 ++-
+ 1 file changed, 2 insertions(+), 1 deletion(-)
+
+diff --git a/src/journal/journald-audit.c b/src/journal/journald-audit.c
+index accbad4180..193dc64e47 100644
+--- a/src/journal/journald-audit.c
++++ b/src/journal/journald-audit.c
+@@ -536,10 +536,11 @@ int server_open_audit(Server *s) {
+         if (r < 0)
+                 return log_error_errno(r, "Failed to add audit fd to event loop: %m");
+ 
++#if 0
+         /* We are listening now, try to enable audit */
+         r = enable_audit(s->audit_fd, true);
+         if (r < 0)
+                 log_warning_errno(r, "Failed to issue audit enable call: %m");
+-
++#endif
+         return 0;
+ }
+-- 
+2.20.1
+
diff --git a/0040-meson-rename-Ddebug-to-Ddebug-extra.patch b/0040-meson-rename-Ddebug-to-Ddebug-extra.patch
deleted file mode 100644
index 0edb32a..0000000
--- a/0040-meson-rename-Ddebug-to-Ddebug-extra.patch
+++ /dev/null
@@ -1,43 +0,0 @@
-From 1fc8438fe514646dc3f62d6ff8602656b57e77c6 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Zbigniew=20J=C4=99drzejewski-Szmek?= <zbyszek@in.waw.pl>
-Date: Sun, 19 Aug 2018 19:11:30 +0200
-Subject: [PATCH] meson: rename -Ddebug to -Ddebug-extra
-
-Meson added -Doptimization and -Ddebug options, which obviously causes
-a conflict with our -Ddebug options. Let's rename it.
-
-Fixes #9883.
----
- meson.build       | 2 +-
- meson_options.txt | 2 +-
- 2 files changed, 2 insertions(+), 2 deletions(-)
-
-diff --git a/meson.build b/meson.build
-index 6d37d567f..953d080aa 100644
---- a/meson.build
-+++ b/meson.build
-@@ -768,7 +768,7 @@ substs.set('DEBUGTTY', get_option('debug-tty'))
- 
- enable_debug_hashmap = false
- enable_debug_mmap_cache = false
--foreach name : get_option('debug')
-+foreach name : get_option('debug-extra')
-         if name == 'hashmap'
-                 enable_debug_hashmap = true
-         elif name == 'mmap-cache'
-diff --git a/meson_options.txt b/meson_options.txt
-index 16c1f2b2f..dc7951b99 100644
---- a/meson_options.txt
-+++ b/meson_options.txt
-@@ -46,7 +46,7 @@ option('debug-shell', type : 'string', value : '/bin/sh',
-        description : 'path to debug shell binary')
- option('debug-tty', type : 'string', value : '/dev/tty9',
-        description : 'specify the tty device for debug shell')
--option('debug', type : 'array', choices : ['hashmap', 'mmap-cache'], value : [],
-+option('debug-extra', type : 'array', choices : ['hashmap', 'mmap-cache'], value : [],
-        description : 'enable extra debugging')
- option('memory-accounting-default', type : 'boolean',
-        description : 'enable MemoryAccounting= by default')
--- 
-2.19.0
-
diff --git a/0041-Disable-XZ-support-in-the-journal.patch b/0041-Disable-XZ-support-in-the-journal.patch
new file mode 100644
index 0000000..8e744f2
--- /dev/null
+++ b/0041-Disable-XZ-support-in-the-journal.patch
@@ -0,0 +1,25 @@
+From 4da1898a08d6c1bbcf14359634b5029b05e8e2ad Mon Sep 17 00:00:00 2001
+From: Arjan van de Ven <arjan@linux.intel.com>
+Date: Mon, 14 Jan 2019 09:46:32 -0800
+Subject: [PATCH 41/42] Disable XZ support in the journal.
+
+---
+ src/journal/compress.c | 2 ++
+ 1 file changed, 2 insertions(+)
+
+diff --git a/src/journal/compress.c b/src/journal/compress.c
+index e95ce2bcaa..320fb030f9 100644
+--- a/src/journal/compress.c
++++ b/src/journal/compress.c
+@@ -26,6 +26,8 @@
+ #include "string-util.h"
+ #include "util.h"
+ 
++#undef HAVE_XZ
++#define HAVE_XZ 0
+ #if HAVE_LZ4
+ DEFINE_TRIVIAL_CLEANUP_FUNC(LZ4F_compressionContext_t, LZ4F_freeCompressionContext);
+ DEFINE_TRIVIAL_CLEANUP_FUNC(LZ4F_decompressionContext_t, LZ4F_freeDecompressionContext);
+-- 
+2.20.1
+
diff --git a/0041-Make-bzip2-an-optional-dependency-for-systemd-import.patch b/0041-Make-bzip2-an-optional-dependency-for-systemd-import.patch
deleted file mode 100644
index badad8e..0000000
--- a/0041-Make-bzip2-an-optional-dependency-for-systemd-import.patch
+++ /dev/null
@@ -1,158 +0,0 @@
-From 6604e48a9a758b26a41b81285feb8174587bda06 Mon Sep 17 00:00:00 2001
-From: Thiago Macieira <thiago.macieira@intel.com>
-Date: Mon, 24 Sep 2018 13:03:02 -0700
-Subject: [PATCH] Make bzip2 an optional dependency for systemd-importd
-
-Signed-off-by: Thiago Macieira <thiago.macieira@intel.com>
----
- meson.build                  |  1 -
- src/import/import-compress.c | 14 ++++++++++++++
- src/import/import-compress.h |  4 ++++
- 3 files changed, 18 insertions(+), 1 deletion(-)
-
-diff --git a/meson.build b/meson.build
-index 953d080aa..f0664249b 100644
---- a/meson.build
-+++ b/meson.build
-@@ -1166,7 +1166,6 @@ want_importd = get_option('importd')
- if want_importd != 'false'
-         have = (conf.get('HAVE_LIBCURL') == 1 and
-                 conf.get('HAVE_ZLIB') == 1 and
--                conf.get('HAVE_BZIP2') == 1 and
-                 conf.get('HAVE_XZ') == 1 and
-                 conf.get('HAVE_GCRYPT') == 1)
-         if want_importd == 'true' and not have
-diff --git a/src/import/import-compress.c b/src/import/import-compress.c
-index 1cf29e26f..3fbd06779 100644
---- a/src/import/import-compress.c
-+++ b/src/import/import-compress.c
-@@ -14,11 +14,13 @@ void import_compress_free(ImportCompress *c) {
-                         deflateEnd(&c->gzip);
-                 else
-                         inflateEnd(&c->gzip);
-+#if HAVE_BZIP2
-         } else if (c->type == IMPORT_COMPRESS_BZIP2) {
-                 if (c->encoding)
-                         BZ2_bzCompressEnd(&c->bzip2);
-                 else
-                         BZ2_bzDecompressEnd(&c->bzip2);
-+#endif
-         }
- 
-         c->type = IMPORT_COMPRESS_UNKNOWN;
-@@ -65,12 +67,14 @@ int import_uncompress_detect(ImportCompress *c, const void *data, size_t size) {
- 
-                 c->type = IMPORT_COMPRESS_GZIP;
- 
-+#if HAVE_BZIP2
-         } else if (memcmp(data, bzip2_signature, sizeof(bzip2_signature)) == 0) {
-                 r = BZ2_bzDecompressInit(&c->bzip2, 0, 0);
-                 if (r != BZ_OK)
-                         return -EIO;
- 
-                 c->type = IMPORT_COMPRESS_BZIP2;
-+#endif
-         } else
-                 c->type = IMPORT_COMPRESS_UNCOMPRESSED;
- 
-@@ -149,6 +153,7 @@ int import_uncompress(ImportCompress *c, const void *data, size_t size, ImportCo
- 
-                 break;
- 
-+#if HAVE_BZIP2
-         case IMPORT_COMPRESS_BZIP2:
-                 c->bzip2.next_in = (void*) data;
-                 c->bzip2.avail_in = size;
-@@ -169,6 +174,7 @@ int import_uncompress(ImportCompress *c, const void *data, size_t size, ImportCo
-                 }
- 
-                 break;
-+#endif
- 
-         default:
-                 assert_not_reached("Unknown compression");
-@@ -203,6 +209,7 @@ int import_compress_init(ImportCompress *c, ImportCompressType t) {
-                 c->type = IMPORT_COMPRESS_GZIP;
-                 break;
- 
-+#if HAVE_BZIP2
-         case IMPORT_COMPRESS_BZIP2:
-                 r = BZ2_bzCompressInit(&c->bzip2, 9, 0, 0);
-                 if (r != BZ_OK)
-@@ -210,6 +217,7 @@ int import_compress_init(ImportCompress *c, ImportCompressType t) {
- 
-                 c->type = IMPORT_COMPRESS_BZIP2;
-                 break;
-+#endif
- 
-         case IMPORT_COMPRESS_UNCOMPRESSED:
-                 c->type = IMPORT_COMPRESS_UNCOMPRESSED;
-@@ -307,6 +315,7 @@ int import_compress(ImportCompress *c, const void *data, size_t size, void **buf
- 
-                 break;
- 
-+#if HAVE_BZIP2
-         case IMPORT_COMPRESS_BZIP2:
- 
-                 c->bzip2.next_in = (void*) data;
-@@ -328,6 +337,7 @@ int import_compress(ImportCompress *c, const void *data, size_t size, void **buf
-                 }
- 
-                 break;
-+#endif
- 
-         case IMPORT_COMPRESS_UNCOMPRESSED:
- 
-@@ -411,6 +421,7 @@ int import_compress_finish(ImportCompress *c, void **buffer, size_t *buffer_size
- 
-                 break;
- 
-+#if HAVE_BZIP2
-         case IMPORT_COMPRESS_BZIP2:
-                 c->bzip2.avail_in = 0;
- 
-@@ -430,6 +441,7 @@ int import_compress_finish(ImportCompress *c, void **buffer, size_t *buffer_size
-                 } while (r != BZ_STREAM_END);
- 
-                 break;
-+#endif
- 
-         case IMPORT_COMPRESS_UNCOMPRESSED:
-                 break;
-@@ -446,7 +458,9 @@ static const char* const import_compress_type_table[_IMPORT_COMPRESS_TYPE_MAX] =
-         [IMPORT_COMPRESS_UNCOMPRESSED] = "uncompressed",
-         [IMPORT_COMPRESS_XZ] = "xz",
-         [IMPORT_COMPRESS_GZIP] = "gzip",
-+#if HAVE_BZIP2
-         [IMPORT_COMPRESS_BZIP2] = "bzip2",
-+#endif
- };
- 
- DEFINE_STRING_TABLE_LOOKUP(import_compress_type, ImportCompressType);
-diff --git a/src/import/import-compress.h b/src/import/import-compress.h
-index 6fb87ccdf..859bd0e1a 100644
---- a/src/import/import-compress.h
-+++ b/src/import/import-compress.h
-@@ -1,7 +1,9 @@
- /* SPDX-License-Identifier: LGPL-2.1+ */
- #pragma once
- 
-+#if HAVE_BZIP2
- #include <bzlib.h>
-+#endif
- #include <lzma.h>
- #include <sys/types.h>
- #include <zlib.h>
-@@ -24,7 +26,9 @@ typedef struct ImportCompress {
-         union {
-                 lzma_stream xz;
-                 z_stream gzip;
-+#if HAVE_BZIP2
-                 bz_stream bzip2;
-+#endif
-         };
- } ImportCompress;
- 
--- 
-2.19.0
-
diff --git a/0042-Localize-1-symbol.patch b/0042-Localize-1-symbol.patch
new file mode 100644
index 0000000..2896ee4
--- /dev/null
+++ b/0042-Localize-1-symbol.patch
@@ -0,0 +1,37 @@
+From b1d08242251c12a0f3100709a0166750c4000ae7 Mon Sep 17 00:00:00 2001
+From: Arjan van de Ven <arjan@linux.intel.com>
+Date: Mon, 14 Jan 2019 09:50:38 -0800
+Subject: [PATCH 42/42] Localize 1 symbol.
+
+Otherwise we pull in an entire library.
+---
+ src/libsystemd/sd-daemon/sd-daemon.c | 7 ++++++-
+ 1 file changed, 6 insertions(+), 1 deletion(-)
+
+diff --git a/src/libsystemd/sd-daemon/sd-daemon.c b/src/libsystemd/sd-daemon/sd-daemon.c
+index 9e8f0a73f5..1c3f47e31d 100644
+--- a/src/libsystemd/sd-daemon/sd-daemon.c
++++ b/src/libsystemd/sd-daemon/sd-daemon.c
+@@ -402,13 +402,18 @@ _public_ int sd_is_socket_unix(int fd, int type, int listening, const char *path
+         return 1;
+ }
+ 
++static inline mq_getattr_local(int fd, struct mq_attr *data)
++{
++        return syscall(__NR_mq_getsetattr, fd, NULL, data);
++}
++
+ _public_ int sd_is_mq(int fd, const char *path) {
+         struct mq_attr attr;
+ 
+         /* Check that the fd is valid */
+         assert_return(fcntl(fd, F_GETFD) >= 0, -errno);
+ 
+-        if (mq_getattr(fd, &attr) < 0) {
++        if (mq_getattr_local(fd, &attr) < 0) {
+                 if (errno == EBADF)
+                         /* A non-mq fd (or an invalid one, but we ruled that out above) */
+                         return 0;
+-- 
+2.20.1
+
diff --git a/0043-mount-setup-Harden-a-bit-the-options-for-certan-moun.patch b/0043-mount-setup-Harden-a-bit-the-options-for-certan-moun.patch
index 7115827..8bffecf 100644
--- a/0043-mount-setup-Harden-a-bit-the-options-for-certan-moun.patch
+++ b/0043-mount-setup-Harden-a-bit-the-options-for-certan-moun.patch
@@ -1,8 +1,7 @@
-From 0ad7fa495c06428a1c2c5612012c53ff591341bc Mon Sep 17 00:00:00 2001
+From 866a3fd3e8f59383788e0234c884d68545ef2251 Mon Sep 17 00:00:00 2001
 From: Thiago Macieira <thiago.macieira@intel.com>
 Date: Fri, 22 Feb 2019 12:02:54 -0800
-Subject: [PATCH systemd] mount-setup: Harden a bit the options for certan
- mountpoints
+Subject: [PATCH] mount-setup: Harden a bit the options for certan mountpoints
 
 /dev/shm has no business with executable files. Since it is
 tmpfs, that implies someone is adding the after every boot.
@@ -11,7 +10,7 @@ tmpfs, that implies someone is adding the after every boot.
  1 file changed, 1 insertion(+), 1 deletion(-)
 
 diff --git a/src/core/mount-setup.c b/src/core/mount-setup.c
-index 3ce6164b06..72d4b0567c 100644
+index f5ad6bf925..7b1a71447b 100644
 --- a/src/core/mount-setup.c
 +++ b/src/core/mount-setup.c
 @@ -73,7 +73,7 @@ static const MountPoint mount_table[] = {
diff --git a/CVE-2018-15688.patch b/CVE-2018-15688.patch
deleted file mode 100644
index 38ed1ce..0000000
--- a/CVE-2018-15688.patch
+++ /dev/null
@@ -1,23 +0,0 @@
-From 49653743f69658aeeebdb14faf1ab158f1f2cb20 Mon Sep 17 00:00:00 2001
-From: Lennart Poettering <lennart@poettering.net>
-Date: Fri, 19 Oct 2018 12:12:33 +0200
-Subject: [PATCH] dhcp6: make sure we have enough space for the DHCP6 option
- header
-
----
- src/libsystemd-network/dhcp6-option.c | 2 +-
- 1 file changed, 1 insertion(+), 1 deletion(-)
-
-diff --git a/src/libsystemd-network/dhcp6-option.c b/src/libsystemd-network/dhcp6-option.c
-index cbd4bc7a2a3..2806415100c 100644
---- a/src/libsystemd-network/dhcp6-option.c
-+++ b/src/libsystemd-network/dhcp6-option.c
-@@ -106,7 +106,7 @@ int dhcp6_option_append_ia(uint8_t **buf, size_t *buflen, const DHCP6IA *ia) {
-                 return -EINVAL;
-         }
- 
--        if (*buflen < len)
-+        if (*buflen < offsetof(DHCP6Option, data) + len)
-                 return -ENOBUFS;
- 
-         ia_hdr = *buf;
diff --git a/CVE-2018-16864.patch b/CVE-2018-16864.patch
deleted file mode 100644
index 653c110..0000000
--- a/CVE-2018-16864.patch
+++ /dev/null
@@ -1,201 +0,0 @@
-From c29b44cb90e2cc521533e6169cf847553ebefd81 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Zbigniew=20J=C4=99drzejewski-Szmek?= <zbyszek@in.waw.pl>
-Date: Wed, 5 Dec 2018 18:38:39 +0100
-Subject: [PATCH 03/11] journald: do not store the iovec entry for process
- commandline on stack
-
-This fixes a crash where we would read the commandline, whose length is under
-control of the sending program, and then crash when trying to create a stack
-allocation for it.
-
-CVE-2018-16864
-https://bugzilla.redhat.com/show_bug.cgi?id=1653855
-
-The message actually doesn't get written to disk, because
-journal_file_append_entry() returns -E2BIG.
----
- src/basic/io-util.c           | 10 ++++++++++
- src/basic/io-util.h           |  2 ++
- src/coredump/coredump.c       | 31 +++++++++++--------------------
- src/journal/journald-server.c | 25 +++++++++++++++----------
- 4 files changed, 38 insertions(+), 30 deletions(-)
-
-diff --git a/src/basic/io-util.c b/src/basic/io-util.c
-index 1f64cc933b..575398fbe6 100644
---- a/src/basic/io-util.c
-+++ b/src/basic/io-util.c
-@@ -8,6 +8,7 @@
- #include <unistd.h>
-
- #include "io-util.h"
-+#include "string-util.h"
- #include "time-util.h"
-
- int flush_fd(int fd) {
-@@ -252,3 +253,12 @@ ssize_t sparse_write(int fd, const void *p, size_t sz, size_t run_length) {
-
-         return q - (const uint8_t*) p;
- }
-+
-+char* set_iovec_string_field(struct iovec *iovec, size_t *n_iovec, const char *field, const char *value) {
-+        char *x;
-+
-+        x = strappend(field, value);
-+        if (x)
-+                iovec[(*n_iovec)++] = IOVEC_MAKE_STRING(x);
-+        return x;
-+}
-diff --git a/src/basic/io-util.h b/src/basic/io-util.h
-index ed189b5820..792a64ad5e 100644
---- a/src/basic/io-util.h
-+++ b/src/basic/io-util.h
-@@ -71,3 +71,5 @@ static inline bool FILE_SIZE_VALID_OR_INFINITY(uint64_t l) {
- #define IOVEC_MAKE(base, len) (struct iovec) IOVEC_INIT(base, len)
- #define IOVEC_INIT_STRING(string) IOVEC_INIT((char*) string, strlen(string))
- #define IOVEC_MAKE_STRING(string) (struct iovec) IOVEC_INIT_STRING(string)
-+
-+char* set_iovec_string_field(struct iovec *iovec, size_t *n_iovec, const char *field, const char *value);
-diff --git a/src/coredump/coredump.c b/src/coredump/coredump.c
-index 1d39f5338d..771df01d1e 100644
---- a/src/coredump/coredump.c
-+++ b/src/coredump/coredump.c
-@@ -1063,19 +1063,10 @@ static int send_iovec(const struct iovec iovec[], size_t n_iovec, int input_fd)
-         return 0;
- }
-
--static char* set_iovec_field(struct iovec *iovec, size_t *n_iovec, const char *field, const char *value) {
--        char *x;
--
--        x = strappend(field, value);
--        if (x)
--                iovec[(*n_iovec)++] = IOVEC_MAKE_STRING(x);
--        return x;
--}
--
- static char* set_iovec_field_free(struct iovec *iovec, size_t *n_iovec, const char *field, char *value) {
-         char *x;
-
--        x = set_iovec_field(iovec, n_iovec, field, value);
-+        x = set_iovec_string_field(iovec, n_iovec, field, value);
-         free(value);
-         return x;
- }
-@@ -1125,36 +1116,36 @@ static int gather_pid_metadata(
-                         disable_coredumps();
-                 }
-
--                set_iovec_field(iovec, n_iovec, "COREDUMP_UNIT=", context[CONTEXT_UNIT]);
-+                set_iovec_string_field(iovec, n_iovec, "COREDUMP_UNIT=", context[CONTEXT_UNIT]);
-         }
-
-         if (cg_pid_get_user_unit(pid, &t) >= 0)
-                 set_iovec_field_free(iovec, n_iovec, "COREDUMP_USER_UNIT=", t);
-
-         /* The next few are mandatory */
--        if (!set_iovec_field(iovec, n_iovec, "COREDUMP_PID=", context[CONTEXT_PID]))
-+        if (!set_iovec_string_field(iovec, n_iovec, "COREDUMP_PID=", context[CONTEXT_PID]))
-                 return log_oom();
-
--        if (!set_iovec_field(iovec, n_iovec, "COREDUMP_UID=", context[CONTEXT_UID]))
-+        if (!set_iovec_string_field(iovec, n_iovec, "COREDUMP_UID=", context[CONTEXT_UID]))
-                 return log_oom();
-
--        if (!set_iovec_field(iovec, n_iovec, "COREDUMP_GID=", context[CONTEXT_GID]))
-+        if (!set_iovec_string_field(iovec, n_iovec, "COREDUMP_GID=", context[CONTEXT_GID]))
-                 return log_oom();
-
--        if (!set_iovec_field(iovec, n_iovec, "COREDUMP_SIGNAL=", context[CONTEXT_SIGNAL]))
-+        if (!set_iovec_string_field(iovec, n_iovec, "COREDUMP_SIGNAL=", context[CONTEXT_SIGNAL]))
-                 return log_oom();
-
--        if (!set_iovec_field(iovec, n_iovec, "COREDUMP_RLIMIT=", context[CONTEXT_RLIMIT]))
-+        if (!set_iovec_string_field(iovec, n_iovec, "COREDUMP_RLIMIT=", context[CONTEXT_RLIMIT]))
-                 return log_oom();
-
--        if (!set_iovec_field(iovec, n_iovec, "COREDUMP_HOSTNAME=", context[CONTEXT_HOSTNAME]))
-+        if (!set_iovec_string_field(iovec, n_iovec, "COREDUMP_HOSTNAME=", context[CONTEXT_HOSTNAME]))
-                 return log_oom();
-
--        if (!set_iovec_field(iovec, n_iovec, "COREDUMP_COMM=", context[CONTEXT_COMM]))
-+        if (!set_iovec_string_field(iovec, n_iovec, "COREDUMP_COMM=", context[CONTEXT_COMM]))
-                 return log_oom();
-
-         if (context[CONTEXT_EXE] &&
--            !set_iovec_field(iovec, n_iovec, "COREDUMP_EXE=", context[CONTEXT_EXE]))
-+            !set_iovec_string_field(iovec, n_iovec, "COREDUMP_EXE=", context[CONTEXT_EXE]))
-                 return log_oom();
-
-         if (sd_pid_get_session(pid, &t) >= 0)
-@@ -1222,7 +1213,7 @@ static int gather_pid_metadata(
-                 iovec[(*n_iovec)++] = IOVEC_MAKE_STRING(t);
-
-         if (safe_atoi(context[CONTEXT_SIGNAL], &signo) >= 0 && SIGNAL_VALID(signo))
--                set_iovec_field(iovec, n_iovec, "COREDUMP_SIGNAL_NAME=SIG", signal_to_string(signo));
-+                set_iovec_string_field(iovec, n_iovec, "COREDUMP_SIGNAL_NAME=SIG", signal_to_string(signo));
-
-         return 0; /* we successfully acquired all metadata */
- }
-diff --git a/src/journal/journald-server.c b/src/journal/journald-server.c
-index f09672531c..2a960ebb3e 100644
---- a/src/journal/journald-server.c
-+++ b/src/journal/journald-server.c
-@@ -905,6 +905,7 @@ static void dispatch_message_real(
-                 pid_t object_pid) {
-
-         char source_time[sizeof("_SOURCE_REALTIME_TIMESTAMP=") + DECIMAL_STR_MAX(usec_t)];
-+        _cleanup_free_ char *cmdline1 = NULL, *cmdline2 = NULL;
-         uid_t journal_uid;
-         ClientContext *o;
-
-@@ -921,20 +922,23 @@ static void dispatch_message_real(
-                 IOVEC_ADD_NUMERIC_FIELD(iovec, n, c->uid, uid_t, uid_is_valid, UID_FMT, "_UID");
-                 IOVEC_ADD_NUMERIC_FIELD(iovec, n, c->gid, gid_t, gid_is_valid, GID_FMT, "_GID");
-
--                IOVEC_ADD_STRING_FIELD(iovec, n, c->comm, "_COMM");
--                IOVEC_ADD_STRING_FIELD(iovec, n, c->exe, "_EXE");
--                IOVEC_ADD_STRING_FIELD(iovec, n, c->cmdline, "_CMDLINE");
--                IOVEC_ADD_STRING_FIELD(iovec, n, c->capeff, "_CAP_EFFECTIVE");
-+                IOVEC_ADD_STRING_FIELD(iovec, n, c->comm, "_COMM"); /* At most TASK_COMM_LENGTH (16 bytes) */
-+                IOVEC_ADD_STRING_FIELD(iovec, n, c->exe, "_EXE"); /* A path, so at most PATH_MAX (4096 bytes) */
-
--                IOVEC_ADD_SIZED_FIELD(iovec, n, c->label, c->label_size, "_SELINUX_CONTEXT");
-+                if (c->cmdline)
-+                        /* At most _SC_ARG_MAX (2MB usually), which is too much to put on stack.
-+                         * Let's use a heap allocation for this one. */
-+                        cmdline1 = set_iovec_string_field(iovec, &n, "_CMDLINE=", c->cmdline);
-
-+                IOVEC_ADD_STRING_FIELD(iovec, n, c->capeff, "_CAP_EFFECTIVE"); /* Read from /proc/.../status */
-+                IOVEC_ADD_SIZED_FIELD(iovec, n, c->label, c->label_size, "_SELINUX_CONTEXT");
-                 IOVEC_ADD_NUMERIC_FIELD(iovec, n, c->auditid, uint32_t, audit_session_is_valid, "%" PRIu32, "_AUDIT_SESSION");
-                 IOVEC_ADD_NUMERIC_FIELD(iovec, n, c->loginuid, uid_t, uid_is_valid, UID_FMT, "_AUDIT_LOGINUID");
-
--                IOVEC_ADD_STRING_FIELD(iovec, n, c->cgroup, "_SYSTEMD_CGROUP");
-+                IOVEC_ADD_STRING_FIELD(iovec, n, c->cgroup, "_SYSTEMD_CGROUP"); /* A path */
-                 IOVEC_ADD_STRING_FIELD(iovec, n, c->session, "_SYSTEMD_SESSION");
-                 IOVEC_ADD_NUMERIC_FIELD(iovec, n, c->owner_uid, uid_t, uid_is_valid, UID_FMT, "_SYSTEMD_OWNER_UID");
--                IOVEC_ADD_STRING_FIELD(iovec, n, c->unit, "_SYSTEMD_UNIT");
-+                IOVEC_ADD_STRING_FIELD(iovec, n, c->unit, "_SYSTEMD_UNIT"); /* Unit names are bounded by UNIT_NAME_MAX */
-                 IOVEC_ADD_STRING_FIELD(iovec, n, c->user_unit, "_SYSTEMD_USER_UNIT");
-                 IOVEC_ADD_STRING_FIELD(iovec, n, c->slice, "_SYSTEMD_SLICE");
-                 IOVEC_ADD_STRING_FIELD(iovec, n, c->user_slice, "_SYSTEMD_USER_SLICE");
-@@ -955,13 +959,14 @@ static void dispatch_message_real(
-                 IOVEC_ADD_NUMERIC_FIELD(iovec, n, o->uid, uid_t, uid_is_valid, UID_FMT, "OBJECT_UID");
-                 IOVEC_ADD_NUMERIC_FIELD(iovec, n, o->gid, gid_t, gid_is_valid, GID_FMT, "OBJECT_GID");
-
-+                /* See above for size limits, only ->cmdline may be large, so use a heap allocation for it. */
-                 IOVEC_ADD_STRING_FIELD(iovec, n, o->comm, "OBJECT_COMM");
-                 IOVEC_ADD_STRING_FIELD(iovec, n, o->exe, "OBJECT_EXE");
--                IOVEC_ADD_STRING_FIELD(iovec, n, o->cmdline, "OBJECT_CMDLINE");
--                IOVEC_ADD_STRING_FIELD(iovec, n, o->capeff, "OBJECT_CAP_EFFECTIVE");
-+                if (o->cmdline)
-+                        cmdline2 = set_iovec_string_field(iovec, &n, "OBJECT_CMDLINE=", o->cmdline);
-
-+                IOVEC_ADD_STRING_FIELD(iovec, n, o->capeff, "OBJECT_CAP_EFFECTIVE");
-                 IOVEC_ADD_SIZED_FIELD(iovec, n, o->label, o->label_size, "OBJECT_SELINUX_CONTEXT");
--
-                 IOVEC_ADD_NUMERIC_FIELD(iovec, n, o->auditid, uint32_t, audit_session_is_valid, "%" PRIu32, "OBJECT_AUDIT_SESSION");
-                 IOVEC_ADD_NUMERIC_FIELD(iovec, n, o->loginuid, uid_t, uid_is_valid, UID_FMT, "OBJECT_AUDIT_LOGINUID");
-
---
-2.19.2
-
diff --git a/CVE-2018-16866.patch b/CVE-2018-16866.patch
deleted file mode 100644
index 9674616..0000000
--- a/CVE-2018-16866.patch
+++ /dev/null
@@ -1,60 +0,0 @@
-From a6aadf4ae0bae185dc4c414d492a4a781c80ffe5 Mon Sep 17 00:00:00 2001
-From: Yu Watanabe <watanabe.yu+github@gmail.com>
-Date: Wed, 8 Aug 2018 15:06:36 +0900
-Subject: [PATCH] journal: fix syslog_parse_identifier()
-
-Fixes #9829.
----
- src/journal/journald-syslog.c     |  6 +++---
- src/journal/test-journal-syslog.c | 10 ++++++++--
- 2 files changed, 11 insertions(+), 5 deletions(-)
-
---- a/src/journal/journald-syslog.c
-+++ b/src/journal/journald-syslog.c
-@@ -194,7 +194,7 @@
-         e = l;
-         l--;
- 
--        if (p[l-1] == ']') {
-+        if (l > 0 && p[l-1] == ']') {
-                 size_t k = l-1;
- 
-                 for (;;) {
-@@ -219,8 +219,8 @@
-         if (t)
-                 *identifier = t;
- 
--        if (strchr(WHITESPACE, p[e]))
--                e++;
-+        e += strspn(p + e, WHITESPACE);
-+
-         *buf = p + e;
-         return e;
- }
---- a/src/journal/test-journal-syslog.c
-+++ b/src/journal/test-journal-syslog.c
-@@ -6,8 +6,8 @@
- #include "string-util.h"
- #include "syslog-util.h"
- 
--static void test_syslog_parse_identifier(const char* str,
--                                         const char *ident, const char*pid, int ret) {
-+static void test_syslog_parse_identifier(const char *str,
-+                                         const char *ident, const char *pid, int ret) {
-         const char *buf = str;
-         _cleanup_free_ char *ident2 = NULL, *pid2 = NULL;
-         int ret2;
-@@ -33,7 +33,13 @@
- int main(void) {
-         test_syslog_parse_identifier("pidu[111]: xxx", "pidu", "111", 11);
-         test_syslog_parse_identifier("pidu: xxx", "pidu", NULL, 6);
-+        test_syslog_parse_identifier("pidu:  xxx", "pidu", NULL, 7);
-         test_syslog_parse_identifier("pidu xxx", NULL, NULL, 0);
-+        test_syslog_parse_identifier(":", "", NULL, 1);
-+        test_syslog_parse_identifier(":  ", "", NULL, 3);
-+        test_syslog_parse_identifier("pidu:", "pidu", NULL, 5);
-+        test_syslog_parse_identifier("pidu: ", "pidu", NULL, 6);
-+        test_syslog_parse_identifier("pidu : ", NULL, NULL, 0);
- 
-         test_syslog_parse_priority("<>", 0, 0);
-         test_syslog_parse_priority("<>aaa", 0, 0);
diff --git a/CVE-2018-6954_2.patch b/CVE-2018-6954_2.patch
deleted file mode 100644
index 1570c41..0000000
--- a/CVE-2018-6954_2.patch
+++ /dev/null
@@ -1,2086 +0,0 @@
-Description: Make tmpfiles safe
-Origin: upstream, https://github.com/systemd/systemd/pull/8822/commits
-Bug: https://github.com/systemd/systemd/issues/7986
-
---- a/src/basic/btrfs-util.c
-+++ b/src/basic/btrfs-util.c
-@@ -132,8 +132,25 @@
-         return btrfs_is_subvol_fd(fd);
- }
-
--int btrfs_subvol_make(const char *path) {
-+int btrfs_subvol_make_fd(int fd, const char *subvolume) {
-         struct btrfs_ioctl_vol_args args = {};
-+        int r;
-+
-+        assert(subvolume);
-+
-+        r = validate_subvolume_name(subvolume);
-+        if (r < 0)
-+                return r;
-+
-+        strncpy(args.name, subvolume, sizeof(args.name)-1);
-+
-+        if (ioctl(fd, BTRFS_IOC_SUBVOL_CREATE, &args) < 0)
-+                return -errno;
-+
-+        return 0;
-+}
-+
-+int btrfs_subvol_make(const char *path) {
-         _cleanup_close_ int fd = -1;
-         const char *subvolume;
-         int r;
-@@ -148,12 +165,7 @@
-         if (fd < 0)
-                 return fd;
-
--        strncpy(args.name, subvolume, sizeof(args.name)-1);
--
--        if (ioctl(fd, BTRFS_IOC_SUBVOL_CREATE, &args) < 0)
--                return -errno;
--
--        return 0;
-+        return btrfs_subvol_make_fd(fd, subvolume);
- }
-
- int btrfs_subvol_set_read_only_fd(int fd, bool b) {
---- a/src/basic/btrfs-util.h
-+++ b/src/basic/btrfs-util.h
-@@ -65,6 +65,7 @@
- int btrfs_resize_loopback(const char *path, uint64_t size, bool grow_only);
-
- int btrfs_subvol_make(const char *path);
-+int btrfs_subvol_make_fd(int fd, const char *subvolume);
-
- int btrfs_subvol_snapshot_fd(int old_fd, const char *new_path, BtrfsSnapshotFlags flags);
- int btrfs_subvol_snapshot(const char *old_path, const char *new_path, BtrfsSnapshotFlags flags);
---- a/src/basic/fileio.c
-+++ b/src/basic/fileio.c
-@@ -1319,7 +1319,10 @@
-         if (!t)
-                 return -ENOMEM;
-
--        x = stpcpy(stpcpy(stpcpy(t, p), "/.#"), extra);
-+        if (isempty(p))
-+                x = stpcpy(stpcpy(t, ".#"), extra);
-+        else
-+                x = stpcpy(stpcpy(stpcpy(t, p), "/.#"), extra);
-
-         u = random_u64();
-         for (i = 0; i < 16; i++) {
---- a/src/basic/fs-util.c
-+++ b/src/basic/fs-util.c
-@@ -435,6 +435,31 @@
-         return 0;
- }
-
-+int mkfifoat_atomic(int dirfd, const char *path, mode_t mode) {
-+        _cleanup_free_ char *t = NULL;
-+        int r;
-+
-+        assert(path);
-+
-+        if (path_is_absolute(path))
-+                return mkfifo_atomic(path, mode);
-+
-+        /* We're only interested in the (random) filename.  */
-+        r = tempfn_random_child("", NULL, &t);
-+        if (r < 0)
-+                return r;
-+
-+        if (mkfifoat(dirfd, t, mode) < 0)
-+                return -errno;
-+
-+        if (renameat(dirfd, t, dirfd, path) < 0) {
-+                unlink_noerrno(t);
-+                return -errno;
-+        }
-+
-+        return 0;
-+}
-+
- int get_files_in_directory(const char *path, char ***list) {
-         _cleanup_closedir_ DIR *d = NULL;
-         struct dirent *de;
-@@ -670,7 +695,7 @@
-         if (!original_root && !ret && (flags & (CHASE_NONEXISTENT|CHASE_NO_AUTOFS|CHASE_SAFE|CHASE_OPEN|CHASE_STEP)) == CHASE_OPEN) {
-                 /* Shortcut the CHASE_OPEN case if the caller isn't interested in the actual path and has no root set
-                  * and doesn't care about any of the other special features we provide either. */
--                r = open(path, O_PATH|O_CLOEXEC);
-+                r = open(path, O_PATH|O_CLOEXEC|((flags & CHASE_NOFOLLOW) ? O_NOFOLLOW : 0));
-                 if (r < 0)
-                         return -errno;
-
-@@ -825,7 +850,7 @@
-                     fd_is_fs_type(child, AUTOFS_SUPER_MAGIC) > 0)
-                         return -EREMOTE;
-
--                if (S_ISLNK(st.st_mode)) {
-+                if (S_ISLNK(st.st_mode) && !((flags & CHASE_NOFOLLOW) && isempty(todo))) {
-                         char *joined;
-
-                         _cleanup_free_ char *destination = NULL;
---- a/src/basic/fs-util.h
-+++ b/src/basic/fs-util.h
-@@ -42,6 +42,7 @@
- int symlink_atomic(const char *from, const char *to);
- int mknod_atomic(const char *path, mode_t mode, dev_t dev);
- int mkfifo_atomic(const char *path, mode_t mode);
-+int mkfifoat_atomic(int dir_fd, const char *path, mode_t mode);
-
- int get_files_in_directory(const char *path, char ***list);
-
-@@ -72,6 +73,7 @@
-         CHASE_OPEN        = 1 << 4, /* If set, return an O_PATH object to the final component */
-         CHASE_TRAIL_SLASH = 1 << 5, /* If set, any trailing slash will be preserved */
-         CHASE_STEP        = 1 << 6, /* If set, just execute a single step of the normalization */
-+        CHASE_NOFOLLOW    = 1 << 7, /* Only valid with CHASE_OPEN: when the path's right-most component refers to symlink return O_PATH fd of the symlink, rather than following it. */
- };
-
- /* How many iterations to execute before returning -ELOOP */
---- a/src/basic/label.h
-+++ b/src/basic/label.h
-@@ -12,6 +12,7 @@
- int label_fix(const char *path, LabelFixFlags flags);
-
- int mkdir_label(const char *path, mode_t mode);
-+int mkdirat_label(int dirfd, const char *path, mode_t mode);
- int symlink_label(const char *old_path, const char *new_path);
-
- int btrfs_subvol_make_label(const char *path);
---- a/src/basic/mkdir-label.c
-+++ b/src/basic/mkdir-label.c
-@@ -28,6 +28,23 @@
-         return mac_smack_fix(path, 0);
- }
-
-+int mkdirat_label(int dirfd, const char *path, mode_t mode) {
-+        int r;
-+
-+        assert(path);
-+
-+        r = mac_selinux_create_file_prepare_at(dirfd, path, S_IFDIR);
-+        if (r < 0)
-+                return r;
-+
-+        r = mkdirat_errno_wrapper(dirfd, path, mode);
-+        mac_selinux_create_file_clear();
-+        if (r < 0)
-+                return r;
-+
-+        return mac_smack_fix_at(dirfd, path, 0);
-+}
-+
- int mkdir_safe_label(const char *path, mode_t mode, uid_t uid, gid_t gid, MkdirFlags flags) {
-         return mkdir_safe_internal(path, mode, uid, gid, flags, mkdir_label);
- }
---- a/src/basic/mkdir.c
-+++ b/src/basic/mkdir.c
-@@ -80,6 +80,12 @@
-         return 0;
- }
-
-+int mkdirat_errno_wrapper(int dirfd, const char *pathname, mode_t mode) {
-+        if (mkdirat(dirfd, pathname, mode) < 0)
-+                return -errno;
-+        return 0;
-+}
-+
- int mkdir_safe(const char *path, mode_t mode, uid_t uid, gid_t gid, MkdirFlags flags) {
-         return mkdir_safe_internal(path, mode, uid, gid, flags, mkdir_errno_wrapper);
- }
---- a/src/basic/mkdir.h
-+++ b/src/basic/mkdir.h
-@@ -10,6 +10,7 @@
- } MkdirFlags;
-
- int mkdir_errno_wrapper(const char *pathname, mode_t mode);
-+int mkdirat_errno_wrapper(int dirfd, const char *pathname, mode_t mode);
- int mkdir_safe(const char *path, mode_t mode, uid_t uid, gid_t gid, MkdirFlags flags);
- int mkdir_parents(const char *path, mode_t mode);
- int mkdir_p(const char *path, mode_t mode);
---- a/src/basic/path-util.c
-+++ b/src/basic/path-util.c
-@@ -110,10 +110,7 @@
-                 if (r < 0)
-                         return r;
-
--                if (endswith(cwd, "/"))
--                        c = strjoin(cwd, p);
--                else
--                        c = strjoin(cwd, "/", p);
-+                c = path_join(NULL, cwd, p);
-         }
-         if (!c)
-                 return -ENOMEM;
---- a/src/basic/selinux-util.c
-+++ b/src/basic/selinux-util.c
-@@ -316,48 +316,89 @@
-         return NULL;
- }
-
--int mac_selinux_create_file_prepare(const char *path, mode_t mode) {
--
- #if HAVE_SELINUX
-+static int selinux_create_file_prepare_abspath(const char *abspath, mode_t mode) {
-         _cleanup_freecon_ char *filecon = NULL;
-+        _cleanup_free_ char *path = NULL;
-         int r;
-
--        assert(path);
--
--        if (!label_hnd)
--                return 0;
--
--        if (path_is_absolute(path))
--                r = selabel_lookup_raw(label_hnd, &filecon, path, mode);
--        else {
--                _cleanup_free_ char *newpath = NULL;
--
--                r = path_make_absolute_cwd(path, &newpath);
--                if (r < 0)
--                        return r;
--
--                r = selabel_lookup_raw(label_hnd, &filecon, newpath, mode);
--        }
-+        assert(abspath);
-+        assert(path_is_absolute(abspath));
-
-+        r = selabel_lookup_raw(label_hnd, &filecon, abspath, mode);
-         if (r < 0) {
-                 /* No context specified by the policy? Proceed without setting it. */
-                 if (errno == ENOENT)
-                         return 0;
-
--                log_enforcing_errno(errno, "Failed to determine SELinux security context for %s: %m", path);
-+                log_enforcing_errno(errno, "Failed to determine SELinux security context for %s: %m", abspath);
-         } else {
-                 if (setfscreatecon_raw(filecon) >= 0)
-                         return 0; /* Success! */
-
--                log_enforcing_errno(errno, "Failed to set SELinux security context %s for %s: %m", filecon, path);
-+                log_enforcing_errno(errno, "Failed to set SELinux security context %s for %s: %m", filecon, abspath);
-         }
-
-         if (security_getenforce() > 0)
-                 return -errno;
-
--#endif
-         return 0;
- }
-+#endif
-+
-+int mac_selinux_create_file_prepare_at(int dirfd, const char *path, mode_t mode) {
-+        int r = 0;
-+
-+#if HAVE_SELINUX
-+        _cleanup_free_ char *abspath = NULL;
-+        _cleanup_close_ int fd = -1;
-+
-+        assert(path);
-+
-+        if (!label_hnd)
-+                return 0;
-+
-+        if (!path_is_absolute(path)) {
-+                _cleanup_free_ char *p = NULL;
-+
-+                if (dirfd == AT_FDCWD)
-+                        r = safe_getcwd(&p);
-+                else
-+                        r = fd_get_path(dirfd, &p);
-+                if (r < 0)
-+                        return r;
-+
-+                abspath = path_join(NULL, p, path);
-+                if (!abspath)
-+                        return -ENOMEM;
-+
-+                path = abspath;
-+        }
-+
-+        r = selinux_create_file_prepare_abspath(path, mode);
-+#endif
-+        return r;
-+}
-+
-+int mac_selinux_create_file_prepare(const char *path, mode_t mode) {
-+        int r = 0;
-+
-+#if HAVE_SELINUX
-+        _cleanup_free_ char *abspath = NULL;
-+
-+        assert(path);
-+
-+        if (!label_hnd)
-+                return 0;
-+
-+        r = path_make_absolute_cwd(path, &abspath);
-+        if (r < 0)
-+                return r;
-+
-+        r = selinux_create_file_prepare_abspath(abspath, mode);
-+#endif
-+        return r;
-+}
-
- void mac_selinux_create_file_clear(void) {
-
---- a/src/basic/selinux-util.h
-+++ b/src/basic/selinux-util.h
-@@ -23,6 +23,7 @@
- char* mac_selinux_free(char *label);
-
- int mac_selinux_create_file_prepare(const char *path, mode_t mode);
-+int mac_selinux_create_file_prepare_at(int dirfd, const char *path, mode_t mode);
- void mac_selinux_create_file_clear(void);
-
- int mac_selinux_create_socket_prepare(const char *label);
---- a/src/basic/smack-util.c
-+++ b/src/basic/smack-util.c
-@@ -122,43 +122,20 @@
-         return r;
- }
-
--int mac_smack_fix(const char *path, LabelFixFlags flags) {
-+static int smack_fix_fd(int fd , const char *abspath, LabelFixFlags flags) {
-         char procfs_path[STRLEN("/proc/self/fd/") + DECIMAL_STR_MAX(int)];
--        _cleanup_close_ int fd = -1;
-         const char *label;
-         struct stat st;
-         int r;
-
--        assert(path);
-+        /* The caller should have done the sanity checks. */
-+        assert(abspath);
-+        assert(path_is_absolute(abspath));
-
--        if (!mac_smack_use())
-+        /* Path must be in /dev. */
-+        if (!path_startswith(abspath, "/dev"))
-                 return 0;
-
--        /* Path must be in /dev. Note that this check is pretty sloppy, as we might be called with non-normalized paths
--         * and hence not detect all cases of /dev. */
--
--        if (path_is_absolute(path)) {
--                if (!path_startswith(path, "/dev"))
--                        return 0;
--        } else {
--                _cleanup_free_ char *cwd = NULL;
--
--                r = safe_getcwd(&cwd);
--                if (r < 0)
--                        return r;
--
--                if (!path_startswith(cwd, "/dev"))
--                        return 0;
--        }
--
--        fd = open(path, O_NOFOLLOW|O_CLOEXEC|O_PATH);
--        if (fd < 0) {
--                if ((flags & LABEL_IGNORE_ENOENT) && errno == ENOENT)
--                        return 0;
--
--                return -errno;
--        }
--
-         if (fstat(fd, &st) < 0)
-                 return -errno;
-
-@@ -196,12 +173,62 @@
-                     streq(old_label, label))
-                         return 0;
-
--                return log_debug_errno(r, "Unable to fix SMACK label of %s: %m", path);
-+                return log_debug_errno(r, "Unable to fix SMACK label of %s: %m", abspath);
-         }
-
-         return 0;
- }
-
-+int mac_smack_fix_at(int dirfd, const char *path, LabelFixFlags flags) {
-+        _cleanup_free_ char *p = NULL;
-+        _cleanup_close_ int fd = -1;
-+        int r;
-+
-+        assert(path);
-+
-+        if (!mac_smack_use())
-+                return 0;
-+
-+        fd = openat(dirfd, path, O_NOFOLLOW|O_CLOEXEC|O_PATH);
-+        if (fd < 0) {
-+                if ((flags & LABEL_IGNORE_ENOENT) && errno == ENOENT)
-+                        return 0;
-+
-+                return -errno;
-+        }
-+
-+        r = fd_get_path(fd, &p);
-+        if (r < 0)
-+                return r;
-+
-+        return smack_fix_fd(fd, p, flags);
-+}
-+
-+int mac_smack_fix(const char *path, LabelFixFlags flags) {
-+        _cleanup_free_ char *abspath = NULL;
-+        _cleanup_close_ int fd = -1;
-+        int r;
-+
-+        assert(path);
-+
-+        if (!mac_smack_use())
-+                return 0;
-+
-+        r = path_make_absolute_cwd(path, &abspath);
-+        if (r < 0)
-+                return r;
-+
-+        fd = open(abspath, O_NOFOLLOW|O_CLOEXEC|O_PATH);
-+        if (fd < 0) {
-+                if ((flags & LABEL_IGNORE_ENOENT) && errno == ENOENT)
-+                        return 0;
-+
-+                return -errno;
-+        }
-+
-+        return smack_fix_fd(fd, abspath, flags);
-+}
-+
- int mac_smack_copy(const char *dest, const char *src) {
-         int r = 0;
-         _cleanup_free_ char *label = NULL;
-@@ -249,6 +276,10 @@
-         return 0;
- }
-
-+int mac_smack_fix_at(int dirfd, const char *path, LabelFixFlags flags) {
-+        return 0;
-+}
-+
- int mac_smack_copy(const char *dest, const char *src) {
-         return 0;
- }
---- a/src/basic/smack-util.h
-+++ b/src/basic/smack-util.h
-@@ -30,6 +30,7 @@
- bool mac_smack_use(void);
-
- int mac_smack_fix(const char *path, LabelFixFlags flags);
-+int mac_smack_fix_at(int dirfd, const char *path, LabelFixFlags flags);
-
- const char* smack_attr_to_string(SmackAttr i) _const_;
- SmackAttr smack_attr_from_string(const char *s) _pure_;
---- a/src/basic/stat-util.c
-+++ b/src/basic/stat-util.c
-@@ -45,6 +45,17 @@
-         return !!S_ISDIR(st.st_mode);
- }
-
-+int is_dir_fd(int fd) {
-+        struct stat st;
-+        int r;
-+
-+        r = fstat(fd, &st);
-+        if (r < 0)
-+                return -errno;
-+
-+        return !!S_ISDIR(st.st_mode);
-+}
-+
- int is_device_node(const char *path) {
-         struct stat info;
-
---- a/src/basic/stat-util.h
-+++ b/src/basic/stat-util.h
-@@ -12,6 +12,7 @@
-
- int is_symlink(const char *path);
- int is_dir(const char *path, bool follow);
-+int is_dir_fd(int fd);
- int is_device_node(const char *path);
-
- int dir_is_empty(const char *path);
---- a/src/test/test-fs-util.c
-+++ b/src/test/test-fs-util.c
-@@ -23,6 +23,7 @@
-         _cleanup_free_ char *result = NULL;
-         char temp[] = "/tmp/test-chase.XXXXXX";
-         const char *top, *p, *pslash, *q, *qslash;
-+        struct stat st;
-         int r, pfd;
-
-         assert_se(mkdtemp(temp));
-@@ -270,6 +271,30 @@
- */
-         }
-
-+        /* Test CHASE_NOFOLLOW */
-+
-+        p = strjoina(temp, "/target");
-+        q = strjoina(temp, "/symlink");
-+        assert_se(symlink(p, q) >= 0);
-+        pfd = chase_symlinks(q, NULL, CHASE_OPEN|CHASE_NOFOLLOW, &result);
-+        assert_se(pfd > 0);
-+        assert_se(path_equal(result, q));
-+        assert_se(fstat(pfd, &st) >= 0);
-+        assert_se(S_ISLNK(st.st_mode));
-+        result = mfree(result);
-+
-+        /* s1 -> s2 -> nonexistent */
-+        q = strjoina(temp, "/s1");
-+        assert_se(symlink("s2", q) >= 0);
-+        p = strjoina(temp, "/s2");
-+        assert_se(symlink("nonexistent", p) >= 0);
-+        pfd = chase_symlinks(q, NULL, CHASE_OPEN|CHASE_NOFOLLOW, &result);
-+        assert_se(pfd > 0);
-+        assert_se(path_equal(result, q));
-+        assert_se(fstat(pfd, &st) >= 0);
-+        assert_se(S_ISLNK(st.st_mode));
-+        result = mfree(result);
-+
-         /* Test CHASE_ONE */
-
-         p = strjoina(temp, "/start");
---- a/src/tmpfiles/tmpfiles.c
-+++ b/src/tmpfiles/tmpfiles.c
-@@ -772,6 +772,7 @@
-
- static int fd_set_perms(Item *i, int fd, const struct stat *st) {
-         _cleanup_free_ char *path = NULL;
-+        struct stat stbuf;
-         int r;
-
-         assert(i);
-@@ -784,6 +785,12 @@
-         if (!i->mode_set && !i->uid_set && !i->gid_set)
-                 goto shortcut;
-
-+        if (!st) {
-+                if (fstat(fd, &stbuf) < 0)
-+                        return log_error_errno(errno, "fstat(%s) failed: %m", path);
-+                st = &stbuf;
-+        }
-+
-         if (hardlink_vulnerable(st)) {
-                 log_error("Refusing to set permissions on hardlinked file %s while the fs.protected_hardlinks sysctl is turned off.", path);
-                 return -EPERM;
-@@ -835,35 +842,62 @@
-         return label_fix(path, 0);
- }
-
--static int path_set_perms(Item *i, const char *path) {
--        _cleanup_close_ int fd = -1;
--        struct stat st;
-+static int path_open_parent_safe(const char *path) {
-+        _cleanup_free_ char *dn = NULL;
-+        int fd;
-
--        assert(i);
--        assert(path);
-+        if (path_equal(path, "/") || !path_is_normalized(path)) {
-+                log_error("Failed to open parent of '%s': invalid path.", path);
-+                return -EINVAL;
-+        }
-
--        fd = open(path, O_NOFOLLOW|O_CLOEXEC|O_PATH);
--        if (fd < 0) {
--                int level = LOG_ERR, r = -errno;
-+        dn = dirname_malloc(path);
-+        if (!dn)
-+                return log_oom();
-+
-+        fd = chase_symlinks(dn, NULL, CHASE_OPEN|CHASE_SAFE, NULL);
-+        if (fd == -EPERM)
-+                return log_error_errno(fd, "Unsafe symlinks encountered in %s, refusing.", path);
-+        if (fd < 0)
-+                return log_error_errno(fd, "Failed to validate path %s: %m", path);
-
--                /* Option "e" operates only on existing objects. Do not
--                 * print errors about non-existent files or directories */
--                if (i->type == EMPTY_DIRECTORY && errno == ENOENT) {
--                        level = LOG_DEBUG;
--                        r = 0;
--                }
-+        return fd;
-+}
-
--                log_full_errno(level, errno, "Adjusting owner and mode for %s failed: %m", path);
--                return r;
-+static int path_open_safe(const char *path) {
-+        int fd;
-+
-+        /* path_open_safe() returns a file descriptor opened with O_PATH after
-+         * verifying that the path doesn't contain unsafe transitions, except
-+         * for its final component as the function does not follow symlink. */
-+
-+        assert(path);
-+
-+        if (!path_is_normalized(path)) {
-+                log_error("Failed to open invalid path '%s'.", path);
-+                return -EINVAL;
-         }
-
--        if (fstat(fd, &st) < 0)
--                return log_error_errno(errno, "Failed to fstat() file %s: %m", path);
-+        fd = chase_symlinks(path, NULL, CHASE_OPEN|CHASE_SAFE|CHASE_NOFOLLOW, NULL);
-+        if (fd == -EPERM)
-+                return log_error_errno(fd, "Unsafe symlinks encountered in %s, refusing.", path);
-+        if (fd < 0)
-+                return log_error_errno(fd, "Failed to validate path %s: %m", path);
-
--        if (i->type == EMPTY_DIRECTORY && !S_ISDIR(st.st_mode))
--                return log_error_errno(EEXIST, "'%s' already exists and is not a directory. ", path);
-+        return fd;
-+}
-
--        return fd_set_perms(i, fd, &st);
-+static int path_set_perms(Item *i, const char *path) {
-+        _cleanup_close_ int fd = -1;
-+
-+        assert(i);
-+        assert(path);
-+
-+        fd = path_open_safe(path);
-+        if (fd < 0)
-+                return fd;
-+
-+        return fd_set_perms(i, fd, NULL);
- }
-
- static int parse_xattrs_from_arg(Item *i) {
-@@ -934,9 +968,9 @@
-         assert(i);
-         assert(path);
-
--        fd = open(path, O_CLOEXEC|O_NOFOLLOW|O_PATH);
-+        fd = path_open_safe(path);
-         if (fd < 0)
--                return log_error_errno(errno, "Cannot open '%s': %m", path);
-+                return fd;
-
-         return fd_set_xattrs(i, fd, NULL);
- }
-@@ -1011,15 +1045,21 @@
- #if HAVE_ACL
-         char procfs_path[STRLEN("/proc/self/fd/") + DECIMAL_STR_MAX(int)];
-         _cleanup_free_ char *path = NULL;
-+        struct stat stbuf;
-
-         assert(item);
-         assert(fd);
--        assert(st);
-
-         r = fd_get_path(fd, &path);
-         if (r < 0)
-                 return r;
-
-+        if (!st) {
-+                if (fstat(fd, &stbuf) < 0)
-+                        return log_error_errno(errno, "fstat(%s) failed: %m", path);
-+                st = &stbuf;
-+        }
-+
-         if (hardlink_vulnerable(st)) {
-                 log_error("Refusing to set ACLs on hardlinked file %s while the fs.protected_hardlinks sysctl is turned off.", path);
-                 return -EPERM;
-@@ -1054,19 +1094,15 @@
-         int r = 0;
- #ifdef HAVE_ACL
-         _cleanup_close_ int fd = -1;
--        struct stat st;
-
-         assert(item);
-         assert(path);
-
--        fd = open(path, O_NOFOLLOW|O_CLOEXEC|O_PATH);
-+        fd = path_open_safe(path);
-         if (fd < 0)
--                return log_error_errno(errno, "Adjusting ACL of %s failed: %m", path);
-+                return fd;
-
--        if (fstat(fd, &st) < 0)
--                return log_error_errno(errno, "Failed to fstat() file %s: %m", path);
--
--        r = fd_set_acls(item, fd, &st);
-+        r = fd_set_acls(item, fd, NULL);
-  #endif
-          return r;
-  }
-@@ -1173,6 +1209,7 @@
- static int fd_set_attribute(Item *item, int fd, const struct stat *st) {
-         _cleanup_close_ int procfs_fd = -1;
-         _cleanup_free_ char *path = NULL;
-+        struct stat stbuf;
-         unsigned f;
-         int r;
-
-@@ -1183,6 +1220,12 @@
-         if (r < 0)
-                 return r;
-
-+        if (!st) {
-+                if (fstat(fd, &stbuf) < 0)
-+                        return log_error_errno(errno, "fstat(%s) failed: %m", path);
-+                st = &stbuf;
-+        }
-+
-         /* Issuing the file attribute ioctls on device nodes is not
-          * safe, as that will be delivered to the drivers, not the
-          * file system containing the device node. */
-@@ -1213,99 +1256,562 @@
-
- static int path_set_attribute(Item *item, const char *path) {
-         _cleanup_close_ int fd = -1;
--        struct stat st;
-
-         if (!item->attribute_set || item->attribute_mask == 0)
-                 return 0;
-
--        fd = open(path, O_CLOEXEC|O_NOFOLLOW|O_PATH);
-+        fd = path_open_safe(path);
-         if (fd < 0)
--                return log_error_errno(errno, "Cannot open '%s': %m", path);
--
--        if (fstat(fd, &st) < 0)
--                return log_error_errno(errno, "Cannot stat '%s': %m", path);
-+                return fd;
-
--        return fd_set_attribute(item, fd, &st);
-+        return fd_set_attribute(item, fd, NULL);
- }
-
- static int write_one_file(Item *i, const char *path) {
--        _cleanup_close_ int fd = -1;
--        int flags, r = 0;
--        struct stat st;
-+        _cleanup_close_ int fd = -1, dir_fd = -1;
-+        char *bn;
-+        int r;
-
-         assert(i);
-         assert(path);
-+        assert(i->argument);
-+        assert(i->type == WRITE_FILE);
-
--        flags = i->type == CREATE_FILE ? O_CREAT|O_EXCL|O_NOFOLLOW :
--                i->type == TRUNCATE_FILE ? O_CREAT|O_TRUNC|O_NOFOLLOW : 0;
-+        /* Validate the path and keep the fd on the directory for opening the
-+         * file so we're sure that it can't be changed behind our back. */
-+        dir_fd = path_open_parent_safe(path);
-+        if (dir_fd < 0)
-+                return dir_fd;
-+
-+        bn = basename(path);
-+
-+        /* Follows symlinks */
-+        fd = openat(dir_fd, bn, O_NONBLOCK|O_CLOEXEC|O_WRONLY|O_NOCTTY, i->mode);
-+        if (fd < 0) {
-+                if (errno == ENOENT) {
-+                        log_debug_errno(errno, "Not writing missing file \"%s\": %m", path);
-+                        return 0;
-+                }
-+                return log_error_errno(errno, "Failed to open file \"%s\": %m", path);
-+        }
-+
-+        /* 'w' is allowed to write into any kind of files. */
-+        log_debug("Writing to \"%s\".", path);
-+
-+        r = loop_write(fd, i->argument, strlen(i->argument), false);
-+        if (r < 0)
-+                return log_error_errno(r, "Failed to write file \"%s\": %m", path);
-+
-+        return fd_set_perms(i, fd, NULL);
-+}
-+
-+static int create_file(Item *i, const char *path) {
-+        _cleanup_close_ int fd = -1, dir_fd = -1;
-+        struct stat stbuf, *st = NULL;
-+        int r = 0;
-+        char *bn;
-+
-+        assert(i);
-+        assert(path);
-+        assert(i->type == CREATE_FILE);
-+
-+        /* 'f' operates on regular files exclusively. */
-+
-+        /* Validate the path and keep the fd on the directory for opening the
-+         * file so we're sure that it can't be changed behind our back. */
-+        dir_fd = path_open_parent_safe(path);
-+        if (dir_fd < 0)
-+                return dir_fd;
-+
-+        bn = basename(path);
-
-         RUN_WITH_UMASK(0000) {
-                 mac_selinux_create_file_prepare(path, S_IFREG);
--                fd = open(path, flags|O_NONBLOCK|O_CLOEXEC|O_WRONLY|O_NOCTTY, i->mode);
-+                fd = openat(dir_fd, bn, O_CREAT|O_EXCL|O_NOFOLLOW|O_NONBLOCK|O_CLOEXEC|O_WRONLY|O_NOCTTY, i->mode);
-                 mac_selinux_create_file_clear();
-         }
-
-         if (fd < 0) {
--                if (i->type == WRITE_FILE && errno == ENOENT) {
--                        log_debug_errno(errno, "Not writing missing file \"%s\": %m", path);
--                        return 0;
-+                /* Even on a read-only filesystem, open(2) returns EEXIST if the
-+                 * file already exists. It returns EROFS only if it needs to
-+                 * create the file. */
-+                if (errno != EEXIST)
-+                        return log_error_errno(errno, "Failed to create file %s: %m", path);
-+
-+                /* Re-open the file. At that point it must exist since open(2)
-+                 * failed with EEXIST. We still need to check if the perms/mode
-+                 * need to be changed. For read-only filesystems, we let
-+                 * fd_set_perms() report the error if the perms need to be
-+                 * modified. */
-+                fd = openat(dir_fd, bn, O_NOFOLLOW|O_CLOEXEC|O_PATH, i->mode);
-+                if (fd < 0)
-+                        return log_error_errno(errno, "Failed to re-open file %s: %m", path);
-+
-+                if (fstat(fd, &stbuf) < 0)
-+                        return log_error_errno(errno, "stat(%s) failed: %m", path);
-+
-+                if (!S_ISREG(stbuf.st_mode)) {
-+                        log_error("%s exists and is not a regular file.", path);
-+                        return -EEXIST;
-                 }
--                if (i->type == CREATE_FILE && errno == EEXIST) {
--                        log_debug_errno(errno, "Not writing to pre-existing file \"%s\": %m", path);
--                        goto done;
-+
-+                st = &stbuf;
-+        } else {
-+
-+                log_debug("\"%s\" has been created.", path);
-+
-+                if (i->argument) {
-+                        log_debug("Writing to \"%s\".", path);
-+
-+                        r = loop_write(fd, i->argument, strlen(i->argument), false);
-+                        if (r < 0)
-+                                return log_error_errno(r, "Failed to write file \"%s\": %m", path);
-                 }
-+        }
-
--                r = -errno;
--                if (!i->argument && errno == EROFS && stat(path, &st) == 0 &&
--                    (i->type == CREATE_FILE || st.st_size == 0))
--                        goto check_mode;
-+        return fd_set_perms(i, fd, st);
-+}
-+
-+static int truncate_file(Item *i, const char *path) {
-+        _cleanup_close_ int fd = -1, dir_fd = -1;
-+        struct stat stbuf, *st = NULL;
-+        bool erofs = false;
-+        int r = 0;
-+        char *bn;
-+
-+        assert(i);
-+        assert(path);
-+        assert(i->type == TRUNCATE_FILE);
-+
-+        /* We want to operate on regular file exclusively especially since
-+         * O_TRUNC is unspecified if the file is neither a regular file nor a
-+         * fifo nor a terminal device. Therefore we first open the file and make
-+         * sure it's a regular one before truncating it. */
-+
-+        /* Validate the path and keep the fd on the directory for opening the
-+         * file so we're sure that it can't be changed behind our back. */
-+        dir_fd = path_open_parent_safe(path);
-+        if (dir_fd < 0)
-+                return dir_fd;
-+
-+        bn = basename(path);
-+
-+        RUN_WITH_UMASK(0000) {
-+                mac_selinux_create_file_prepare(path, S_IFREG);
-+                fd = openat(dir_fd, bn, O_CREAT|O_NOFOLLOW|O_NONBLOCK|O_CLOEXEC|O_WRONLY|O_NOCTTY, i->mode);
-+                mac_selinux_create_file_clear();
-+        }
-+
-+        if (fd < 0) {
-+                if (errno != EROFS)
-+                        return log_error_errno(errno, "Failed to open/create file %s: %m", path);
-+
-+                /* On a read-only filesystem, we don't want to fail if the
-+                 * target is already empty and the perms are set. So we still
-+                 * proceed with the sanity checks and let the remaining
-+                 * operations fail with EROFS if they try to modify the target
-+                 * file. */
-+
-+                fd = openat(dir_fd, bn, O_NOFOLLOW|O_CLOEXEC|O_PATH, i->mode);
-+                if (fd < 0) {
-+                        if (errno == ENOENT) {
-+                                log_error("Cannot create file %s on a read-only file system.", path);
-+                                return -EROFS;
-+                        }
-+
-+                        return log_error_errno(errno, "Failed to re-open file %s: %m", path);
-+                }
-
--                return log_error_errno(r, "Failed to create file %s: %m", path);
-+                erofs = true;
-         }
-
-+        if (fstat(fd, &stbuf) < 0)
-+                return log_error_errno(errno, "stat(%s) failed: %m", path);
-+
-+        if (!S_ISREG(stbuf.st_mode)) {
-+                log_error("%s exists and is not a regular file.", path);
-+                return -EEXIST;
-+        }
-+
-+        if (stbuf.st_size > 0) {
-+                if (ftruncate(fd, 0) < 0) {
-+                        r = erofs ? -EROFS : -errno;
-+                        return log_error_errno(r, "Failed to truncate file %s: %m", path);
-+                }
-+        } else
-+                st = &stbuf;
-+
-+        log_debug("\"%s\" has been created.", path);
-+
-         if (i->argument) {
--                log_debug("%s to \"%s\".", i->type == CREATE_FILE ? "Appending" : "Writing", path);
-+                log_debug("Writing to \"%s\".", path);
-
-                 r = loop_write(fd, i->argument, strlen(i->argument), false);
--                if (r < 0)
--                        return log_error_errno(r, "Failed to write file \"%s\": %m", path);
-+                if (r < 0) {
-+                        r = erofs ? -EROFS : r;
-+                        return log_error_errno(r, "Failed to write file %s: %m", path);
-+                }
-+        }
-+
-+        return fd_set_perms(i, fd, st);
-+}
-+
-+static int copy_files(Item *i) {
-+        _cleanup_close_ int dfd = -1, fd = -1;
-+        char *bn;
-+        int r;
-+
-+        log_debug("Copying tree \"%s\" to \"%s\".", i->argument, i->path);
-+
-+        bn = basename(i->path);
-+
-+        /* Validate the path and use the returned directory fd for copying the
-+         * target so we're sure that the path can't be changed behind our
-+         * back. */
-+        dfd = path_open_parent_safe(i->path);
-+        if (dfd < 0)
-+                return dfd;
-+
-+        r = copy_tree_at(AT_FDCWD, i->argument,
-+                         dfd, bn,
-+                         i->uid_set ? i->uid : UID_INVALID,
-+                         i->gid_set ? i->gid : GID_INVALID,
-+                         COPY_REFLINK);
-+        if (r < 0) {
-+                struct stat a, b;
-+
-+                /* If the target already exists on read-only filesystems, trying
-+                 * to create the target will not fail with EEXIST but with
-+                 * EROFS. */
-+                if (r == -EROFS && faccessat(dfd, bn, F_OK, AT_SYMLINK_NOFOLLOW) == 0)
-+                        r = -EEXIST;
-+
-+                if (r != -EEXIST)
-+                        return log_error_errno(r, "Failed to copy files to %s: %m", i->path);
-+
-+                if (stat(i->argument, &a) < 0)
-+                        return log_error_errno(errno, "stat(%s) failed: %m", i->argument);
-+
-+                if (fstatat(dfd, bn, &b, AT_SYMLINK_NOFOLLOW) < 0)
-+                        return log_error_errno(errno, "stat(%s) failed: %m", i->path);
-+
-+                if ((a.st_mode ^ b.st_mode) & S_IFMT) {
-+                        log_debug("Can't copy to %s, file exists already and is of different type", i->path);
-+                        return 0;
-+                }
-+        }
-+
-+        fd = openat(dfd, bn, O_NOFOLLOW|O_CLOEXEC|O_PATH);
-+        if (fd < 0)
-+                return log_error_errno(errno, "Failed to openat(%s): %m", i->path);
-+
-+        return fd_set_perms(i, fd, NULL);
-+}
-+
-+typedef enum {
-+        CREATION_NORMAL,
-+        CREATION_EXISTING,
-+        CREATION_FORCE,
-+        _CREATION_MODE_MAX,
-+        _CREATION_MODE_INVALID = -1
-+} CreationMode;
-+
-+static const char *creation_mode_verb_table[_CREATION_MODE_MAX] = {
-+        [CREATION_NORMAL] = "Created",
-+        [CREATION_EXISTING] = "Found existing",
-+        [CREATION_FORCE] = "Created replacement",
-+};
-+
-+DEFINE_PRIVATE_STRING_TABLE_LOOKUP_TO_STRING(creation_mode_verb, CreationMode);
-+
-+static int create_directory_or_subvolume(const char *path, mode_t mode, bool subvol) {
-+        _cleanup_close_ int pfd = -1;
-+        CreationMode creation;
-+        int r;
-+
-+        assert(path);
-+
-+        pfd = path_open_parent_safe(path);
-+        if (pfd < 0)
-+                return pfd;
-+
-+        if (subvol) {
-+                if (btrfs_is_subvol(empty_to_root(arg_root)) <= 0)
-+
-+                        /* Don't create a subvolume unless the root directory is
-+                         * one, too. We do this under the assumption that if the
-+                         * root directory is just a plain directory (i.e. very
-+                         * light-weight), we shouldn't try to split it up into
-+                         * subvolumes (i.e. more heavy-weight). Thus, chroot()
-+                         * environments and suchlike will get a full brtfs
-+                         * subvolume set up below their tree only if they
-+                         * specifically set up a btrfs subvolume for the root
-+                         * dir too. */
-+
-+                        subvol = false;
-+                else {
-+                        RUN_WITH_UMASK((~mode) & 0777)
-+                                r = btrfs_subvol_make_fd(pfd, basename(path));
-+                }
-         } else
--                log_debug("\"%s\" has been created.", path);
-+                r = 0;
-
--        fd = safe_close(fd);
-+        if (!subvol || r == -ENOTTY)
-+                RUN_WITH_UMASK(0000)
-+                        r = mkdirat_label(pfd, basename(path), mode);
-
-- done:
--        if (stat(path, &st) < 0)
--                return log_error_errno(errno, "stat(%s) failed: %m", path);
-+        if (r < 0) {
-+                int k;
-+
-+                if (!IN_SET(r, -EEXIST, -EROFS))
-+                        return log_error_errno(r, "Failed to create directory or subvolume \"%s\": %m", path);
-+
-+                k = is_dir_fd(pfd);
-+                if (k == -ENOENT && r == -EROFS)
-+                        return log_error_errno(r, "%s does not exist and cannot be created as the file system is read-only.", path);
-+                if (k < 0)
-+                        return log_error_errno(k, "Failed to check if %s exists: %m", path);
-+                if (!k) {
-+                        log_warning("\"%s\" already exists and is not a directory.", path);
-+                        return -EEXIST;
-+                }
-+
-+                creation = CREATION_EXISTING;
-+        } else
-+                creation = CREATION_NORMAL;
-+
-+        log_debug("%s directory \"%s\".", creation_mode_verb_to_string(creation), path);
-+
-+        r = openat(pfd, basename(path), O_NOCTTY|O_CLOEXEC|O_DIRECTORY);
-+        if (r < 0)
-+                return -errno;
-+        return r;
-+}
-+
-+static int create_directory(Item *i, const char *path) {
-+        _cleanup_close_ int fd = -1;
-+
-+        assert(i);
-+        assert(IN_SET(i->type, CREATE_DIRECTORY, TRUNCATE_DIRECTORY));
-
-- check_mode:
--        if (!S_ISREG(st.st_mode)) {
--                log_error("%s is not a file.", path);
-+        fd = create_directory_or_subvolume(path, i->mode, false);
-+        if (fd == -EEXIST)
-+                return 0;
-+        if (fd < 0)
-+                return fd;
-+
-+        return fd_set_perms(i, fd, NULL);
-+}
-+
-+static int create_subvolume(Item *i, const char *path) {
-+        _cleanup_close_ int fd = -1;
-+        int r, q = 0;
-+
-+        assert(i);
-+        assert(IN_SET(i->type, CREATE_SUBVOLUME, CREATE_SUBVOLUME_NEW_QUOTA, CREATE_SUBVOLUME_INHERIT_QUOTA));
-+
-+        fd = create_directory_or_subvolume(path, i->mode, true);
-+        if (fd == -EEXIST)
-+                return 0;
-+        if (fd < 0)
-+                return fd;
-+
-+        if (IN_SET(i->type, CREATE_SUBVOLUME_NEW_QUOTA, CREATE_SUBVOLUME_INHERIT_QUOTA)) {
-+                r = btrfs_subvol_auto_qgroup_fd(fd, 0, i->type == CREATE_SUBVOLUME_NEW_QUOTA);
-+                if (r == -ENOTTY)
-+                        log_debug_errno(r, "Couldn't adjust quota for subvolume \"%s\" (unsupported fs or dir not a subvolume): %m", i->path);
-+                else if (r == -EROFS)
-+                        log_debug_errno(r, "Couldn't adjust quota for subvolume \"%s\" (fs is read-only).", i->path);
-+                else if (r == -ENOPROTOOPT)
-+                        log_debug_errno(r, "Couldn't adjust quota for subvolume \"%s\" (quota support is disabled).", i->path);
-+                else if (r < 0)
-+                        q = log_error_errno(r, "Failed to adjust quota for subvolume \"%s\": %m", i->path);
-+                else if (r > 0)
-+                        log_debug("Adjusted quota for subvolume \"%s\".", i->path);
-+                else if (r == 0)
-+                        log_debug("Quota for subvolume \"%s\" already in place, no change made.", i->path);
-+        }
-+
-+        r = fd_set_perms(i, fd, NULL);
-+        if (q < 0)
-+                return q;
-+
-+        return r;
-+}
-+
-+static int empty_directory(Item *i, const char *path) {
-+        int r;
-+
-+        assert(i);
-+        assert(i->type == EMPTY_DIRECTORY);
-+
-+        r = is_dir(path, false);
-+        if (r == -ENOENT) {
-+                /* Option "e" operates only on existing objects. Do not
-+                 * print errors about non-existent files or directories */
-+                log_debug("Skipping missing directory: %s", path);
-+                return 0;
-+        }
-+        if (r < 0)
-+                return log_error_errno(r, "is_dir() failed on path %s: %m", path);
-+        if (r == 0) {
-+                log_error("'%s' already exists and is not a directory.", path);
-                 return -EEXIST;
-         }
-
--        r = path_set_perms(i, path);
--        if (r < 0)
--                return r;
-+        return path_set_perms(i, path);
-+}
-
--        return 0;
-+static int create_device(Item *i, mode_t file_type) {
-+        _cleanup_close_ int dfd = -1, fd = -1;
-+        CreationMode creation;
-+        char *bn;
-+        int r;
-+
-+        assert(i);
-+        assert(IN_SET(file_type, S_IFBLK, S_IFCHR));
-+
-+        bn = basename(i->path);
-+
-+        /* Validate the path and use the returned directory fd for copying the
-+         * target so we're sure that the path can't be changed behind our
-+         * back. */
-+        dfd = path_open_parent_safe(i->path);
-+        if (dfd < 0)
-+                return dfd;
-+
-+        RUN_WITH_UMASK(0000) {
-+                mac_selinux_create_file_prepare(i->path, file_type);
-+                r = mknodat(dfd, bn, i->mode | file_type, i->major_minor);
-+                mac_selinux_create_file_clear();
-+        }
-+
-+        if (r < 0) {
-+                struct stat st;
-+
-+                if (errno == EPERM) {
-+                        log_debug("We lack permissions, possibly because of cgroup configuration; "
-+                                  "skipping creation of device node %s.", i->path);
-+                        return 0;
-+                }
-+
-+                if (errno != EEXIST)
-+                        return log_error_errno(errno, "Failed to create device node %s: %m", i->path);
-+
-+                if (fstatat(dfd, bn, &st, 0) < 0)
-+                        return log_error_errno(errno, "stat(%s) failed: %m", i->path);
-+
-+                if ((st.st_mode & S_IFMT) != file_type) {
-+
-+                        if (i->force) {
-+
-+                                RUN_WITH_UMASK(0000) {
-+                                        mac_selinux_create_file_prepare(i->path, file_type);
-+                                        /* FIXME: need to introduce mknodat_atomic() */
-+                                        r = mknod_atomic(i->path, i->mode | file_type, i->major_minor);
-+                                        mac_selinux_create_file_clear();
-+                                }
-+
-+                                if (r < 0)
-+                                        return log_error_errno(r, "Failed to create device node \"%s\": %m", i->path);
-+                                creation = CREATION_FORCE;
-+                        } else {
-+                                log_debug("%s is not a device node.", i->path);
-+                                return 0;
-+                        }
-+                } else
-+                        creation = CREATION_EXISTING;
-+        } else
-+                creation = CREATION_NORMAL;
-+
-+        log_debug("%s %s device node \"%s\" %u:%u.",
-+                  creation_mode_verb_to_string(creation),
-+                  i->type == CREATE_BLOCK_DEVICE ? "block" : "char",
-+                  i->path, major(i->mode), minor(i->mode));
-+
-+        fd = openat(dfd, bn, O_NOFOLLOW|O_CLOEXEC|O_PATH);
-+        if (fd < 0)
-+                return log_error_errno(errno, "Failed to openat(%s): %m", i->path);
-+
-+        return fd_set_perms(i, fd, NULL);
-+}
-+
-+static int create_fifo(Item *i, const char *path) {
-+        _cleanup_close_ int pfd = -1, fd = -1;
-+        CreationMode creation;
-+        struct stat st;
-+        char *bn;
-+        int r;
-+
-+        pfd = path_open_parent_safe(path);
-+        if (pfd < 0)
-+                return pfd;
-+
-+        bn = basename(path);
-+
-+        RUN_WITH_UMASK(0000) {
-+                mac_selinux_create_file_prepare(path, S_IFIFO);
-+                r = mkfifoat(pfd, bn, i->mode);
-+                mac_selinux_create_file_clear();
-+        }
-+
-+        if (r < 0) {
-+                if (errno != EEXIST)
-+                        return log_error_errno(errno, "Failed to create fifo %s: %m", path);
-+
-+                if (fstatat(pfd, bn, &st, AT_SYMLINK_NOFOLLOW) < 0)
-+                        return log_error_errno(errno, "stat(%s) failed: %m", path);
-+
-+                if (!S_ISFIFO(st.st_mode)) {
-+
-+                        if (i->force) {
-+                                RUN_WITH_UMASK(0000) {
-+                                        mac_selinux_create_file_prepare(path, S_IFIFO);
-+                                        r = mkfifoat_atomic(pfd, bn, i->mode);
-+                                        mac_selinux_create_file_clear();
-+                                }
-+
-+                                if (r < 0)
-+                                        return log_error_errno(r, "Failed to create fifo %s: %m", path);
-+                                creation = CREATION_FORCE;
-+                        } else {
-+                                log_warning("\"%s\" already exists and is not a fifo.", path);
-+                                return 0;
-+                        }
-+                } else
-+                        creation = CREATION_EXISTING;
-+        } else
-+                creation = CREATION_NORMAL;
-+
-+        log_debug("%s fifo \"%s\".", creation_mode_verb_to_string(creation), path);
-+
-+        fd = openat(pfd, bn, O_NOFOLLOW|O_CLOEXEC|O_PATH);
-+        if (fd < 0)
-+                return log_error_errno(fd, "Failed to openat(%s): %m", path);
-+
-+        return fd_set_perms(i, fd, NULL);
- }
-
- typedef int (*action_t)(Item *, const char *);
- typedef int (*fdaction_t)(Item *, int fd, const struct stat *st);
-
--static int item_do(Item *i, int fd, const struct stat *st, fdaction_t action) {
-+static int item_do(Item *i, int fd, fdaction_t action) {
-+        struct stat st;
-         int r = 0, q;
-
-         assert(i);
-         assert(fd >= 0);
--        assert(st);
-+
-+        if (fstat(fd, &st) < 0) {
-+                r = -errno;
-+                goto finish;
-+        }
-
-         /* This returns the first error we run into, but nevertheless
-          * tries to go on */
--        r = action(i, fd, st);
-+        r = action(i, fd, &st);
-
--        if (S_ISDIR(st->st_mode)) {
-+        if (S_ISDIR(st.st_mode)) {
-                 char procfs_path[STRLEN("/proc/self/fd/") + DECIMAL_STR_MAX(int)];
-                 _cleanup_closedir_ DIR *d = NULL;
-                 struct dirent *de;
-@@ -1321,16 +1827,15 @@
-                 }
-
-                 FOREACH_DIRENT_ALL(de, d, q = -errno; goto finish) {
--                        struct stat de_st;
-                         int de_fd;
-
-                         if (dot_or_dot_dot(de->d_name))
-                                 continue;
-
-                         de_fd = openat(fd, de->d_name, O_NOFOLLOW|O_CLOEXEC|O_PATH);
--                        if (de_fd >= 0 && fstat(de_fd, &de_st) >= 0)
-+                        if (de_fd >= 0)
-                                 /* pass ownership of dirent fd over  */
--                                q = item_do(i, de_fd, &de_st, action);
-+                                q = item_do(i, de_fd, action);
-                         else
-                                 q = -errno;
-
-@@ -1376,7 +1881,6 @@
-
-         STRV_FOREACH(fn, g.gl_pathv) {
-                 _cleanup_close_ int fd = -1;
--                struct stat st;
-
-                 /* Make sure we won't trigger/follow file object (such as
-                  * device nodes, automounts, ...) pointed out by 'fn' with
-@@ -1389,12 +1893,7 @@
-                         continue;
-                 }
-
--                if (fstat(fd, &st) < 0) {
--                        r = r ?: -errno;
--                        continue;
--                }
--
--                k = item_do(i, fd, &st, action);
-+                k = item_do(i, fd, action);
-                 if (k < 0 && r == 0)
-                         r = k;
-
-@@ -1405,27 +1904,9 @@
-         return r;
- }
-
--typedef enum {
--        CREATION_NORMAL,
--        CREATION_EXISTING,
--        CREATION_FORCE,
--        _CREATION_MODE_MAX,
--        _CREATION_MODE_INVALID = -1
--} CreationMode;
--
--static const char *creation_mode_verb_table[_CREATION_MODE_MAX] = {
--        [CREATION_NORMAL] = "Created",
--        [CREATION_EXISTING] = "Found existing",
--        [CREATION_FORCE] = "Created replacement",
--};
--
--DEFINE_PRIVATE_STRING_TABLE_LOOKUP_TO_STRING(creation_mode_verb, CreationMode);
--
- static int create_item(Item *i) {
--        struct stat st;
--        int r = 0;
--        int q = 0;
-         CreationMode creation;
-+        int r = 0;
-
-         assert(i);
-
-@@ -1440,50 +1921,30 @@
-                 return 0;
-
-         case CREATE_FILE:
--        case TRUNCATE_FILE:
-                 RUN_WITH_UMASK(0000)
-                         (void) mkdir_parents_label(i->path, 0755);
-
--                r = write_one_file(i, i->path);
-+                r = create_file(i, i->path);
-                 if (r < 0)
-                         return r;
-                 break;
-
--        case COPY_FILES:
-+        case TRUNCATE_FILE:
-                 RUN_WITH_UMASK(0000)
-                         (void) mkdir_parents_label(i->path, 0755);
-
--                log_debug("Copying tree \"%s\" to \"%s\".", i->argument, i->path);
--                r = copy_tree(i->argument, i->path,
--                              i->uid_set ? i->uid : UID_INVALID,
--                              i->gid_set ? i->gid : GID_INVALID,
--                              COPY_REFLINK);
--
--                if (r == -EROFS && stat(i->path, &st) == 0)
--                        r = -EEXIST;
--
--                if (r < 0) {
--                        struct stat a, b;
--
--                        if (r != -EEXIST)
--                                return log_error_errno(r, "Failed to copy files to %s: %m", i->path);
--
--                        if (stat(i->argument, &a) < 0)
--                                return log_error_errno(errno, "stat(%s) failed: %m", i->argument);
--
--                        if (stat(i->path, &b) < 0)
--                                return log_error_errno(errno, "stat(%s) failed: %m", i->path);
-+                r = truncate_file(i, i->path);
-+                if (r < 0)
-+                        return r;
-+                break;
-
--                        if ((a.st_mode ^ b.st_mode) & S_IFMT) {
--                                log_debug("Can't copy to %s, file exists already and is of different type", i->path);
--                                return 0;
--                        }
--                }
-+        case COPY_FILES:
-+                RUN_WITH_UMASK(0000)
-+                        (void) mkdir_parents_label(i->path, 0755);
-
--                r = path_set_perms(i, i->path);
-+                r = copy_files(i);
-                 if (r < 0)
-                         return r;
--
-                 break;
-
-         case WRITE_FILE:
-@@ -1495,132 +1956,38 @@
-
-         case CREATE_DIRECTORY:
-         case TRUNCATE_DIRECTORY:
-+                RUN_WITH_UMASK(0000)
-+                        (void) mkdir_parents_label(i->path, 0755);
-+
-+                r = create_directory(i, i->path);
-+                if (r < 0)
-+                        return r;
-+                break;
-+
-         case CREATE_SUBVOLUME:
-         case CREATE_SUBVOLUME_INHERIT_QUOTA:
-         case CREATE_SUBVOLUME_NEW_QUOTA:
-                 RUN_WITH_UMASK(0000)
-                         (void) mkdir_parents_label(i->path, 0755);
-
--                if (IN_SET(i->type, CREATE_SUBVOLUME, CREATE_SUBVOLUME_INHERIT_QUOTA, CREATE_SUBVOLUME_NEW_QUOTA)) {
--
--                        if (btrfs_is_subvol(empty_to_root(arg_root)) <= 0)
--
--                                /* Don't create a subvolume unless the
--                                 * root directory is one, too. We do
--                                 * this under the assumption that if
--                                 * the root directory is just a plain
--                                 * directory (i.e. very light-weight),
--                                 * we shouldn't try to split it up
--                                 * into subvolumes (i.e. more
--                                 * heavy-weight). Thus, chroot()
--                                 * environments and suchlike will get
--                                 * a full brtfs subvolume set up below
--                                 * their tree only if they
--                                 * specifically set up a btrfs
--                                 * subvolume for the root dir too. */
--
--                                r = -ENOTTY;
--                        else {
--                                RUN_WITH_UMASK((~i->mode) & 0777)
--                                        r = btrfs_subvol_make(i->path);
--                        }
--                } else
--                        r = 0;
--
--                if (IN_SET(i->type, CREATE_DIRECTORY, TRUNCATE_DIRECTORY) || r == -ENOTTY)
--                        RUN_WITH_UMASK(0000)
--                                r = mkdir_label(i->path, i->mode);
--
--                if (r < 0) {
--                        int k;
--
--                        if (!IN_SET(r, -EEXIST, -EROFS))
--                                return log_error_errno(r, "Failed to create directory or subvolume \"%s\": %m", i->path);
--
--                        k = is_dir(i->path, false);
--                        if (k == -ENOENT && r == -EROFS)
--                                return log_error_errno(r, "%s does not exist and cannot be created as the file system is read-only.", i->path);
--                        if (k < 0)
--                                return log_error_errno(k, "Failed to check if %s exists: %m", i->path);
--                        if (!k) {
--                                log_warning("\"%s\" already exists and is not a directory.", i->path);
--                                return 0;
--                        }
--
--                        creation = CREATION_EXISTING;
--                } else
--                        creation = CREATION_NORMAL;
--
--                log_debug("%s directory \"%s\".", creation_mode_verb_to_string(creation), i->path);
--
--                if (IN_SET(i->type, CREATE_SUBVOLUME_NEW_QUOTA, CREATE_SUBVOLUME_INHERIT_QUOTA)) {
--                        r = btrfs_subvol_auto_qgroup(i->path, 0, i->type == CREATE_SUBVOLUME_NEW_QUOTA);
--                        if (r == -ENOTTY)
--                                log_debug_errno(r, "Couldn't adjust quota for subvolume \"%s\" (unsupported fs or dir not a subvolume): %m", i->path);
--                        else if (r == -EROFS)
--                                log_debug_errno(r, "Couldn't adjust quota for subvolume \"%s\" (fs is read-only).", i->path);
--                        else if (r == -ENOPROTOOPT)
--                                log_debug_errno(r, "Couldn't adjust quota for subvolume \"%s\" (quota support is disabled).", i->path);
--                        else if (r < 0)
--                                q = log_error_errno(r, "Failed to adjust quota for subvolume \"%s\": %m", i->path);
--                        else if (r > 0)
--                                log_debug("Adjusted quota for subvolume \"%s\".", i->path);
--                        else if (r == 0)
--                                log_debug("Quota for subvolume \"%s\" already in place, no change made.", i->path);
--                }
-+                r = create_subvolume(i, i->path);
-+                if (r < 0)
-+                        return r;
-+                break;
-
--                _fallthrough_;
-         case EMPTY_DIRECTORY:
--                r = glob_item(i, path_set_perms);
--                if (q < 0)
--                        return q;
-+                r = glob_item(i, empty_directory);
-                 if (r < 0)
-                         return r;
--
-                 break;
-
-         case CREATE_FIFO:
--                RUN_WITH_UMASK(0000) {
-+                RUN_WITH_UMASK(0000)
-                         (void) mkdir_parents_label(i->path, 0755);
-
--                        mac_selinux_create_file_prepare(i->path, S_IFIFO);
--                        r = mkfifo(i->path, i->mode);
--                        mac_selinux_create_file_clear();
--                }
--
--                if (r < 0) {
--                        if (errno != EEXIST)
--                                return log_error_errno(errno, "Failed to create fifo %s: %m", i->path);
--
--                        if (lstat(i->path, &st) < 0)
--                                return log_error_errno(errno, "stat(%s) failed: %m", i->path);
--
--                        if (!S_ISFIFO(st.st_mode)) {
--
--                                if (i->force) {
--                                        RUN_WITH_UMASK(0000) {
--                                                mac_selinux_create_file_prepare(i->path, S_IFIFO);
--                                                r = mkfifo_atomic(i->path, i->mode);
--                                                mac_selinux_create_file_clear();
--                                        }
--
--                                        if (r < 0)
--                                                return log_error_errno(r, "Failed to create fifo %s: %m", i->path);
--                                        creation = CREATION_FORCE;
--                                } else {
--                                        log_warning("\"%s\" already exists and is not a fifo.", i->path);
--                                        return 0;
--                                }
--                        } else
--                                creation = CREATION_EXISTING;
--                } else
--                        creation = CREATION_NORMAL;
--                log_debug("%s fifo \"%s\".", creation_mode_verb_to_string(creation), i->path);
--
--                r = path_set_perms(i, i->path);
-+                r = create_fifo(i, i->path);
-                 if (r < 0)
-                         return r;
--
-                 break;
-
-         case CREATE_SYMLINK: {
-@@ -1672,9 +2039,7 @@
-         }
-
-         case CREATE_BLOCK_DEVICE:
--        case CREATE_CHAR_DEVICE: {
--                mode_t file_type;
--
-+        case CREATE_CHAR_DEVICE:
-                 if (have_effective_cap(CAP_MKNOD) == 0) {
-                         /* In a container we lack CAP_MKNOD. We
-                         shouldn't attempt to create the device node in
-@@ -1688,60 +2053,11 @@
-                 RUN_WITH_UMASK(0000)
-                         (void) mkdir_parents_label(i->path, 0755);
-
--                file_type = i->type == CREATE_BLOCK_DEVICE ? S_IFBLK : S_IFCHR;
--
--                RUN_WITH_UMASK(0000) {
--                        mac_selinux_create_file_prepare(i->path, file_type);
--                        r = mknod(i->path, i->mode | file_type, i->major_minor);
--                        mac_selinux_create_file_clear();
--                }
--
--                if (r < 0) {
--                        if (errno == EPERM) {
--                                log_debug("We lack permissions, possibly because of cgroup configuration; "
--                                          "skipping creation of device node %s.", i->path);
--                                return 0;
--                        }
--
--                        if (errno != EEXIST)
--                                return log_error_errno(errno, "Failed to create device node %s: %m", i->path);
--
--                        if (lstat(i->path, &st) < 0)
--                                return log_error_errno(errno, "stat(%s) failed: %m", i->path);
--
--                        if ((st.st_mode & S_IFMT) != file_type) {
--
--                                if (i->force) {
--
--                                        RUN_WITH_UMASK(0000) {
--                                                mac_selinux_create_file_prepare(i->path, file_type);
--                                                r = mknod_atomic(i->path, i->mode | file_type, i->major_minor);
--                                                mac_selinux_create_file_clear();
--                                        }
--
--                                        if (r < 0)
--                                                return log_error_errno(r, "Failed to create device node \"%s\": %m", i->path);
--                                        creation = CREATION_FORCE;
--                                } else {
--                                        log_debug("%s is not a device node.", i->path);
--                                        return 0;
--                                }
--                        } else
--                                creation = CREATION_EXISTING;
--                } else
--                        creation = CREATION_NORMAL;
--
--                log_debug("%s %s device node \"%s\" %u:%u.",
--                          creation_mode_verb_to_string(creation),
--                          i->type == CREATE_BLOCK_DEVICE ? "block" : "char",
--                          i->path, major(i->mode), minor(i->mode));
--
--                r = path_set_perms(i, i->path);
-+                r = create_device(i, i->type == CREATE_BLOCK_DEVICE ? S_IFBLK : S_IFCHR);
-                 if (r < 0)
-                         return r;
-
-                 break;
--        }
-
-         case ADJUST_MODE:
-         case RELABEL_PATH:
---- /dev/null
-+++ b/test/TEST-22-TMPFILES/test-02.sh
-@@ -0,0 +1,95 @@
-+#! /bin/bash
-+#
-+# Basic tests for types creating directories
-+#
-+
-+set -e
-+set -x
-+
-+rm -fr /tmp/{d,D,e}
-+mkdir  /tmp/{d,D,e}
-+
-+#
-+# 'd'
-+#
-+mkdir /tmp/d/2
-+chmod 777 /tmp/d/2
-+
-+systemd-tmpfiles --create - <<EOF
-+d     /tmp/d/1    0755 daemon daemon - -
-+d     /tmp/d/2    0755 daemon daemon - -
-+EOF
-+
-+test -d /tmp/d/1
-+test $(stat -c %U:%G:%a /tmp/d/1) = "daemon:daemon:755"
-+
-+test -d /tmp/d/2
-+test $(stat -c %U:%G:%a /tmp/d/2) = "daemon:daemon:755"
-+
-+#
-+# 'D'
-+#
-+mkdir /tmp/D/2
-+chmod 777 /tmp/D/2
-+touch /tmp/D/2/foo
-+
-+systemd-tmpfiles --create - <<EOF
-+D     /tmp/D/1    0755 daemon daemon - -
-+D     /tmp/D/2    0755 daemon daemon - -
-+EOF
-+
-+test -d /tmp/D/1
-+test $(stat -c %U:%G:%a /tmp/D/1) = "daemon:daemon:755"
-+
-+test -d /tmp/D/2
-+test $(stat -c %U:%G:%a /tmp/D/2) = "daemon:daemon:755"
-+
-+systemd-tmpfiles --remove - <<EOF
-+D     /tmp/D/2    0755 daemon daemon - -
-+EOF
-+
-+# the content of '2' should be removed
-+test "$(echo /tmp/D/2/*)" = "/tmp/D/2/*"
-+
-+#
-+# 'e'
-+#
-+mkdir -p /tmp/e/2/{d1,d2}
-+chmod 777 /tmp/e/2
-+chmod 777 /tmp/e/2/d*
-+
-+systemd-tmpfiles --create - <<EOF
-+e     /tmp/e/1     0755 daemon daemon - -
-+e     /tmp/e/2/*   0755 daemon daemon - -
-+EOF
-+
-+! test -d /tmp/e/1
-+
-+test -d /tmp/e/2
-+test $(stat -c %U:%G:%a /tmp/e/2) = "root:root:777"
-+
-+test -d /tmp/e/2/d1
-+test $(stat -c %U:%G:%a /tmp/e/2/d1) = "daemon:daemon:755"
-+test -d /tmp/e/2/d2
-+test $(stat -c %U:%G:%a /tmp/e/2/d2) = "daemon:daemon:755"
-+
-+# 'e' operates on directories only
-+mkdir -p /tmp/e/3/{d1,d2}
-+chmod 777 /tmp/e/3
-+chmod 777 /tmp/e/3/d*
-+touch /tmp/e/3/f1
-+chmod 644 /tmp/e/3/f1
-+
-+! systemd-tmpfiles --create - <<EOF
-+e     /tmp/e/3/*   0755 daemon daemon - -
-+EOF
-+
-+# the directories should have been processed although systemd-tmpfiles failed
-+# previously due to the presence of a file.
-+test -d /tmp/e/3/d1
-+test $(stat -c %U:%G:%a /tmp/e/3/d1) = "daemon:daemon:755"
-+test -d /tmp/e/3/d2
-+test $(stat -c %U:%G:%a /tmp/e/3/d2) = "daemon:daemon:755"
-+
-+test -f /tmp/e/3/f1
-+test $(stat -c %U:%G:%a /tmp/e/3/f1) = "root:root:644"
---- /dev/null
-+++ b/test/TEST-22-TMPFILES/test-03.sh
-@@ -0,0 +1,236 @@
-+#! /bin/bash
-+#
-+# Basic tests for types creating/writing files
-+#
-+
-+set -e
-+set -x
-+
-+rm -fr /tmp/{f,F,w}
-+mkdir  /tmp/{f,F,w}
-+touch /tmp/file-owned-by-root
-+
-+#
-+# 'f'
-+#
-+systemd-tmpfiles --create - <<EOF
-+f     /tmp/f/1    0644 - - - -
-+f     /tmp/f/2    0644 - - - This string should be written
-+EOF
-+
-+### '1' should exist and be empty
-+test -f /tmp/f/1; ! test -s /tmp/f/1
-+test $(stat -c %U:%G:%a /tmp/f/1) = "root:root:644"
-+
-+test $(stat -c %U:%G:%a /tmp/f/2) = "root:root:644"
-+test "$(< /tmp/f/2)" = "This string should be written"
-+
-+### The perms are supposed to be updated even if the file already exists.
-+systemd-tmpfiles --create - <<EOF
-+f     /tmp/f/1    0666 nobody nogroup - This string should not be written
-+EOF
-+
-+# file should be empty
-+! test -s /tmp/f/1
-+test $(stat -c %U:%G:%a /tmp/f/1) = "nobody:nogroup:666"
-+
-+### But we shouldn't try to set perms on an existing file which is not a
-+### regular one.
-+mkfifo /tmp/f/fifo
-+chmod 644 /tmp/f/fifo
-+
-+! systemd-tmpfiles --create - <<EOF
-+f     /tmp/f/fifo    0666 nobody nogroup - This string should not be written
-+EOF
-+
-+test -p /tmp/f/fifo
-+test $(stat -c %U:%G:%a /tmp/f/fifo) = "root:root:644"
-+
-+### 'f' should not follow symlinks.
-+ln -s missing /tmp/f/dangling
-+ln -s /tmp/file-owned-by-root /tmp/f/symlink
-+
-+! systemd-tmpfiles --create - <<EOF
-+f     /tmp/f/dangling    0644 nobody nogroup - -
-+f     /tmp/f/symlink     0644 nobody nogroup - -
-+EOF
-+! test -e /tmp/f/missing
-+test $(stat -c %U:%G:%a /tmp/file-owned-by-root) = "root:root:644"
-+
-+### Handle read-only filesystem gracefully: we shouldn't fail if the target
-+### already exists and have the correct perms.
-+mkdir /tmp/f/rw-fs
-+mkdir /tmp/f/ro-fs
-+
-+touch /tmp/f/rw-fs/foo
-+chmod 644 /tmp/f/rw-fs/foo
-+
-+mount -o bind,ro /tmp/f/rw-fs /tmp/f/ro-fs
-+
-+systemd-tmpfiles --create - <<EOF
-+f     /tmp/f/ro-fs/foo    0644 - - - - This string should not be written
-+EOF
-+test -f /tmp/f/ro-fs/foo; ! test -s /tmp/f/ro-fs/foo
-+
-+! systemd-tmpfiles --create - <<EOF
-+f     /tmp/f/ro-fs/foo    0666 - - - -
-+EOF
-+test $(stat -c %U:%G:%a /tmp/f/fifo) = "root:root:644"
-+
-+! systemd-tmpfiles --create - <<EOF
-+f     /tmp/f/ro-fs/bar    0644 - - - -
-+EOF
-+! test -e /tmp/f/ro-fs/bar
-+
-+### 'f' shouldn't follow unsafe paths.
-+mkdir /tmp/f/nobody
-+ln -s /root /tmp/f/nobody/unsafe-symlink
-+chown -R --no-dereference nobody:nogroup /tmp/f/nobody
-+
-+! systemd-tmpfiles --create - <<EOF
-+f     /tmp/f/nobody/unsafe-symlink/exploit    0644 nobody nogroup - -
-+EOF
-+! test -e /tmp/f/nobody/unsafe-symlink/exploit
-+
-+#
-+# 'F'
-+#
-+echo "This should be truncated" >/tmp/F/truncated
-+echo "This should be truncated" >/tmp/F/truncated-with-content
-+
-+systemd-tmpfiles --create - <<EOF
-+F     /tmp/F/created                0644 - - - -
-+F     /tmp/F/created-with-content   0644 - - - new content
-+F     /tmp/F/truncated              0666 nobody nogroup - -
-+F     /tmp/F/truncated-with-content 0666 nobody nogroup - new content
-+EOF
-+
-+test -f /tmp/F/created; ! test -s /tmp/F/created
-+test -f /tmp/F/created-with-content
-+test "$(< /tmp/F/created-with-content)" = "new content"
-+test -f /tmp/F/truncated; ! test -s /tmp/F/truncated
-+test $(stat -c %U:%G:%a /tmp/F/truncated) = "nobody:nogroup:666"
-+test -s /tmp/F/truncated-with-content
-+test $(stat -c %U:%G:%a /tmp/F/truncated-with-content) = "nobody:nogroup:666"
-+
-+### We shouldn't try to truncate anything but regular files since the behavior is
-+### unspecified in the other cases.
-+mkfifo /tmp/F/fifo
-+
-+! systemd-tmpfiles --create - <<EOF
-+F     /tmp/F/fifo                0644 - - - -
-+EOF
-+
-+test -p /tmp/F/fifo
-+
-+### 'F' should not follow symlinks.
-+ln -s missing /tmp/F/dangling
-+ln -s /tmp/file-owned-by-root /tmp/F/symlink
-+
-+! systemd-tmpfiles --create - <<EOF
-+f     /tmp/F/dangling    0644 nobody nogroup - -
-+f     /tmp/F/symlink     0644 nobody nogroup - -
-+EOF
-+! test -e /tmp/F/missing
-+test $(stat -c %U:%G:%a /tmp/file-owned-by-root) = "root:root:644"
-+
-+### Handle read-only filesystem gracefully: we shouldn't fail if the target
-+### already exists and is empty.
-+mkdir /tmp/F/rw-fs
-+mkdir /tmp/F/ro-fs
-+
-+touch /tmp/F/rw-fs/foo
-+chmod 644 /tmp/F/rw-fs/foo
-+
-+mount -o bind,ro /tmp/F/rw-fs /tmp/F/ro-fs
-+
-+systemd-tmpfiles --create - <<EOF
-+F     /tmp/F/ro-fs/foo    0644 - - - -
-+EOF
-+test -f /tmp/F/ro-fs/foo; ! test -s /tmp/F/ro-fs/foo
-+
-+echo "truncating is not allowed anymore" >/tmp/F/rw-fs/foo
-+! systemd-tmpfiles --create - <<EOF
-+F     /tmp/F/ro-fs/foo    0644 - - - -
-+EOF
-+
-+! systemd-tmpfiles --create - <<EOF
-+F     /tmp/F/ro-fs/foo    0644 - - - - This string should not be written
-+EOF
-+test -f /tmp/F/ro-fs/foo; ! test -s /tmp/F/ro-fs/foo
-+
-+# Trying to change the perms should fail.
-+>/tmp/F/rw-fs/foo
-+! systemd-tmpfiles --create - <<EOF
-+F     /tmp/F/ro-fs/foo    0666 - - - -
-+EOF
-+test $(stat -c %U:%G:%a /tmp/F/ro-fs/foo) = "root:root:644"
-+
-+### Try to create a new file.
-+! systemd-tmpfiles --create - <<EOF
-+F     /tmp/F/ro-fs/bar    0644 - - - -
-+EOF
-+! test -e /tmp/F/ro-fs/bar
-+
-+### 'F' shouldn't follow unsafe paths.
-+mkdir /tmp/F/nobody
-+ln -s /root /tmp/F/nobody/unsafe-symlink
-+chown -R --no-dereference nobody:nogroup /tmp/F/nobody
-+
-+! systemd-tmpfiles --create - <<EOF
-+F     /tmp/F/nobody/unsafe-symlink/exploit    0644 nobody nogroup - -
-+EOF
-+! test -e /tmp/F/nobody/unsafe-symlink/exploit
-+
-+#
-+# 'w'
-+#
-+touch /tmp/w/overwritten
-+
-+### nop if the target does not exist.
-+systemd-tmpfiles --create - <<EOF
-+w     /tmp/w/unexistent    0644 - - - new content
-+EOF
-+! test -e /tmp/w/unexistent
-+
-+### no argument given -> fails.
-+! systemd-tmpfiles --create - <<EOF
-+w     /tmp/w/unexistent    0644 - - - -
-+EOF
-+
-+### write into an empty file.
-+systemd-tmpfiles --create - <<EOF
-+w     /tmp/w/overwritten    0644 - - - old content
-+EOF
-+test -f /tmp/w/overwritten
-+test "$(< /tmp/w/overwritten)" = "old content"
-+
-+### new content is overwritten
-+systemd-tmpfiles --create - <<EOF
-+w     /tmp/w/overwritten    0644 - - - new content
-+EOF
-+test -f /tmp/w/overwritten
-+test "$(< /tmp/w/overwritten)" = "new content"
-+
-+### writing into an 'exotic' file sould be allowed.
-+systemd-tmpfiles --create - <<EOF
-+w     /dev/null    - - - - new content
-+EOF
-+
-+### 'w' follows symlinks
-+ln -s ./overwritten /tmp/w/symlink
-+systemd-tmpfiles --create - <<EOF
-+w     /tmp/w/symlink    - - - - $(readlink -e /tmp/w/symlink)
-+EOF
-+readlink -e /tmp/w/symlink
-+test "$(< /tmp/w/overwritten)" = "/tmp/w/overwritten"
-+
-+### 'w' shouldn't follow unsafe paths.
-+mkdir /tmp/w/nobody
-+ln -s /root /tmp/w/nobody/unsafe-symlink
-+chown -R --no-dereference nobody:nogroup /tmp/w/nobody
-+
-+! systemd-tmpfiles --create - <<EOF
-+f     /tmp/w/nobody/unsafe-symlink/exploit    0644 nobody nogroup - -
-+EOF
-+! test -e /tmp/w/nobody/unsafe-symlink/exploit
---- /dev/null
-+++ b/test/TEST-22-TMPFILES/test-04.sh
-@@ -0,0 +1,44 @@
-+#! /bin/bash
-+#
-+# Basic tests for types creating fifos
-+#
-+
-+set -e
-+set -x
-+
-+rm -fr /tmp/p
-+mkdir  /tmp/p
-+touch  /tmp/p/f1
-+
-+systemd-tmpfiles --create - <<EOF
-+p     /tmp/p/fifo1    0666 - - - -
-+EOF
-+
-+test -p /tmp/p/fifo1
-+test $(stat -c %U:%G:%a /tmp/p/fifo1) = "root:root:666"
-+
-+# it should refuse to overwrite an existing file
-+! systemd-tmpfiles --create - <<EOF
-+p     /tmp/p/f1    0666 - - - -
-+EOF
-+
-+test -f /tmp/p/f1
-+
-+# unless '+' prefix is used
-+systemd-tmpfiles --create - <<EOF
-+p+     /tmp/p/f1    0666 - - - -
-+EOF
-+
-+test -p /tmp/p/f1
-+test $(stat -c %U:%G:%a /tmp/p/f1) = "root:root:666"
-+
-+#
-+# Must be fixed
-+#
-+# mkdir /tmp/p/nobody
-+# #ln -s /root /tmp/F/nobody/unsafe-symlink
-+# chown -R --no-dereference nobody:nogroup /tmp/p/nobody
-+#
-+# systemd-tmpfiles --create - <<EOF
-+# p      /tmp/p/nobody/fifo2    0666 nobody nogroup - -
-+# EOF
---- a/test/TEST-22-TMPFILES/test.sh
-+++ b/test/TEST-22-TMPFILES/test.sh
-@@ -14,6 +14,8 @@
-     inst_binary stat
-     inst_binary seq
-     inst_binary xargs
-+    inst_binary mkfifo
-+    inst_binary readlink
-
-     # mask some services that we do not want to run in these tests
-     ln -fs /dev/null $initdir/etc/systemd/system/systemd-hwdb-update.service
diff --git a/Makefile b/Makefile
index 4c9b32a..242f181 100644
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,5 @@
 PKG_NAME := systemd
-URL = https://github.com/systemd/systemd/archive/v239.tar.gz
+URL = https://github.com/systemd/systemd/archive/v241.tar.gz
 ARCHIVES = 
 
 include ../common/Makefile.common
diff --git a/NEWS b/NEWS
index fb00f4b..cd81d9c 100644
--- a/NEWS
+++ b/NEWS
@@ -1,5 +1,627 @@
 systemd System and Service Manager
 
+CHANGES WITH 241:
+
+        * The default locale can now be configured at compile time. Otherwise,
+          a suitable default will be selected automatically (one of C.UTF-8,
+          en_US.UTF-8, and C).
+
+        * The version string shown by systemd and other tools now includes the
+          git commit hash when built from git. An override may be specified
+          during compilation, which is intended to be used by distributions to
+          include the package release information.
+
+        * systemd-cat can now filter standard input and standard error streams
+          for different syslog priorities using the new --stderr-priority=
+          option.
+
+        * systemd-journald and systemd-journal-remote reject entries which
+          contain too many fields (CVE-2018-16865) and set limits on the
+          process' command line length (CVE-2018-16864).
+
+        * $DBUS_SESSION_BUS_ADDRESS environment variable is set by pam_systemd
+          again.
+
+        * A new network device NamePolicy "keep" is implemented for link files,
+          and used by default in 99-default.link (the fallback configuration
+          provided by systemd). With this policy, if the network device name
+          was already set by userspace, the device will not be renamed again.
+          This matches the naming scheme that was implemented before
+          systemd-240. If naming-scheme < 240 is specified, the "keep" policy
+          is also enabled by default, even if not specified. Effectively, this
+          means that if naming-scheme >= 240 is specified, network devices will
+          be renamed according to the configuration, even if they have been
+          renamed already, if "keep" is not specified as the naming policy in
+          the .link file. The 99-default.link file provided by systemd includes
+          "keep" for backwards compatibility, but it is recommended for user
+          installed .link files to *not* include it.
+
+          The "kernel" policy, which keeps kernel names declared to be
+          "persistent", now works again as documented.
+
+        * kernel-install script now optionally takes the paths to one or more
+          initrd files, and passes them to all plugins.
+
+        * The mincore() system call has been dropped from the @system-service
+          system call filter group, as it is pretty exotic and may potentially
+          used for side-channel attacks.
+
+        * -fPIE is dropped from compiler and linker options. Please specify
+          -Db_pie=true option to meson to build position-independent
+          executables. Note that the meson option is supported since meson-0.49.
+
+        * The fs.protected_regular and fs.protected_fifos sysctls, which were
+          added in Linux 4.19 to make some data spoofing attacks harder, are
+          now enabled by default. While this will hopefully improve the
+          security of most installations, it is technically a backwards
+          incompatible change; to disable these sysctls again, place the
+          following lines in /etc/sysctl.d/60-protected.conf or a similar file:
+
+              fs.protected_regular = 0
+              fs.protected_fifos = 0
+
+          Note that the similar hardlink and symlink protection has been
+          enabled since v199, and may be disabled likewise.
+
+        * The files read from the EnvironmentFile= setting in unit files now
+          parse backslashes inside quotes literally, matching the behaviour of
+          POSIX shells.
+
+        * udevadm trigger, udevadm control, udevadm settle and udevadm monitor
+          now automatically become NOPs when run in a chroot() environment.
+
+        * The tmpfiles.d/ "C" line type will now copy directory trees not only
+          when the destination is so far missing, but also if it already exists
+          as a directory and is empty. This is useful to cater for systems
+          where directory trees are put together from multiple separate mount
+          points but otherwise empty.
+
+        * A new function sd_bus_close_unref() (and the associated
+          sd_bus_close_unrefp()) has been added to libsystemd, that combines
+          sd_bus_close() and sd_bus_unref() in one.
+
+        * udevadm control learnt a new option for --ping for testing whether a
+          systemd-udevd instance is running and reacting.
+
+        Contributions from: Aaron Plattner, Alberts Muktupāvels, Alex Mayer,
+        Ayman Bagabas, Beniamino Galvani, Burt P, Chris Down, Chris Lamb, Chris
+        Morin, Christian Hesse, Claudius Ellsel, dana, Daniel Axtens, Daniele
+        Medri, Dave Reisner, David Santamaría Rogado, Diego Canuhe, Dimitri
+        John Ledkov, Evgeny Vereshchagin, Fabrice Fontaine, Filipe
+        Brandenburger, Franck Bui, Frantisek Sumsal, govwin, Hans de Goede,
+        James Hilliard, Jan Engelhardt, Jani Uusitalo, Jan Janssen, Jan
+        Synacek, Jonathan McDowell, Jonathan Roemer, Jonathon Kowalski, Joost
+        Heitbrink, Jörg Thalheim, Lance, Lennart Poettering, Louis Taylor,
+        Lucas Werkmeister, Mantas Mikulėnas, Marc-Antoine Perennou,
+        marvelousblack, Michael Biebl, Michael Sloan, Michal Sekletar, Mike
+        Auty, Mike Gilbert, Mikhail Kasimov, Neil Brown, Niklas Hambüchen,
+        Patrick Williams, Paul Seyfert, Peter Hutterer, Philip Withnall, Roger
+        James, Ronnie P. Thomas, Ryan Gonzalez, Sam Morris, Stephan Edel,
+        Stephan Gerhold, Susant Sahani, Taro Yamada, Thomas Haller, Topi
+        Miettinen, YiFei Zhu, YmrDtnJu, YunQiang Su, Yu Watanabe, Zbigniew
+        Jędrzejewski-Szmek, zsergeant77, Дамјан Георгиевски
+
+        — Berlin, 2018-02-14
+
+CHANGES WITH 240:
+
+        * NoNewPrivileges=yes has been set for all long-running services
+          implemented by systemd. Previously, this was problematic due to
+          SELinux (as this would also prohibit the transition from PID1's label
+          to the service's label). This restriction has since been lifted, but
+          an SELinux policy update is required.
+          (See e.g. https://github.com/fedora-selinux/selinux-policy/pull/234.)
+
+        * DynamicUser=yes is dropped from systemd-networkd.service,
+          systemd-resolved.service and systemd-timesyncd.service, which was
+          enabled in v239 for systemd-networkd.service and systemd-resolved.service,
+          and since v236 for systemd-timesyncd.service. The users and groups
+          systemd-network, systemd-resolve and systemd-timesync are created
+          by systemd-sysusers again. Distributors or system administrators
+          may need to create these users and groups if they not exist (or need
+          to re-enable DynamicUser= for those units) while upgrading systemd.
+          Also, the clock file for systemd-timesyncd may need to move from
+          /var/lib/private/systemd/timesync/clock to /var/lib/systemd/timesync/clock.
+
+        * When unit files are loaded from disk, previously systemd would
+          sometimes (depending on the unit loading order) load units from the
+          target path of symlinks in .wants/ or .requires/ directories of other
+          units. This meant that unit could be loaded from different paths
+          depending on whether the unit was requested explicitly or as a
+          dependency of another unit, not honouring the priority of directories
+          in search path. It also meant that it was possible to successfully
+          load and start units which are not found in the unit search path, as
+          long as they were requested as a dependency and linked to from
+          .wants/ or .requires/. The target paths of those symlinks are not
+          used for loading units anymore and the unit file must be found in
+          the search path.
+
+        * A new service type has been added: Type=exec. It's very similar to
+          Type=simple but ensures the service manager will wait for both fork()
+          and execve() of the main service binary to complete before proceeding
+          with follow-up units. This is primarily useful so that the manager
+          propagates any errors in the preparation phase of service execution
+          back to the job that requested the unit to be started. For example,
+          consider a service that has ExecStart= set to a file system binary
+          that doesn't exist. With Type=simple starting the unit would be
+          considered instantly successful, as only fork() has to complete
+          successfully and the manager does not wait for execve(), and hence
+          its failure is seen "too late". With the new Type=exec service type
+          starting the unit will fail, as the manager will wait for the
+          execve() and notice its failure, which is then propagated back to the
+          start job.
+
+          NOTE: with the next release 241 of systemd we intend to change the
+          systemd-run tool to default to Type=exec for transient services
+          started by it. This should be mostly safe, but in specific corner
+          cases might result in problems, as the systemd-run tool will then
+          block on NSS calls (such as user name look-ups due to User=) done
+          between the fork() and execve(), which under specific circumstances
+          might cause problems. It is recommended to specify "-p Type=simple"
+          explicitly in the few cases where this applies. For regular,
+          non-transient services (i.e. those defined with unit files on disk)
+          we will continue to default to Type=simple.
+
+        * The Linux kernel's current default RLIMIT_NOFILE resource limit for
+          userspace processes is set to 1024 (soft) and 4096
+          (hard). Previously, systemd passed this on unmodified to all
+          processes it forked off. With this systemd release the hard limit
+          systemd passes on is increased to 512K, overriding the kernel's
+          defaults and substantially increasing the number of simultaneous file
+          descriptors unprivileged userspace processes can allocate. Note that
+          the soft limit remains at 1024 for compatibility reasons: the
+          traditional UNIX select() call cannot deal with file descriptors >=
+          1024 and increasing the soft limit globally might thus result in
+          programs unexpectedly allocating a high file descriptor and thus
+          failing abnormally when attempting to use it with select() (of
+          course, programs shouldn't use select() anymore, and prefer
+          poll()/epoll, but the call unfortunately remains undeservedly popular
+          at this time). This change reflects the fact that file descriptor
+          handling in the Linux kernel has been optimized in more recent
+          kernels and allocating large numbers of them should be much cheaper
+          both in memory and in performance than it used to be. Programs that
+          want to take benefit of the increased limit have to "opt-in" into
+          high file descriptors explicitly by raising their soft limit. Of
+          course, when they do that they must acknowledge that they cannot use
+          select() anymore (and neither can any shared library they use — or
+          any shared library used by any shared library they use and so on).
+          Which default hard limit is most appropriate is of course hard to
+          decide. However, given reports that ~300K file descriptors are used
+          in real-life applications we believe 512K is sufficiently high as new
+          default for now. Note that there are also reports that using very
+          high hard limits (e.g. 1G) is problematic: some software allocates
+          large arrays with one element for each potential file descriptor
+          (Java, …) — a high hard limit thus triggers excessively large memory
+          allocations in these applications. Hopefully, the new default of 512K
+          is a good middle ground: higher than what real-life applications
+          currently need, and low enough for avoid triggering excessively large
+          allocations in problematic software. (And yes, somebody should fix
+          Java.)
+
+        * The fs.nr_open and fs.file-max sysctls are now automatically bumped
+          to the highest possible values, as separate accounting of file
+          descriptors is no longer necessary, as memcg tracks them correctly as
+          part of the memory accounting anyway. Thus, from the four limits on
+          file descriptors currently enforced (fs.file-max, fs.nr_open,
+          RLIMIT_NOFILE hard, RLIMIT_NOFILE soft) we turn off the first two,
+          and keep only the latter two. A set of build-time options
+          (-Dbump-proc-sys-fs-file-max=false and -Dbump-proc-sys-fs-nr-open=false)
+          has been added to revert this change in behaviour, which might be
+          an option for systems that turn off memcg in the kernel.
+
+        * When no /etc/locale.conf file exists (and hence no locale settings
+          are in place), systemd will now use the "C.UTF-8" locale by default,
+          and set LANG= to it. This locale is supported by various
+          distributions including Fedora, with clear indications that upstream
+          glibc is going to make it available too. This locale enables UTF-8
+          mode by default, which appears appropriate for 2018.
+
+        * The "net.ipv4.conf.all.rp_filter" sysctl will now be set to 2 by
+          default. This effectively switches the RFC3704 Reverse Path filtering
+          from Strict mode to Loose mode. This is more appropriate for hosts
+          that have multiple links with routes to the same networks (e.g.
+          a client with a Wi-Fi and Ethernet both connected to the internet).
+
+          Consult the kernel documentation for details on this sysctl:
+          https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt
+
+        * CPUAccounting=yes no longer enables the CPU controller when using
+          kernel 4.15+ and the unified cgroup hierarchy, as required accounting
+          statistics are now provided independently from the CPU controller.
+
+        * Support for disabling a particular cgroup controller within a sub-tree
+          has been added through the DisableControllers= directive.
+
+        * cgroup_no_v1=all on the kernel command line now also implies
+          using the unified cgroup hierarchy, unless one explicitly passes
+          systemd.unified_cgroup_hierarchy=0 on the kernel command line.
+
+        * The new "MemoryMin=" unit file property may now be used to set the
+          memory usage protection limit of processes invoked by the unit. This
+          controls the cgroup v2 memory.min attribute. Similarly, the new
+          "IODeviceLatencyTargetSec=" property has been added, wrapping the new
+          cgroup v2 io.latency cgroup property for configuring per-service I/O
+          latency.
+
+        * systemd now supports the cgroup v2 devices BPF logic, as counterpart
+          to the cgroup v1 "devices" cgroup controller.
+
+        * systemd-escape now is able to combine --unescape with --template. It
+          also learnt a new option --instance for extracting and unescaping the
+          instance part of a unit name.
+
+        * sd-bus now provides the sd_bus_message_readv() which is similar to
+          sd_bus_message_read() but takes a va_list object. The pair
+          sd_bus_set_method_call_timeout() and sd_bus_get_method_call_timeout()
+          has been added for configuring the default method call timeout to
+          use. sd_bus_error_move() may be used to efficiently move the contents
+          from one sd_bus_error structure to another, invalidating the
+          source. sd_bus_set_close_on_exit() and sd_bus_get_close_on_exit() may
+          be used to control whether a bus connection object is automatically
+          flushed when an sd-event loop is exited.
+
+        * When processing classic BSD syslog log messages, journald will now
+          save the original time-stamp string supplied in the new
+          SYSLOG_TIMESTAMP= journal field. This permits consumers to
+          reconstruct the original BSD syslog message more correctly.
+
+        * StandardOutput=/StandardError= in service files gained support for
+          new "append:…" parameters, for connecting STDOUT/STDERR of a service
+          to a file, and appending to it.
+
+        * The signal to use as last step of killing of unit processes is now
+          configurable. Previously it was hard-coded to SIGKILL, which may now
+          be overridden with the new KillSignal= setting. Note that this is the
+          signal used when regular termination (i.e. SIGTERM) does not suffice.
+          Similarly, the signal used when aborting a program in case of a
+          watchdog timeout may now be configured too (WatchdogSignal=).
+
+        * The XDG_SESSION_DESKTOP environment variable may now be configured in
+          the pam_systemd argument line, using the new desktop= switch. This is
+          useful to initialize it properly from a display manager without
+          having to touch C code.
+
+        * Most configuration options that previously accepted percentage values
+          now also accept permille values with the '‰' suffix (instead of '%').
+
+        * systemd-resolved may now optionally use OpenSSL instead of GnuTLS for
+          DNS-over-TLS.
+
+        * systemd-resolved's configuration file resolved.conf gained a new
+          option ReadEtcHosts= which may be used to turn off processing and
+          honoring /etc/hosts entries.
+
+        * The "--wait" switch may now be passed to "systemctl
+          is-system-running", in which case the tool will synchronously wait
+          until the system finished start-up.
+
+        * hostnamed gained a new bus call to determine the DMI product UUID.
+
+        * On x86-64 systemd will now prefer using the RDRAND processor
+          instruction over /dev/urandom whenever it requires randomness that
+          neither has to be crypto-grade nor should be reproducible. This
+          should substantially reduce the amount of entropy systemd requests
+          from the kernel during initialization on such systems, though not
+          reduce it to zero. (Why not zero? systemd still needs to allocate
+          UUIDs and such uniquely, which require high-quality randomness.)
+
+        * networkd gained support for Foo-Over-UDP, ERSPAN and ISATAP
+          tunnels. It also gained a new option ForceDHCPv6PDOtherInformation=
+          for forcing the "Other Information" bit in IPv6 RA messages. The
+          bonding logic gained four new options AdActorSystemPriority=,
+          AdUserPortKey=, AdActorSystem= for configuring various 802.3ad
+          aspects, and DynamicTransmitLoadBalancing= for enabling dynamic
+          shuffling of flows. The tunnel logic gained a new
+          IPv6RapidDeploymentPrefix= option for configuring IPv6 Rapid
+          Deployment. The policy rule logic gained four new options IPProtocol=,
+          SourcePort= and DestinationPort=, InvertRule=. The bridge logic gained
+          support for the MulticastToUnicast= option. networkd also gained
+          support for configuring static IPv4 ARP or IPv6 neighbor entries.
+
+        * .preset files (as read by 'systemctl preset') may now be used to
+          instantiate services.
+
+        * /etc/crypttab now understands the sector-size= option to configure
+          the sector size for an encrypted partition.
+
+        * Key material for encrypted disks may now be placed on a formatted
+          medium, and referenced from /etc/crypttab by the UUID of the file
+          system, followed by "=" suffixed by the path to the key file.
+
+        * The "collect" udev component has been removed without replacement, as
+          it is neither used nor maintained.
+
+        * When the RuntimeDirectory=, StateDirectory=, CacheDirectory=,
+          LogsDirectory=, ConfigurationDirectory= settings are used in a
+          service the executed processes will now receive a set of environment
+          variables containing the full paths of these directories.
+          Specifically, RUNTIME_DIRECTORY=, STATE_DIRECTORY, CACHE_DIRECTORY,
+          LOGS_DIRECTORY, CONFIGURATION_DIRECTORY are now set if these options
+          are used. Note that these options may be used multiple times per
+          service in which case the resulting paths will be concatenated and
+          separated by colons.
+
+        * Predictable interface naming has been extended to cover InfiniBand
+          NICs. They will be exposed with an "ib" prefix.
+
+        * tmpfiles.d/ line types may now be suffixed with a '-' character, in
+          which case the respective line failing is ignored.
+
+        * .link files may now be used to configure the equivalent to the
+          "ethtool advertise" commands.
+
+        * The sd-device.h and sd-hwdb.h APIs are now exported, as an
+          alternative to libudev.h. Previously, the latter was just an internal
+          wrapper around the former, but now these two APIs are exposed
+          directly.
+
+        * sd-id128.h gained a new function sd_id128_get_boot_app_specific()
+          which calculates an app-specific boot ID similar to how
+          sd_id128_get_machine_app_specific() generates an app-specific machine
+          ID.
+
+        * A new tool systemd-id128 has been added that can be used to determine
+          and generate various 128bit IDs.
+
+        * /etc/os-release gained two new standardized fields DOCUMENTATION_URL=
+          and LOGO=.
+
+        * systemd-hibernate-resume-generator will now honor the "noresume"
+          kernel command line option, in which case it will bypass resuming
+          from any hibernated image.
+
+        * The systemd-sleep.conf configuration file gained new options
+          AllowSuspend=, AllowHibernation=, AllowSuspendThenHibernate=,
+          AllowHybridSleep= for prohibiting specific sleep modes even if the
+          kernel exports them.
+
+        * portablectl is now officially supported and has thus moved to
+          /usr/bin/.
+
+        * bootctl learnt the two new commands "set-default" and "set-oneshot"
+          for setting the default boot loader item to boot to (either
+          persistently or only for the next boot). This is currently only
+          compatible with sd-boot, but may be implemented on other boot loaders
+          too, that follow the boot loader interface. The updated interface is
+          now documented here:
+
+          https://systemd.io/BOOT_LOADER_INTERFACE
+
+        * A new kernel command line option systemd.early_core_pattern= is now
+          understood which may be used to influence the core_pattern PID 1
+          installs during early boot.
+
+        * busctl learnt two new options -j and --json= for outputting method
+          call replies, properties and monitoring output in JSON.
+
+        * journalctl's JSON output now supports simple ANSI coloring as well as
+          a new "json-seq" mode for generating RFC7464 output.
+
+        * Unit files now support the %g/%G specifiers that resolve to the UNIX
+          group/GID of the service manager runs as, similar to the existing
+          %u/%U specifiers that resolve to the UNIX user/UID.
+
+        * systemd-logind learnt a new global configuration option
+          UserStopDelaySec= that may be set in logind.conf. It specifies how
+          long the systemd --user instance shall remain started after a user
+          logs out. This is useful to speed up repetitive re-connections of the
+          same user, as it means the user's service manager doesn't have to be
+          stopped/restarted on each iteration, but can be reused between
+          subsequent options. This setting defaults to 10s. systemd-logind also
+          exports two new properties on its Manager D-Bus objects indicating
+          whether the system's lid is currently closed, and whether the system
+          is on AC power.
+
+        * systemd gained support for a generic boot counting logic, which
+          generically permits automatic reverting to older boot loader entries
+          if newer updated ones don't work. The boot loader side is implemented
+          in sd-boot, but is kept open for other boot loaders too. For details
+          see:
+
+          https://systemd.io/AUTOMATIC_BOOT_ASSESSMENT
+
+        * The SuccessAction=/FailureAction= unit file settings now learnt two
+          new parameters: "exit" and "exit-force", which result in immediate
+          exiting of the service manager, and are only useful in systemd --user
+          and container environments.
+
+        * Unit files gained support for a pair of options
+          FailureActionExitStatus=/SuccessActionExitStatus= for configuring the
+          exit status to use as service manager exit status when
+          SuccessAction=/FailureAction= is set to exit or exit-force.
+
+        * A pair of LogRateLimitIntervalSec=/LogRateLimitBurst= per-service
+          options may now be used to configure the log rate limiting applied by
+          journald per-service.
+
+        * systemd-analyze gained a new verb "timespan" for parsing and
+          normalizing time span values (i.e. strings like "5min 7s 8us").
+
+        * systemd-analyze also gained a new verb "security" for analyzing the
+          security and sand-boxing settings of services in order to determine an
+          "exposure level" for them, indicating whether a service would benefit
+          from more sand-boxing options turned on for them.
+
+        * "systemd-analyze syscall-filter" will now also show system calls
+          supported by the local kernel but not included in any of the defined
+          groups.
+
+        * .nspawn files now understand the Ephemeral= setting, matching the
+          --ephemeral command line switch.
+
+        * sd-event gained the new APIs sd_event_source_get_floating() and
+          sd_event_source_set_floating() for controlling whether a specific
+          event source is "floating", i.e. destroyed along with the even loop
+          object itself.
+
+        * Unit objects on D-Bus gained a new "Refs" property that lists all
+          clients that currently have a reference on the unit (to ensure it is
+          not unloaded).
+
+        * The JoinControllers= option in system.conf is no longer supported, as
+          it didn't work correctly, is hard to support properly, is legacy (as
+          the concept only exists on cgroup v1) and apparently wasn't used.
+
+        * Journal messages that are generated whenever a unit enters the failed
+          state are now tagged with a unique MESSAGE_ID. Similarly, messages
+          generated whenever a service process exits are now made recognizable,
+          too. A taged message is also emitted whenever a unit enters the
+          "dead" state on success.
+
+        * systemd-run gained a new switch --working-directory= for configuring
+          the working directory of the service to start. A shortcut -d is
+          equivalent, setting the working directory of the service to the
+          current working directory of the invoking program. The new --shell
+          (or just -S) option has been added for invoking the $SHELL of the
+          caller as a service, and implies --pty --same-dir --wait --collect
+          --service-type=exec. Or in other words, "systemd-run -S" is now the
+          quickest way to quickly get an interactive in a fully clean and
+          well-defined system service context.
+
+        * machinectl gained a new verb "import-fs" for importing an OS tree
+          from a directory. Moreover, when a directory or tarball is imported
+          and single top-level directory found with the OS itself below the OS
+          tree is automatically mangled and moved one level up.
+
+        * systemd-importd will no longer set up an implicit btrfs loop-back
+          file system on /var/lib/machines. If one is already set up, it will
+          continue to be used.
+
+        * A new generator "systemd-run-generator" has been added. It will
+          synthesize a unit from one or more program command lines included in
+          the kernel command line. This is very useful in container managers
+          for example:
+
+          # systemd-nspawn -i someimage.raw -b systemd.run='"some command line"'
+
+          This will run "systemd-nspawn" on an image, invoke the specified
+          command line and immediately shut down the container again, returning
+          the command line's exit code.
+
+        * The block device locking logic is now documented:
+
+          https://systemd.io/BLOCK_DEVICE_LOCKING
+
+        * loginctl and machinectl now optionally output the various tables in
+          JSON using the --output= switch. It is our intention to add similar
+          support to systemctl and all other commands.
+
+        * udevadm's query and trigger verb now optionally take a .device unit
+          name as argument.
+
+        * systemd-udevd's network naming logic now understands a new
+          net.naming-scheme= kernel command line switch, which may be used to
+          pick a specific version of the naming scheme. This helps stabilizing
+          interface names even as systemd/udev are updated and the naming logic
+          is improved.
+
+        * sd-id128.h learnt two new auxiliary helpers: sd_id128_is_allf() and
+          SD_ID128_ALLF to test if a 128bit ID is set to all 0xFF bytes, and to
+          initialize one to all 0xFF.
+
+        * After loading the SELinux policy systemd will now recursively relabel
+          all files and directories listed in
+          /run/systemd/relabel-extra.d/*.relabel (which should be simple
+          newline separated lists of paths) in addition to the ones it already
+          implicitly relabels in /run, /dev and /sys. After the relabelling is
+          completed the *.relabel files (and /run/systemd/relabel-extra.d/) are
+          removed. This is useful to permit initrds (i.e. code running before
+          the SELinux policy is in effect) to generate files in the host
+          filesystem safely and ensure that the correct label is applied during
+          the transition to the host OS.
+
+        * KERNEL API BREAKAGE: Linux kernel 4.18 changed behaviour regarding
+          mknod() handling in user namespaces. Previously mknod() would always
+          fail with EPERM in user namespaces. Since 4.18 mknod() will succeed
+          but device nodes generated that way cannot be opened, and attempts to
+          open them result in EPERM. This breaks the "graceful fallback" logic
+          in systemd's PrivateDevices= sand-boxing option. This option is
+          implemented defensively, so that when systemd detects it runs in a
+          restricted environment (such as a user namespace, or an environment
+          where mknod() is blocked through seccomp or absence of CAP_SYS_MKNOD)
+          where device nodes cannot be created the effect of PrivateDevices= is
+          bypassed (following the logic that 2nd-level sand-boxing is not
+          essential if the system systemd runs in is itself already sand-boxed
+          as a whole). This logic breaks with 4.18 in container managers where
+          user namespacing is used: suddenly PrivateDevices= succeeds setting
+          up a private /dev/ file system containing devices nodes — but when
+          these are opened they don't work.
+
+          At this point is is recommended that container managers utilizing
+          user namespaces that intend to run systemd in the payload explicitly
+          block mknod() with seccomp or similar, so that the graceful fallback
+          logic works again.
+
+          We are very sorry for the breakage and the requirement to change
+          container configurations for newer kernels. It's purely caused by an
+          incompatible kernel change. The relevant kernel developers have been
+          notified about this userspace breakage quickly, but they chose to
+          ignore it.
+
+        * PermissionsStartOnly= setting is deprecated (but is still supported
+          for backwards compatibility). The same functionality is provided by
+          the more flexible "+", "!", and "!!" prefixes to ExecStart= and other
+          commands.
+
+        * $DBUS_SESSION_BUS_ADDRESS environment variable is not set by
+          pam_systemd anymore.
+
+        * The naming scheme for network devices was changed to always rename
+          devices, even if they were already renamed by userspace. The "kernel"
+          policy was changed to only apply as a fallback, if no other naming
+          policy took effect.
+
+        * The requirements to build systemd is bumped to meson-0.46 and
+          python-3.5.
+
+        Contributions from: afg, Alan Jenkins, Aleksei Timofeyev, Alexander
+        Filippov, Alexander Kurtz, Alexey Bogdanenko, Andreas Henriksson,
+        Andrew Jorgensen, Anita Zhang, apnix-uk, Arkan49, Arseny Maslennikov,
+        asavah, Asbjørn Apeland, aszlig, Bastien Nocera, Ben Boeckel, Benedikt
+        Morbach, Benjamin Berg, Bruce Zhang, Carlo Caione, Cedric Viou, Chen
+        Qi, Chris Chiu, Chris Down, Chris Morin, Christian Rebischke, Claudius
+        Ellsel, Colin Guthrie, dana, Daniel, Daniele Medri, Daniel Kahn
+        Gillmor, Daniel Rusek, Daniel van Vugt, Dariusz Gadomski, Dave Reisner,
+        David Anderson, Davide Cavalca, David Leeds, David Malcolm, David
+        Strauss, David Tardon, Dimitri John Ledkov, Dmitry Torokhov, dj-kaktus,
+        Dongsu Park, Elias Probst, Emil Soleyman, Erik Kooistra, Ervin Peters,
+        Evgeni Golov, Evgeny Vereshchagin, Fabrice Fontaine, Faheel Ahmad,
+        Faizal Luthfi, Felix Yan, Filipe Brandenburger, Franck Bui, Frank
+        Schaefer, Frantisek Sumsal, Gautier Husson, Gianluca Boiano, Giuseppe
+        Scrivano, glitsj16, Hans de Goede, Harald Hoyer, Harry Mallon, Harshit
+        Jain, Helmut Grohne, Henry Tung, Hui Yiqun, imayoda, Insun Pyo, Iwan
+        Timmer, Jan Janssen, Jan Pokorný, Jan Synacek, Jason A. Donenfeld,
+        javitoom, Jérémy Nouhaud, Jeremy Su, Jiuyang Liu, João Paulo Rechi
+        Vita, Joe Hershberger, Joe Rayhawk, Joerg Behrmann, Joerg Steffens,
+        Jonas Dorel, Jon Ringle, Josh Soref, Julian Andres Klode, Jun Bo Bi,
+        Jürg Billeter, Keith Busch, Khem Raj, Kirill Marinushkin, Larry
+        Bernstone, Lennart Poettering, Lion Yang, Li Song, Lorenz
+        Hübschle-Schneider, Lubomir Rintel, Lucas Werkmeister, Ludwin Janvier,
+        Lukáš Nykrýn, Luke Shumaker, mal, Marc-Antoine Perennou, Marcin
+        Skarbek, Marco Trevisan (Treviño), Marian Cepok, Mario Hros, Marko
+        Myllynen, Markus Grimm, Martin Pitt, Martin Sobotka, Martin Wilck,
+        Mathieu Trudel-Lapierre, Matthew Leeds, Michael Biebl, Michael Olbrich,
+        Michael 'pbone' Pobega, Michael Scherer, Michal Koutný, Michal
+        Sekletar, Michal Soltys, Mike Gilbert, Mike Palmer, Muhammet Kara, Neal
+        Gompa, Neil Brown, Network Silence, Niklas Tibbling, Nikolas Nyby,
+        Nogisaka Sadata, Oliver Smith, Patrik Flykt, Pavel Hrdina, Paweł
+        Szewczyk, Peter Hutterer, Piotr Drąg, Ray Strode, Reinhold Mueller,
+        Renaud Métrich, Roman Gushchin, Ronny Chevalier, Rubén Suárez Alvarez,
+        Ruixin Bao, RussianNeuroMancer, Ryutaroh Matsumoto, Saleem Rashid, Sam
+        Morris, Samuel Morris, Sandy Carter, scootergrisen, Sébastien Bacher,
+        Sergey Ptashnick, Shawn Landden, Shengyao Xue, Shih-Yuan Lee
+        (FourDollars), Silvio Knizek, Sjoerd Simons, Stasiek Michalski, Stephen
+        Gallagher, Steven Allen, Steve Ramage, Susant Sahani, Sven Joachim,
+        Sylvain Plantefève, Tanu Kaskinen, Tejun Heo, Thiago Macieira, Thomas
+        Blume, Thomas Haller, Thomas H. P. Andersen, Tim Ruffing, TJ, Tobias
+        Jungel, Todd Walton, Tommi Rantala, Tomsod M, Tony Novak, Tore
+        Anderson, Trevonn, Victor Laskurain, Victor Tapia, Violet Halo, Vojtech
+        Trefny, welaq, William A. Kennington III, William Douglas, Wyatt Ward,
+        Xiang Fan, Xi Ruoyao, Xuanwo, Yann E. Morin, YmrDtnJu, Yu Watanabe,
+        Zbigniew Jędrzejewski-Szmek, Zhang Xianwei, Zsolt Dollenstein
+
+        — Warsaw, 2018-12-21
+
 CHANGES WITH 239:
 
         * NETWORK INTERFACE DEVICE NAMING CHANGES: systemd-udevd's "net_id"
@@ -82,7 +704,28 @@ CHANGES WITH 239:
 
         * systemd-resolved.service and systemd-networkd.service now set
           DynamicUser=yes. The users systemd-resolve and systemd-network are
-          not created by systemd-sysusers.
+          not created by systemd-sysusers anymore.
+
+          NOTE: This has a chance of breaking nss-ldap and similar NSS modules
+          that embedd a network facing module into any process using getpwuid()
+          or related call: the dynamic allocation of the user ID for
+          systemd-resolved.service means the service manager has to check NSS
+          if the user name is already taken when forking off the service. Since
+          the user in the common case won't be defined in /etc/passwd the
+          lookup is likely to trigger nss-ldap which in turn might use NSS to
+          ask systemd-resolved for hostname lookups. This will hence result in
+          a deadlock: a user name lookup in order to start
+          systemd-resolved.service will result in a host name lookup for which
+          systemd-resolved.service needs to be started already. There are
+          multiple ways to work around this problem: pre-allocate the
+          "systemd-resolve" user on such systems, so that nss-ldap won't be
+          triggered; or use a different NSS package that doesn't do networking
+          in-process but provides a local asynchronous name cache; or configure
+          the NSS package to avoid lookups for UIDs in the range `pkg-config
+          systemd --variable=dynamicuidmin` … `pkg-config systemd
+          --variable=dynamicuidmax`, so that it does not consider itself
+          authoritative for the same UID range systemd allocates dynamic users
+          from.
 
         * The systemd-resolve tool has been renamed to resolvectl (it also
           remains available under the old name, for compatibility), and its
@@ -95,7 +738,7 @@ CHANGES WITH 239:
           Debian and FreeBSD resolvconf tool.
 
         * Support for suspend-then-hibernate has been added, i.e. a sleep mode
-          where the system initially suspends, and after a time-out resumes and
+          where the system initially suspends, and after a timeout resumes and
           hibernates again.
 
         * networkd's ClientIdentifier= now accepts a new option "duid-only". If
@@ -300,13 +943,13 @@ CHANGES WITH 239:
         * New documentation has been added to document cgroups delegation,
           portable services and the various code quality tools we have set up:
 
-          https://github.com/systemd/systemd/blob/master/doc/CGROUP_DELEGATION.md
-          https://github.com/systemd/systemd/blob/master/doc/PORTABLE_SERVICES.md
-          https://github.com/systemd/systemd/blob/master/doc/CODE_QUALITY.md
+          https://github.com/systemd/systemd/blob/master/docs/CGROUP_DELEGATION.md
+          https://github.com/systemd/systemd/blob/master/docs/PORTABLE_SERVICES.md
+          https://github.com/systemd/systemd/blob/master/docs/CODE_QUALITY.md
 
         * The Boot Loader Specification has been added to the source tree.
 
-          https://github.com/systemd/systemd/blob/master/doc/BOOT_LOADER_SPECIFICATION.md
+          https://github.com/systemd/systemd/blob/master/docs/BOOT_LOADER_SPECIFICATION.md
 
           While moving it into our source tree we have updated it and further
           changes are now accepted through the usual github PR workflow.
@@ -344,6 +987,8 @@ CHANGES WITH 239:
           allows ordering services before the service that executes the actual
           update process in a generic way.
 
+        * Systemd now emits warnings whenever .include syntax is used.
+
         Contributions from: Adam Duskett, Alan Jenkins, Alessandro Casale,
         Alexander Kurtz, Alex Gartrell, Anssi Hannula, Arnaud Rebillout, Brian
         J. Murrell, Bruno Vernay, Chris Lamb, Chris Lesiak, Christian Brauner,
@@ -470,7 +1115,7 @@ CHANGES WITH 238:
           instance to migrate processes if it itself gets the request to
           migrate processes and the kernel refuses this due to access
           restrictions.  Thanks to this "systemd-run --scope --user …" works
-          again in pure cgroups v2 environments when invoked from the user
+          again in pure cgroup v2 environments when invoked from the user
           session scope.
 
         * A new TemporaryFileSystem= setting can be used to mask out part of
@@ -546,10 +1191,9 @@ CHANGES WITH 237:
           different from what the documentation said, and not particularly
           useful, as repeated systemd-tmpfiles invocations would not be
           idempotent and grow such files without bounds. With this release
-          behaviour has been altered slightly, to match what the documentation
-          says: lines of this type only have an effect if the indicated files
-          don't exist yet, and only then the argument string is written to the
-          file.
+          behaviour has been altered to match what the documentation says:
+          lines of this type only have an effect if the indicated files don't
+          exist yet, and only then the argument string is written to the file.
 
         * FUTURE INCOMPATIBILITY: In systemd v238 we intend to slightly change
           systemd-tmpfiles behaviour: previously, read-only files owned by root
@@ -1622,7 +2266,7 @@ CHANGES WITH 233:
         * Documentation has been added that lists all of systemd's low-level
           environment variables:
 
-          https://github.com/systemd/systemd/blob/master/doc/ENVIRONMENT.md
+          https://github.com/systemd/systemd/blob/master/docs/ENVIRONMENT.md
 
         * sd-daemon gained a new API sd_is_socket_sockaddr() for determining
           whether a specific socket file descriptor matches a specified socket
@@ -2187,7 +2831,7 @@ CHANGES WITH 231:
           desired options.
 
         * systemd now supports the "memory" cgroup controller also on
-          cgroupsv2.
+          cgroup v2.
 
         * The systemd-cgtop tool now optionally takes a control group path as
           command line argument. If specified, the control group list shown is
@@ -3327,11 +3971,10 @@ CHANGES WITH 226:
           correct dequeuing of real-time signals, without losing
           signal events.
 
-        * When systemd requests a PolicyKit decision when managing
-          units it will now add additional fields to the request,
-          including unit name and desired operation. This enables more
-          powerful PolicyKit policies, that make decisions depending
-          on these parameters.
+        * When systemd requests a polkit decision when managing units it
+          will now add additional fields to the request, including unit
+          name and desired operation. This enables more powerful polkit
+          policies, that make decisions depending on these parameters.
 
         * nspawn learnt support for .nspawn settings files, that may
           accompany the image files or directories of containers, and
@@ -3366,13 +4009,12 @@ CHANGES WITH 225:
           options and allows other programs to query the values.
 
         * SELinux access control when enabling/disabling units is no
-          longer enforced with this release. The previous
-          implementation was incorrect, and a new corrected
-          implementation is not yet available. As unit file operations
-          are still protected via PolicyKit and D-Bus policy this is
-          not a security problem. Yet, distributions which care about
-          optimal SELinux support should probably not stabilize on
-          this release.
+          longer enforced with this release. The previous implementation
+          was incorrect, and a new corrected implementation is not yet
+          available. As unit file operations are still protected via
+          polkit and D-Bus policy this is not a security problem. Yet,
+          distributions which care about optimal SELinux support should
+          probably not stabilize on this release.
 
         * sd-bus gained support for matches of type "arg0has=", that
           test for membership of strings in string arrays sent in bus
@@ -3744,11 +4386,10 @@ CHANGES WITH 220:
         * systemd-importd gained support for verifying downloaded
           images with gpg2 (previously only gpg1 was supported).
 
-        * systemd-machined, systemd-logind, systemd: most bus calls
-          are now accessible to unprivileged processes via
-          PolicyKit. Also, systemd-logind will now allow users to kill
-          their own sessions without further privileges or
-          authorization.
+        * systemd-machined, systemd-logind, systemd: most bus calls are
+          now accessible to unprivileged processes via polkit. Also,
+          systemd-logind will now allow users to kill their own sessions
+          without further privileges or authorization.
 
         * systemd-shutdownd has been removed. This service was
           previously responsible for implementing scheduled shutdowns
@@ -4403,7 +5044,7 @@ CHANGES WITH 217:
           /run/systemd/user directory that was already previously
           supported, but is under the control of the user.
 
-        * Job timeouts (i.e. time-outs on the time a job that is
+        * Job timeouts (i.e. timeouts on the time a job that is
           queued stays in the run queue) can now optionally result in
           immediate reboot or power-off actions (JobTimeoutAction= and
           JobTimeoutRebootArgument=). This is useful on ".target"
@@ -4530,11 +5171,11 @@ CHANGES WITH 217:
           directly from now on, again.
 
         * Support for the new ALLOW_INTERACTIVE_AUTHORIZATION D-Bus
-          message flag has been added for all of systemd's PolicyKit
-          authenticated method calls has been added. In particular
-          this now allows optional interactive authorization via
-          PolicyKit for many of PID1's privileged operations such as
-          unit file enabling and disabling.
+          message flag has been added for all of systemd's polkit
+          authenticated method calls has been added. In particular this
+          now allows optional interactive authorization via polkit for
+          many of PID1's privileged operations such as unit file
+          enabling and disabling.
 
         * "udevadm hwdb --update" learnt a new switch "--usr" for
           placing the rebuilt hardware database in /usr instead of
@@ -4613,11 +5254,11 @@ CHANGES WITH 216:
           well as the user/group databases, which should enhance
           compatibility with certain tools like grpck.
 
-        * A number of bus APIs of PID 1 now optionally consult
-          PolicyKit to permit access for otherwise unprivileged
-          clients under certain conditions. Note that this currently
-          doesn't support interactive authentication yet, but this is
-          expected to be added eventually, too.
+        * A number of bus APIs of PID 1 now optionally consult polkit to
+          permit access for otherwise unprivileged clients under certain
+          conditions. Note that this currently doesn't support
+          interactive authentication yet, but this is expected to be
+          added eventually, too.
 
         * /etc/machine-info now has new fields for configuring the
           deployment environment of the machine, as well as the
@@ -5717,6 +6358,9 @@ CHANGES WITH 210:
           IFUNC. Please make sure to use --enable-compat-libs only
           during a transitional period!
 
+        * The .include syntax has been deprecated and is not documented
+          anymore. Drop-in files in .d directories should be used instead.
+
         Contributions from: Andreas Fuchs, Armin K., Colin Walters,
         Daniel Mack, Dave Reisner, David Herrmann, Djalal Harouni,
         Holger Schurig, Jason A. Donenfeld, Jason St. John, Jasper
@@ -7090,8 +7734,8 @@ CHANGES WITH 198:
           the rest of the package. It also has been updated to work
           correctly in initrds.
 
-        * Policykit previously has been runtime optional, and is now
-          also compile time optional via a configure switch.
+        * polkit previously has been runtime optional, and is now also
+          compile time optional via a configure switch.
 
         * systemd-analyze has been reimplemented in C. Also "systemctl
           dot" has moved into systemd-analyze.
@@ -7259,9 +7903,9 @@ CHANGES WITH 197:
           user/vendor or is automatically determined from ACPI and DMI
           information if possible.
 
-        * A number of PolicyKit actions are now bound together with
-          "imply" rules. This should simplify creating UIs because
-          many actions will now authenticate similar ones as well.
+        * A number of polkit actions are now bound together with "imply"
+          rules. This should simplify creating UIs because many actions
+          will now authenticate similar ones as well.
 
         * Unit files learnt a new condition ConditionACPower= which
           may be used to conditionalize a unit depending on whether an
@@ -7400,14 +8044,13 @@ CHANGES WITH 196:
           to maintain the necessary patches downstream, or find a
           different solution. (Talk to us if you have questions!)
 
-        * Various systemd components will now bypass PolicyKit checks
-          for root and otherwise handle properly if PolicyKit is not
-          found to be around. This should fix most issues for
-          PolicyKit-less systems. Quite frankly this should have been
-          this way since day one. It is absolutely our intention to
-          make systemd work fine on PolicyKit-less systems, and we
-          consider it a bug if something does not work as it should if
-          PolicyKit is not around.
+        * Various systemd components will now bypass polkit checks for
+          root and otherwise handle properly if polkit is not found to
+          be around. This should fix most issues for polkit-less
+          systems. Quite frankly this should have been this way since
+          day one. It is absolutely our intention to make systemd work
+          fine on polkit-less systems, and we consider it a bug if
+          something does not work as it should if polkit is not around.
 
         * For embedded systems it is now possible to build udev and
           systemd without blkid and/or kmod support.
diff --git a/buildreq_add b/buildreq_add
index 1bfc18b..6c79a8a 100644
--- a/buildreq_add
+++ b/buildreq_add
@@ -49,3 +49,4 @@ libmicrohttpd-dev
 xz-dev
 libseccomp-dev32
 libseccomp-dev
+openssl-dev
diff --git a/buildreq_cache b/buildreq_cache
index 2cd4399..34a0167 100644
--- a/buildreq_cache
+++ b/buildreq_cache
@@ -1,4 +1,4 @@
-239
+241
 bash-completion-dev
 bzip2-dev
 kbd
diff --git a/configure32 b/configure32
index a5ccf4d..c0536d7 100644
--- a/configure32
+++ b/configure32
@@ -6,3 +6,4 @@
 -Dremote=false
 -Dxz=false
 -Dgcrypt=false
+-Dopenssl=false
diff --git a/cve-2018-15686.patch b/cve-2018-15686.patch
deleted file mode 100644
index 379df98..0000000
--- a/cve-2018-15686.patch
+++ /dev/null
@@ -1,231 +0,0 @@
-From 1cc1e47ddb543eb5dea17dec70bc1ef78557d524 Mon Sep 17 00:00:00 2001
-From: Lennart Poettering <lennart@poettering.net>
-Date: Wed, 17 Oct 2018 18:36:24 +0200
-Subject: [PATCH] =?UTF-8?q?core:=20when=20deserializing=20state=20always?=
- =?UTF-8?q?=20use=20read=5Fline(=E2=80=A6,=20LONG=5FLINE=5FMAX,=20?=
- =?UTF-8?q?=E2=80=A6)?=
-MIME-Version: 1.0
-Content-Type: text/plain; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-
-This should be much better than fgets(), as we can read substantially
-longer lines and overly long lines result in proper errors.
-
-Fixes a vulnerability discovered by Jann Horn at Google.
-
-CVE-2018-15686
-LP: #1796402
-https://bugzilla.redhat.com/show_bug.cgi?id=1639071
----
- src/core/job.c     | 18 ++++++++++--------
- src/core/manager.c | 43 +++++++++++++++++++------------------------
- src/core/unit.c    | 33 ++++++++++++++++++---------------
- src/core/unit.h    |  2 +-
- 4 files changed, 48 insertions(+), 48 deletions(-)
-
-diff --git a/src/core/job.c b/src/core/job.c
-index 734756b66..c1b0b1bec 100644
---- a/src/core/job.c
-+++ b/src/core/job.c
-@@ -10,6 +10,7 @@
- #include "dbus-job.h"
- #include "dbus.h"
- #include "escape.h"
-+#include "fileio.h"
- #include "job.h"
- #include "log.h"
- #include "macro.h"
-@@ -1091,24 +1092,25 @@ int job_serialize(Job *j, FILE *f) {
- }
- 
- int job_deserialize(Job *j, FILE *f) {
-+        int r;
-         assert(j);
-         assert(f);
- 
-         for (;;) {
--                char line[LINE_MAX], *l, *v;
-+                _cleanup_free_ char *line = NULL;
-+                char *l, *v;
-                 size_t k;
- 
--                if (!fgets(line, sizeof(line), f)) {
--                        if (feof(f))
--                                return 0;
--                        return -errno;
--                }
-+                r = read_line(f, LONG_LINE_MAX, &line);
-+                if (r < 0)
-+                        return log_error_errno(r, "Failed to read serialization line: %m");
-+                if (r == 0)
-+                        return 0;
- 
--                char_array_0(line);
-                 l = strstrip(line);
- 
-                 /* End marker */
--                if (l[0] == 0)
-+                if (isempty(l))
-                         return 0;
- 
-                 k = strcspn(l, "=");
-diff --git a/src/core/manager.c b/src/core/manager.c
-index 53b392830..071fbc0b1 100644
---- a/src/core/manager.c
-+++ b/src/core/manager.c
-@@ -3129,22 +3129,18 @@ int manager_deserialize(Manager *m, FILE *f, FDSet *fds) {
-         m->n_reloading++;
- 
-         for (;;) {
--                char line[LINE_MAX];
-+                _cleanup_free_ char *line = NULL;
-                 const char *val, *l;
- 
--                if (!fgets(line, sizeof(line), f)) {
--                        if (feof(f))
--                                r = 0;
--                        else
--                                r = -errno;
--
--                        goto finish;
--                }
-+                r = read_line(f, LONG_LINE_MAX, &line);
-+                if (r < 0)
-+                        return log_error_errno(r, "Failed to read serialization line: %m");
-+                if (r == 0)
-+                        break;
- 
--                char_array_0(line);
-                 l = strstrip(line);
- 
--                if (l[0] == 0)
-+                if (isempty(l)) /* end marker */
-                         break;
- 
-                 if ((val = startswith(l, "current-job-id="))) {
-@@ -3311,29 +3307,28 @@ int manager_deserialize(Manager *m, FILE *f, FDSet *fds) {
-         }
- 
-         for (;;) {
--                Unit *u;
--                char name[UNIT_NAME_MAX+2];
-+                _cleanup_free_ char *line = NULL;
-                 const char* unit_name;
-+                Unit *u;
- 
-                 /* Start marker */
--                if (!fgets(name, sizeof(name), f)) {
--                        if (feof(f))
--                                r = 0;
--                        else
--                                r = -errno;
--
--                        goto finish;
--                }
-+                r = read_line(f, LONG_LINE_MAX, &line);
-+                if (r < 0)
-+                        return log_error_errno(r, "Failed to read serialization line: %m");
-+                if (r == 0)
-+                        break;
- 
--                char_array_0(name);
--                unit_name = strstrip(name);
-+                unit_name = strstrip(line);
- 
-                 r = manager_load_unit(m, unit_name, NULL, NULL, &u);
-                 if (r < 0) {
-                         log_notice_errno(r, "Failed to load unit \"%s\", skipping deserialization: %m", unit_name);
-                         if (r == -ENOMEM)
-                                 goto finish;
--                        unit_deserialize_skip(f);
-+                        r = unit_deserialize_skip(f);
-+                        if (r < 0)
-+                                return r;
-+
-                         continue;
-                 }
- 
-diff --git a/src/core/unit.c b/src/core/unit.c
-index 113205bf2..99a8692c2 100644
---- a/src/core/unit.c
-+++ b/src/core/unit.c
-@@ -3368,21 +3368,20 @@ int unit_deserialize(Unit *u, FILE *f, FDSet *fds) {
-         assert(fds);
- 
-         for (;;) {
--                char line[LINE_MAX], *l, *v;
-+                _cleanup_free_ char *line = NULL;
-                 CGroupIPAccountingMetric m;
-+                char *l, *v;
-                 size_t k;
- 
--                if (!fgets(line, sizeof(line), f)) {
--                        if (feof(f))
--                                return 0;
--                        return -errno;
--                }
-+                r = read_line(f, LONG_LINE_MAX, &line);
-+                if (r < 0)
-+                        return log_error_errno(r, "Failed to read serialization line: %m");
-+                if (r == 0) /* eof */
-+                        break;
- 
--                char_array_0(line);
-                 l = strstrip(line);
- 
--                /* End marker */
--                if (isempty(l))
-+                if (isempty(l)) /* End marker */
-                         break;
- 
-                 k = strcspn(l, "=");
-@@ -3657,23 +3656,27 @@ int unit_deserialize(Unit *u, FILE *f, FDSet *fds) {
-         return 0;
- }
- 
--void unit_deserialize_skip(FILE *f) {
-+int unit_deserialize_skip(FILE *f) {
-+        int r;
-         assert(f);
- 
-         /* Skip serialized data for this unit. We don't know what it is. */
- 
-         for (;;) {
--                char line[LINE_MAX], *l;
-+                _cleanup_free_ char *line = NULL;
-+                char *l;
- 
--                if (!fgets(line, sizeof line, f))
--                        return;
-+                r = read_line(f, LONG_LINE_MAX, &line);
-+                if (r < 0)
-+                        return log_error_errno(r, "Failed to read serialization line: %m");
-+                if (r == 0)
-+                        return 0;
- 
--                char_array_0(line);
-                 l = strstrip(line);
- 
-                 /* End marker */
-                 if (isempty(l))
--                        return;
-+                        return 1;
-         }
- }
- 
-diff --git a/src/core/unit.h b/src/core/unit.h
-index b3131eba1..e1a60da24 100644
---- a/src/core/unit.h
-+++ b/src/core/unit.h
-@@ -679,7 +679,7 @@ bool unit_can_serialize(Unit *u) _pure_;
- 
- int unit_serialize(Unit *u, FILE *f, FDSet *fds, bool serialize_jobs);
- int unit_deserialize(Unit *u, FILE *f, FDSet *fds);
--void unit_deserialize_skip(FILE *f);
-+int unit_deserialize_skip(FILE *f);
- 
- int unit_serialize_item(Unit *u, FILE *f, const char *key, const char *value);
- int unit_serialize_item_escaped(Unit *u, FILE *f, const char *key, const char *value);
--- 
-2.19.1
-
diff --git a/cve-2018-15687.patch b/cve-2018-15687.patch
deleted file mode 100644
index cd152d6..0000000
--- a/cve-2018-15687.patch
+++ /dev/null
@@ -1,209 +0,0 @@
-From 5de6cce58b3e8b79239b6e83653459d91af6e57c Mon Sep 17 00:00:00 2001
-From: Lennart Poettering <lennart@poettering.net>
-Date: Fri, 19 Oct 2018 11:26:59 +0200
-Subject: [PATCH] chown-recursive: let's rework the recursive logic to use
- O_PATH
-
-That way we can pin a specific inode and analyze it and manipulate it
-without it being swapped out beneath our hands.
-
-Fixes a vulnerability originally found by Jann Horn from Google.
-
-CVE-2018-15687
-LP: #1796692
-https://bugzilla.redhat.com/show_bug.cgi?id=1639076
----
- src/core/chown-recursive.c | 146 ++++++++++++++++++-------------------
- 1 file changed, 70 insertions(+), 76 deletions(-)
-
-diff --git a/src/core/chown-recursive.c b/src/core/chown-recursive.c
-index c4794501c2c..27c64489b55 100644
---- a/src/core/chown-recursive.c
-+++ b/src/core/chown-recursive.c
-@@ -1,17 +1,19 @@
- /* SPDX-License-Identifier: LGPL-2.1+ */
- 
--#include <sys/types.h>
--#include <sys/stat.h>
- #include <fcntl.h>
-+#include <sys/stat.h>
-+#include <sys/types.h>
- 
--#include "user-util.h"
--#include "macro.h"
--#include "fd-util.h"
--#include "dirent-util.h"
- #include "chown-recursive.h"
-+#include "dirent-util.h"
-+#include "fd-util.h"
-+#include "macro.h"
-+#include "stdio-util.h"
-+#include "strv.h"
-+#include "user-util.h"
- 
--static int chown_one(int fd, const char *name, const struct stat *st, uid_t uid, gid_t gid) {
--        int r;
-+static int chown_one(int fd, const struct stat *st, uid_t uid, gid_t gid) {
-+        char procfs_path[STRLEN("/proc/self/fd/") + DECIMAL_STR_MAX(int) + 1];
- 
-         assert(fd >= 0);
-         assert(st);
-@@ -20,90 +22,82 @@ static int chown_one(int fd, const char *name, const struct stat *st, uid_t uid,
-             (!gid_is_valid(gid) || st->st_gid == gid))
-                 return 0;
- 
--        if (name)
--                r = fchownat(fd, name, uid, gid, AT_SYMLINK_NOFOLLOW);
--        else
--                r = fchown(fd, uid, gid);
--        if (r < 0)
--                return -errno;
-+        /* We change ownership through the /proc/self/fd/%i path, so that we have a stable reference that works with
-+         * O_PATH. (Note: fchown() and fchmod() do not work with O_PATH, the kernel refuses that. */
-+        xsprintf(procfs_path, "/proc/self/fd/%i", fd);
- 
--        /* The linux kernel alters the mode in some cases of chown(). Let's undo this. */
--        if (name) {
--                if (!S_ISLNK(st->st_mode))
--                        r = fchmodat(fd, name, st->st_mode, 0);
--                else /* There's currently no AT_SYMLINK_NOFOLLOW for fchmodat() */
--                        r = 0;
--        } else
--                r = fchmod(fd, st->st_mode);
--        if (r < 0)
-+        if (chown(procfs_path, uid, gid) < 0)
-                 return -errno;
- 
-+        /* The linux kernel alters the mode in some cases of chown(). Let's undo this. We do this only for non-symlinks
-+         * however. That's because for symlinks the access mode is ignored anyway and because on some kernels/file
-+         * systems trying to change the access mode will succeed but has no effect while on others it actively
-+         * fails. */
-+        if (!S_ISLNK(st->st_mode))
-+                if (chmod(procfs_path, st->st_mode & 07777) < 0)
-+                        return -errno;
-+
-         return 1;
- }
- 
- static int chown_recursive_internal(int fd, const struct stat *st, uid_t uid, gid_t gid) {
-+        _cleanup_closedir_ DIR *d = NULL;
-         bool changed = false;
-+        struct dirent *de;
-         int r;
- 
-         assert(fd >= 0);
-         assert(st);
- 
--        if (S_ISDIR(st->st_mode)) {
--                _cleanup_closedir_ DIR *d = NULL;
--                struct dirent *de;
--
--                d = fdopendir(fd);
--                if (!d) {
--                        r = -errno;
--                        goto finish;
--                }
--                fd = -1;
--
--                FOREACH_DIRENT_ALL(de, d, r = -errno; goto finish) {
--                        struct stat fst;
--
--                        if (dot_or_dot_dot(de->d_name))
--                                continue;
--
--                        if (fstatat(dirfd(d), de->d_name, &fst, AT_SYMLINK_NOFOLLOW) < 0) {
--                                r = -errno;
--                                goto finish;
--                        }
--
--                        if (S_ISDIR(fst.st_mode)) {
--                                int subdir_fd;
--
--                                subdir_fd = openat(dirfd(d), de->d_name, O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC|O_NOFOLLOW|O_NOATIME);
--                                if (subdir_fd < 0) {
--                                        r = -errno;
--                                        goto finish;
--                                }
--
--                                r = chown_recursive_internal(subdir_fd, &fst, uid, gid);
--                                if (r < 0)
--                                        goto finish;
--                                if (r > 0)
--                                        changed = true;
--                        } else {
--                                r = chown_one(dirfd(d), de->d_name, &fst, uid, gid);
--                                if (r < 0)
--                                        goto finish;
--                                if (r > 0)
--                                        changed = true;
--                        }
-+        d = fdopendir(fd);
-+        if (!d) {
-+                safe_close(fd);
-+                return -errno;
-+        }
-+
-+        FOREACH_DIRENT_ALL(de, d, return -errno) {
-+                _cleanup_close_ int path_fd = -1;
-+                struct stat fst;
-+
-+                if (dot_or_dot_dot(de->d_name))
-+                        continue;
-+
-+                /* Let's pin the child inode we want to fix now with an O_PATH fd, so that it cannot be swapped out
-+                 * while we manipulate it. */
-+                path_fd = openat(dirfd(d), de->d_name, O_PATH|O_CLOEXEC|O_NOFOLLOW);
-+                if (path_fd < 0)
-+                        return -errno;
-+
-+                if (fstat(path_fd, &fst) < 0)
-+                        return -errno;
-+
-+                if (S_ISDIR(fst.st_mode)) {
-+                        int subdir_fd;
-+
-+                        /* Convert it to a "real" (i.e. non-O_PATH) fd now */
-+                        subdir_fd = fd_reopen(path_fd, O_RDONLY|O_CLOEXEC|O_NOATIME);
-+                        if (subdir_fd < 0)
-+                                return subdir_fd;
-+
-+                        r = chown_recursive_internal(subdir_fd, &fst, uid, gid); /* takes possession of subdir_fd even on failure */
-+                        if (r < 0)
-+                                return r;
-+                        if (r > 0)
-+                                changed = true;
-+                } else {
-+                        r = chown_one(path_fd, &fst, uid, gid);
-+                        if (r < 0)
-+                                return r;
-+                        if (r > 0)
-+                                changed = true;
-                 }
-+        }
- 
--                r = chown_one(dirfd(d), NULL, st, uid, gid);
--        } else
--                r = chown_one(fd, NULL, st, uid, gid);
-+        r = chown_one(dirfd(d), st, uid, gid);
-         if (r < 0)
--                goto finish;
-+                return r;
- 
--        r = r > 0 || changed;
--
--finish:
--        safe_close(fd);
--        return r;
-+        return r > 0 || changed;
- }
- 
- int path_chown_recursive(const char *path, uid_t uid, gid_t gid) {
-@@ -111,7 +105,7 @@ int path_chown_recursive(const char *path, uid_t uid, gid_t gid) {
-         struct stat st;
-         int r;
- 
--        fd = open(path, O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC|O_NOFOLLOW|O_NOATIME);
-+        fd = open(path, O_RDONLY|O_DIRECTORY|O_CLOEXEC|O_NOFOLLOW|O_NOATIME);
-         if (fd < 0)
-                 return -errno;
- 
diff --git a/excludes b/excludes
index 9f7a5e5..9ef8b54 100644
--- a/excludes
+++ b/excludes
@@ -8,8 +8,6 @@
 /usr/lib/systemd/system-generators/systemd-system-update-generator
 /usr/lib/systemd/system-generators/systemd-veritysetup-generator
 /usr/lib/systemd/system/ldconfig.service
-/usr/lib/systemd/system/sockets.target.wants/systemd-journald-audit.socket
-/usr/lib/systemd/system/sysinit.target.wants/systemd-tmpfiles-setup-dev.service
 /usr/lib/systemd/system/system-update-cleanup.service
 /usr/lib/systemd/system/system-update.target
 /usr/lib/systemd/system/systemd-firstboot.service
diff --git a/install_append b/install_append
index 9ce359a..823a7ee 100644
--- a/install_append
+++ b/install_append
@@ -30,6 +30,8 @@ rm -f %{buildroot}/usr/lib/systemd/system/sysinit.target.wants/systemd-hwdb-upda
 rm -f %{buildroot}/usr/lib/systemd/system/sysinit.target.wants/systemd-journal-catalog-update.service
 rm -f %{buildroot}/usr/lib/systemd/system/sysinit.target.wants/systemd-sysusers.service
 rm -f %{buildroot}/usr/lib/systemd/system/sysinit.target.wants/systemd-update-done.service
+rm -f %{buildroot}/usr/lib/systemd/system/sysinit.target.wants/systemd-tmpfiles-setup-dev.service
+rm -f %{buildroot}/usr/lib/systemd/system/sockets.target.wants/systemd-journald-audit.socket
 
 # Do not ship broken symlinks
 rm -f %{buildroot}/etc/xdg/systemd/user
diff --git a/install_prepend b/install_prepend
index 3dbc384..2cfc30a 100644
--- a/install_prepend
+++ b/install_prepend
@@ -1,4 +1,4 @@
 pushd  builddir
-gcc  -o libsystemd.so.0.23.0  -Wl,--no-undefined -Wl,--as-needed -shared -fPIC -Wl,--start-group -Wl,-soname,libsystemd.so.0 -Wl,--whole-archive src/libsystemd/libsystemd_static.a src/journal/libjournal-client.a -Wl,--no-whole-archive -Wl,-z,relro -Wl,-z,now -pie -Wl,--gc-sections -O2 -g -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wformat -Wformat-security -Wno-error -Wl,-z,max-page-size=0x1000 -march=westmere -mtune=haswell -fstack-protector-strong -mzero-caller-saved-regs=used src/basic/libbasic.a src/basic/libbasic-gcrypt.a -shared -Wl,--version-script=/builddir/build/BUILD/systemd-239/src/libsystemd/libsystemd.sym /usr/lib64/liblzma.so //usr/lib64/libcap.a /usr/lib64/libblkid.a /usr/lib64/libmount.a -lgcrypt  -Wl,--end-group -pthread '-Wl,-rpath,$ORIGIN/src/basic' -Wl,-rpath-link,/builddir/build/BUILD/systemd-239/builddir/src/basic  
-gcc  -o pam_systemd.so 'pam_systemd@sha/src_login_pam_systemd.c.o' -Wl,--no-undefined -Wl,--as-needed -shared -fPIC -Wl,--start-group -Wl,-soname,pam_systemd.so -Wl,-z,relro -Wl,-z,now -pie -Wl,--gc-sections -O2 -g -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wformat -Wformat-security -Wno-error -Wl,-z,max-page-size=0x1000 -march=westmere -mtune=haswell -fstack-protector-strong -mzero-caller-saved-regs=used src/libsystemd/libsystemd_static.a src/basic/libbasic.a src/shared/libsystemd-shared-239.a -shared -Wl,--version-script=/builddir/build/BUILD/systemd-239/src/login/pam_systemd.sym -lpam -lpam_misc -Wl,--end-group -pthread '-Wl,-rpath,$ORIGIN/src/libsystemd:$ORIGIN/src/basic:$ORIGIN/src/shared' -Wl,-rpath-link,/builddir/build/BUILD/systemd-239/builddir/src/libsystemd:/builddir/build/BUILD/systemd-239/builddir/src/basic:/builddir/build/BUILD/systemd-239/builddir/src/shared  
-popd
\ No newline at end of file
+gcc  -o libsystemd.so.0.25.0 'systemd@sha/src_libsystemd_disable-mempool.c.o' -Wl,--no-undefined -Wl,--as-needed -shared -fPIC -Wl,--start-group -Wl,-soname,libsystemd.so.0 -Wl,--whole-archive src/libsystemd/libsystemd_static.a src/journal/libjournal-client.a -Wl,--no-whole-archive -Wl,-z,relro -Wl,-z,now -pie -Wl,--gc-sections -O2 -g -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wformat -Wformat-security -Wno-error -Wl,-z,max-page-size=0x1000 -march=westmere -mtune=haswell -fstack-protector-strong -mzero-caller-saved-regs=used -fno-lto src/basic/libbasic.a src/basic/libbasic-gcrypt.a -shared -Wl,--version-script=/builddir/build/BUILD/systemd-241/src/libsystemd/libsystemd.sym -lrt /usr/lib64/liblzma.so //usr/lib64/libcap.a /usr/lib64/libblkid.a /usr/lib64/libmount.a -lm -lgcrypt -lrt -Wl,--end-group -pthread '-Wl,-rpath,$ORIGIN/src/basic' -Wl,-rpath-link,/builddir/build/BUILD/systemd-241/builddir/src/basic
+gcc  -o pam_systemd.so 'pam_systemd@sha/src_login_pam_systemd.c.o' -Wl,--no-undefined -Wl,--as-needed -shared -fPIC -Wl,--start-group -Wl,-soname,pam_systemd.so -Wl,-z,relro -Wl,-z,now -pie -Wl,--gc-sections -O2 -g -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wformat -Wformat-security -Wno-error -Wl,-z,max-page-size=0x1000 -march=westmere -mtune=haswell -fstack-protector-strong -mzero-caller-saved-regs=used -fno-lto src/libsystemd/libsystemd_static.a src/basic/libbasic.a src/shared/libsystemd-shared-241.a -shared -Wl,--version-script=/builddir/build/BUILD/systemd-241/src/login/pam_systemd.sym -lpam -lpam_misc -lrt //usr/lib64/libcap.a -lm -lrt -lacl /usr/lib64/libcryptsetup.so -lgcrypt /usr/lib64/libip4tc.so /usr/lib64/libip6tc.so /usr/lib64/libkmod.so /usr/lib64/libmount.so /usr/lib64/libseccomp.so /usr/lib64/liblzma.so /usr/lib64/libblkid.so -Wl,--end-group -pthread '-Wl,-rpath,$ORIGIN/src/libsystemd:$ORIGIN/src/basic:$ORIGIN/src/shared' -Wl,-rpath-link,/builddir/build/BUILD/systemd-241/builddir/src/libsystemd:/builddir/build/BUILD/systemd-241/builddir/src/basic:/builddir/build/BUILD/systemd-241/builddir/src/shared
+popd
diff --git a/make_check_command b/make_check_command
new file mode 100644
index 0000000..c947f2d
--- /dev/null
+++ b/make_check_command
@@ -0,0 +1 @@
+ninja -C builddir test ||:
diff --git a/meson_options.txt b/meson_options.txt
index 16c1f2b..044bb79 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -1,6 +1,9 @@
 # -*- mode: meson -*-
 # SPDX-License-Identifier: LGPL-2.1+
 
+option('version-tag', type : 'string',
+       description : 'override the git version string')
+
 option('split-usr', type : 'combo', choices : ['auto', 'true', 'false'],
        description : '''/bin, /sbin aren't symlinks into /usr''')
 option('split-bin', type : 'combo', choices : ['auto', 'true', 'false'],
@@ -33,7 +36,6 @@ option('halt-local', type : 'string',
 
 option('quotaon-path', type : 'string', description : 'path to quotaon')
 option('quotacheck-path', type : 'string', description : 'path to quotacheck')
-option('kill-path', type : 'string', description : 'path to kill')
 option('kmod-path', type : 'string', description : 'path to kmod')
 option('kexec-path', type : 'string', description : 'path to kexec')
 option('sulogin-path', type : 'string', description : 'path to sulogin')
@@ -46,12 +48,18 @@ option('debug-shell', type : 'string', value : '/bin/sh',
        description : 'path to debug shell binary')
 option('debug-tty', type : 'string', value : '/dev/tty9',
        description : 'specify the tty device for debug shell')
-option('debug', type : 'array', choices : ['hashmap', 'mmap-cache'], value : [],
+option('debug-extra', type : 'array', choices : ['hashmap', 'mmap-cache', 'siphash', 'udev'], value : [],
        description : 'enable extra debugging')
 option('memory-accounting-default', type : 'boolean',
        description : 'enable MemoryAccounting= by default')
+option('bump-proc-sys-fs-file-max', type : 'boolean',
+       description : 'bump /proc/sys/fs/file-max to ULONG_MAX')
+option('bump-proc-sys-fs-nr-open', type : 'boolean',
+       description : 'bump /proc/sys/fs/nr_open to INT_MAX')
 option('valgrind', type : 'boolean', value : false,
        description : 'do extra operations to avoid valgrind warnings')
+option('log-trace', type : 'boolean', value : false,
+       description : 'enable low level debug logging')
 
 option('utmp', type : 'boolean',
        description : 'support for utmp/wtmp log handling')
@@ -89,8 +97,14 @@ option('timesyncd', type : 'boolean',
        description : 'install the systemd-timesyncd daemon')
 option('remote', type : 'combo', choices : ['auto', 'true', 'false'],
        description : 'support for "journal over the network"')
-option('myhostname', type : 'boolean',
-       description : 'nss-myhostname support')
+option('nss-myhostname', type : 'boolean',
+       description : 'install nss-myhostname module')
+option('nss-mymachines', type : 'combo', choices : ['auto', 'true', 'false'],
+       description : 'install nss-mymachines module')
+option('nss-resolve', type : 'combo', choices : ['auto', 'true', 'false'],
+       description : 'install nss-resolve module')
+option('nss-systemd', type : 'boolean',
+       description : 'install nss-systemd module')
 option('firstboot', type : 'boolean',
        description : 'support for firstboot mechanism')
 option('randomseed', type : 'boolean',
@@ -125,7 +139,7 @@ option('dbussessionservicedir', type : 'string',
        description : 'D-Bus session service directory')
 option('dbussystemservicedir', type : 'string',
        description : 'D-Bus system service directory')
-option('pkgconfigdatadir', type : 'string', value : 'share/pkgconfig',
+option('pkgconfigdatadir', type : 'string', value : '',
        description : 'directory for ')
 option('pkgconfiglibdir', type : 'string', value : '',
        description : 'directory for ')
@@ -145,28 +159,26 @@ option('compat-gateway-hostname', type : 'boolean', value : 'false',
 option('default-hierarchy', type : 'combo',
        choices : ['legacy', 'hybrid', 'unified'], value : 'hybrid',
        description : 'default cgroup hierarchy')
-option('time-epoch', type : 'string',
+option('default-net-naming-scheme', type : 'combo',
+       choices : ['latest', 'v238', 'v239', 'v240'],
+       description : 'default net.naming-scheme= value')
+option('time-epoch', type : 'integer', value : '-1',
        description : 'time epoch for time clients')
-option('system-uid-max', type : 'string',
+option('system-uid-max', type : 'integer', value : '-1',
        description : 'maximum system UID')
-option('system-gid-max', type : 'string',
+option('system-gid-max', type : 'integer', value : '-1',
        description : 'maximum system GID')
-option('dynamic-uid-min', type : 'string',
-       description : 'minimum dynamic UID',
-       value : '61184') # That's → 0x0000EF00 in hex
-option('dynamic-uid-max', type : 'string',
-       description : 'maximum dynamic UID',
-       value : '65519') # That's → 0x0000FFEF in hex
-option('container-uid-base-min', type : 'string',
-       description : 'minimum container UID base',
-       value : '524288') # That's → 0x00080000 in hex
-option('container-uid-base-max', type : 'string',
-       description : 'maximum container UID base',
-       value : '1878982656') # That's → 0x6FFF0000 in hex
-option('tty-gid', type : 'string',
-       description : 'the numeric GID of the "tty" group',
-       value : '5')
-option('users-gid', type : 'string',
+option('dynamic-uid-min', type : 'integer', value : 0x0000EF00,
+       description : 'minimum dynamic UID')
+option('dynamic-uid-max', type : 'integer', value : 0x0000FFEF,
+       description : 'maximum dynamic UID')
+option('container-uid-base-min', type : 'integer', value : 0x00080000,
+       description : 'minimum container UID base')
+option('container-uid-base-max', type : 'integer', value : 0x6FFF0000,
+       description : 'maximum container UID base')
+option('tty-gid', type : 'integer', value : 5,
+       description : 'the numeric GID of the "tty" group')
+option('users-gid', type : 'integer', value : '-1',
        description : 'the numeric GID of the "users" group')
 option('adm-group', type : 'boolean',
        description : 'the ACL for adm group should be added')
@@ -186,6 +198,8 @@ option('default-kill-user-processes', type : 'boolean',
        description : 'the default value for KillUserProcesses= setting')
 option('gshadow', type : 'boolean',
        description : 'support for shadow group')
+option('default-locale', type : 'string', value : '',
+       description : 'default locale used when /etc/locale.conf does not exist')
 
 option('default-dnssec', type : 'combo',
        description : 'default DNSSEC mode',
@@ -195,7 +209,7 @@ option('default-dns-over-tls', type : 'combo',
        description : 'default DNS-over-TLS mode',
        choices : ['opportunistic', 'no'],
        value : 'no')
-option('dns-over-tls', type : 'combo', choices : ['auto', 'true', 'false'],
+option('dns-over-tls', type : 'combo', choices : ['auto', 'gnutls', 'openssl', 'true', 'false'],
        description : 'DNS-over-TLS support')
 option('dns-servers', type : 'string',
        description : 'space-separated list of default DNS servers',
@@ -221,7 +235,7 @@ option('smack', type : 'boolean',
 option('smack-run-label', type : 'string',
        description : 'run systemd --system itself with a specific SMACK label')
 option('polkit', type : 'combo', choices : ['auto', 'true', 'false'],
-       description : 'PolicyKit support')
+       description : 'polkit support')
 option('ima', type : 'boolean',
        description : 'IMA support')
 
@@ -247,8 +261,6 @@ option('libidn2', type : 'combo', choices : ['auto', 'true', 'false'],
        description : 'libidn2 support')
 option('libidn', type : 'combo', choices : ['auto', 'true', 'false'],
        description : 'libidn support')
-option('nss-systemd', type : 'boolean',
-       description : 'enable nss-systemd')
 option('libiptc', type : 'combo', choices : ['auto', 'true', 'false'],
        description : 'libiptc support')
 option('qrencode', type : 'combo', choices : ['auto', 'true', 'false'],
@@ -257,6 +269,8 @@ option('gcrypt', type : 'combo', choices : ['auto', 'true', 'false'],
        description : 'gcrypt support')
 option('gnutls', type : 'combo', choices : ['auto', 'true', 'false'],
        description : 'gnutls support')
+option('openssl', type : 'combo', choices : ['auto', 'true', 'false'],
+       description : 'openssl support')
 option('elfutils', type : 'combo', choices : ['auto', 'true', 'false'],
        description : 'elfutils support')
 option('zlib', type : 'combo', choices : ['auto', 'true', 'false'],
@@ -278,9 +292,9 @@ option('dbus', type : 'combo', choices : ['auto', 'true', 'false'],
 
 option('gnu-efi', type : 'combo', choices : ['auto', 'true', 'false'],
        description : 'gnu-efi support for sd-boot')
-option('efi-cc', type : 'string', value : 'gcc',
+option('efi-cc', type : 'array',
        description : 'the compiler to use for EFI modules')
-option('efi-ld', type : 'string', value : 'ld',
+option('efi-ld', type : 'string',
        description : 'the linker to use for EFI modules')
 option('efi-libdir', type : 'string',
        description : 'path to the EFI lib directory')
@@ -288,7 +302,7 @@ option('efi-ldsdir', type : 'string',
        description : 'path to the EFI lds directory')
 option('efi-includedir', type : 'string', value : '/usr/include/efi',
        description : 'path to the EFI header directory')
-option('tpm-pcrindex', type : 'string', value : '8',
+option('tpm-pcrindex', type : 'integer', value : 8,
        description : 'TPM PCR register number to use')
 
 option('bashcompletiondir', type : 'string',
diff --git a/mkdirp-disable.patch b/mkdirp-disable.patch
deleted file mode 100644
index afaf6e3..0000000
--- a/mkdirp-disable.patch
+++ /dev/null
@@ -1,10 +0,0 @@
---- systemd-239/src/basic/mkdir.c~	2019-01-03 20:06:26.000000000 +0000
-+++ systemd-239/src/basic/mkdir.c	2019-01-03 20:06:51.775405804 +0000
-@@ -155,6 +155,6 @@
-         return 0;
- }
- 
--int mkdir_p(const char *path, mode_t mode) {
-+int __attribute__ ((weak)) mkdir_p(const char *path, mode_t mode)  {
-         return mkdir_p_internal(NULL, path, mode, mkdir_errno_wrapper);
- }
diff --git a/mq_getattr.patch b/mq_getattr.patch
deleted file mode 100644
index d5beb9e..0000000
--- a/mq_getattr.patch
+++ /dev/null
@@ -1,34 +0,0 @@
---- systemd-239/src/libsystemd/sd-daemon/sd-daemon.c~	2018-06-22 11:11:49.000000000 +0000
-+++ systemd-239/src/libsystemd/sd-daemon/sd-daemon.c	2019-01-04 15:35:25.727429621 +0000
-@@ -403,6 +403,11 @@
-         return 1;
- }
- 
-+static inline mq_getattr(int fd, struct mq_attr *data)
-+{
-+	return syscall(__NR_mq_getsetattr, fd, NULL, data);
-+}
-+
- _public_ int sd_is_mq(int fd, const char *path) {
-         struct mq_attr attr;
- 
---- systemd-239/src/libsystemd/sd-daemon/sd-daemon.c~	2019-01-04 15:35:25.000000000 +0000
-+++ systemd-239/src/libsystemd/sd-daemon/sd-daemon.c	2019-01-04 15:39:28.242426245 +0000
-@@ -403,7 +403,7 @@
-         return 1;
- }
- 
--static inline mq_getattr(int fd, struct mq_attr *data)
-+static inline mq_getattr_local(int fd, struct mq_attr *data)
- {
- 	return syscall(__NR_mq_getsetattr, fd, NULL, data);
- }
-@@ -414,7 +414,7 @@
-         /* Check that the fd is valid */
-         assert_return(fcntl(fd, F_GETFD) >= 0, -errno);
- 
--        if (mq_getattr(fd, &attr) < 0) {
-+        if (mq_getattr_local(fd, &attr) < 0) {
-                 if (errno == EBADF)
-                         /* A non-mq fd (or an invalid one, but we ruled that out above) */
-                         return 0;
diff --git a/no-audit-by-default.patch b/no-audit-by-default.patch
deleted file mode 100644
index 5f6e54d..0000000
--- a/no-audit-by-default.patch
+++ /dev/null
@@ -1,19 +0,0 @@
-Audit by default is pretty expensive; leave it off by default
-
-The admin can turn it on using normal audit tools
-
---- systemd-239/src/journal/journald-audit.c~	2018-06-22 11:11:49.000000000 +0000
-+++ systemd-239/src/journal/journald-audit.c	2018-12-27 00:40:00.453801075 +0000
-@@ -536,10 +536,11 @@
-         if (r < 0)
-                 return log_error_errno(r, "Failed to add audit fd to event loop: %m");
- 
-+#if 0
-         /* We are listening now, try to enable audit */
-         r = enable_audit(s->audit_fd, true);
-         if (r < 0)
-                 log_warning_errno(r, "Failed to issue audit enable call: %m");
--
-+#endif
-         return 0;
- }
diff --git a/no-xz-for-libsystemd.patch b/no-xz-for-libsystemd.patch
deleted file mode 100644
index 423c856..0000000
--- a/no-xz-for-libsystemd.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- systemd-239/src/journal/compress.c~	2018-06-22 11:11:49.000000000 +0000
-+++ systemd-239/src/journal/compress.c	2019-01-02 21:42:50.373528559 +0000
-@@ -26,6 +26,8 @@
- #include "string-util.h"
- #include "util.h"
- 
-+#undef HAVE_XZ
-+#define HAVE_XZ 0
- #if HAVE_LZ4
- DEFINE_TRIVIAL_CLEANUP_FUNC(LZ4F_compressionContext_t, LZ4F_freeCompressionContext);
- DEFINE_TRIVIAL_CLEANUP_FUNC(LZ4F_decompressionContext_t, LZ4F_freeDecompressionContext);
diff --git a/options.conf b/options.conf
index 7c81557..4201f42 100644
--- a/options.conf
+++ b/options.conf
@@ -1,6 +1,6 @@
 [package]
 name = systemd
-url = https://github.com/systemd/systemd/archive/v239.tar.gz
+url = https://github.com/systemd/systemd/archive/v241.tar.gz
 archives = 
 giturl = https://github.com/systemd/systemd.git
 
@@ -8,7 +8,7 @@ giturl = https://github.com/systemd/systemd.git
 # build 32 bit libraries
 32bit = true
 # allow package to build with test failures
-allow_test_failures = false
+allow_test_failures = true
 # unset %build ld_as_needed variable
 asneeded = false
 # this package is trusted enough to automatically update (used by other tools)
diff --git a/release b/release
index f414671..2c36bbd 100644
--- a/release
+++ b/release
@@ -1 +1 @@
-226
+227
diff --git a/series b/series
index d648ab4..4e07ed9 100644
--- a/series
+++ b/series
@@ -36,18 +36,8 @@
 0036-Notify-systemd-earlier-that-resolved-is-ready.patch
 0037-Do-not-crash-if-udev-hasn-t-initialized-one-link-yet.patch
 0038-Hand-off-coredumps-to-a-wrapper-that-will-optionally.patch
-0039-build-sys-Detect-whether-struct-statx-is-defined-in-.patch
-0040-meson-rename-Ddebug-to-Ddebug-extra.patch
-0041-Make-bzip2-an-optional-dependency-for-systemd-import.patch
-0042-add-stateless-for-locale-files-locale.conf-00-keyboa.patch
+0039-add-stateless-for-locale-files-locale.conf-00-keyboa.patch
+0040-Do-not-enable-audit-by-default-in-the-journal.patch
+0041-Disable-XZ-support-in-the-journal.patch
+0042-Localize-1-symbol.patch
 0043-mount-setup-Harden-a-bit-the-options-for-certan-moun.patch
-cve-2018-15687.patch
-cve-2018-15686.patch
-CVE-2018-15688.patch
-CVE-2018-6954_2.patch
-no-audit-by-default.patch
-no-xz-for-libsystemd.patch
-mq_getattr.patch
-systemd-stack-1.patch
-CVE-2018-16864.patch
-CVE-2018-16866.patch
diff --git a/symbols b/symbols
index ac8f232..62a62e8 100644
--- a/symbols
+++ b/symbols
@@ -50,6 +50,8 @@ libsystemd.so.0:LIBSYSTEMD_236
 libsystemd.so.0:LIBSYSTEMD_237
 libsystemd.so.0:LIBSYSTEMD_238
 libsystemd.so.0:LIBSYSTEMD_239
+libsystemd.so.0:LIBSYSTEMD_240
+libsystemd.so.0:LIBSYSTEMD_241
 libsystemd.so.0:sd_booted
 libsystemd.so.0:sd_bus_add_fallback
 libsystemd.so.0:sd_bus_add_fallback_vtable
@@ -67,6 +69,7 @@ libsystemd.so.0:sd_bus_call_method
 libsystemd.so.0:sd_bus_call_method_async
 libsystemd.so.0:sd_bus_can_send
 libsystemd.so.0:sd_bus_close
+libsystemd.so.0:sd_bus_close_unref
 libsystemd.so.0:sd_bus_creds_get_audit_login_uid
 libsystemd.so.0:sd_bus_creds_get_audit_session_id
 libsystemd.so.0:sd_bus_creds_get_augmented_mask
@@ -126,6 +129,7 @@ libsystemd.so.0:sd_bus_error_free
 libsystemd.so.0:sd_bus_error_get_errno
 libsystemd.so.0:sd_bus_error_has_name
 libsystemd.so.0:sd_bus_error_is_set
+libsystemd.so.0:sd_bus_error_move
 libsystemd.so.0:sd_bus_error_set
 libsystemd.so.0:sd_bus_error_set_const
 libsystemd.so.0:sd_bus_error_set_errno
@@ -137,6 +141,7 @@ libsystemd.so.0:sd_bus_flush_close_unref
 libsystemd.so.0:sd_bus_get_address
 libsystemd.so.0:sd_bus_get_allow_interactive_authorization
 libsystemd.so.0:sd_bus_get_bus_id
+libsystemd.so.0:sd_bus_get_close_on_exit
 libsystemd.so.0:sd_bus_get_connected_signal
 libsystemd.so.0:sd_bus_get_creds_mask
 libsystemd.so.0:sd_bus_get_current_handler
@@ -148,6 +153,7 @@ libsystemd.so.0:sd_bus_get_event
 libsystemd.so.0:sd_bus_get_events
 libsystemd.so.0:sd_bus_get_exit_on_disconnect
 libsystemd.so.0:sd_bus_get_fd
+libsystemd.so.0:sd_bus_get_method_call_timeout
 libsystemd.so.0:sd_bus_get_n_queued_read
 libsystemd.so.0:sd_bus_get_n_queued_write
 libsystemd.so.0:sd_bus_get_name_creds
@@ -228,6 +234,7 @@ libsystemd.so.0:sd_bus_message_read
 libsystemd.so.0:sd_bus_message_read_array
 libsystemd.so.0:sd_bus_message_read_basic
 libsystemd.so.0:sd_bus_message_read_strv
+libsystemd.so.0:sd_bus_message_readv
 libsystemd.so.0:sd_bus_message_ref
 libsystemd.so.0:sd_bus_message_rewind
 libsystemd.so.0:sd_bus_message_seal
@@ -276,11 +283,13 @@ libsystemd.so.0:sd_bus_set_address
 libsystemd.so.0:sd_bus_set_allow_interactive_authorization
 libsystemd.so.0:sd_bus_set_anonymous
 libsystemd.so.0:sd_bus_set_bus_client
+libsystemd.so.0:sd_bus_set_close_on_exit
 libsystemd.so.0:sd_bus_set_connected_signal
 libsystemd.so.0:sd_bus_set_description
 libsystemd.so.0:sd_bus_set_exec
 libsystemd.so.0:sd_bus_set_exit_on_disconnect
 libsystemd.so.0:sd_bus_set_fd
+libsystemd.so.0:sd_bus_set_method_call_timeout
 libsystemd.so.0:sd_bus_set_monitor
 libsystemd.so.0:sd_bus_set_property
 libsystemd.so.0:sd_bus_set_sender
@@ -325,6 +334,66 @@ libsystemd.so.0:sd_bus_track_unref
 libsystemd.so.0:sd_bus_try_close
 libsystemd.so.0:sd_bus_unref
 libsystemd.so.0:sd_bus_wait
+libsystemd.so.0:sd_device_enumerator_add_match_parent
+libsystemd.so.0:sd_device_enumerator_add_match_property
+libsystemd.so.0:sd_device_enumerator_add_match_subsystem
+libsystemd.so.0:sd_device_enumerator_add_match_sysattr
+libsystemd.so.0:sd_device_enumerator_add_match_sysname
+libsystemd.so.0:sd_device_enumerator_add_match_tag
+libsystemd.so.0:sd_device_enumerator_allow_uninitialized
+libsystemd.so.0:sd_device_enumerator_get_device_first
+libsystemd.so.0:sd_device_enumerator_get_device_next
+libsystemd.so.0:sd_device_enumerator_get_subsystem_first
+libsystemd.so.0:sd_device_enumerator_get_subsystem_next
+libsystemd.so.0:sd_device_enumerator_new
+libsystemd.so.0:sd_device_enumerator_ref
+libsystemd.so.0:sd_device_enumerator_unref
+libsystemd.so.0:sd_device_get_devlink_first
+libsystemd.so.0:sd_device_get_devlink_next
+libsystemd.so.0:sd_device_get_devname
+libsystemd.so.0:sd_device_get_devnum
+libsystemd.so.0:sd_device_get_devpath
+libsystemd.so.0:sd_device_get_devtype
+libsystemd.so.0:sd_device_get_driver
+libsystemd.so.0:sd_device_get_ifindex
+libsystemd.so.0:sd_device_get_is_initialized
+libsystemd.so.0:sd_device_get_parent
+libsystemd.so.0:sd_device_get_parent_with_subsystem_devtype
+libsystemd.so.0:sd_device_get_property_first
+libsystemd.so.0:sd_device_get_property_next
+libsystemd.so.0:sd_device_get_property_value
+libsystemd.so.0:sd_device_get_subsystem
+libsystemd.so.0:sd_device_get_sysattr_first
+libsystemd.so.0:sd_device_get_sysattr_next
+libsystemd.so.0:sd_device_get_sysattr_value
+libsystemd.so.0:sd_device_get_sysname
+libsystemd.so.0:sd_device_get_sysnum
+libsystemd.so.0:sd_device_get_syspath
+libsystemd.so.0:sd_device_get_tag_first
+libsystemd.so.0:sd_device_get_tag_next
+libsystemd.so.0:sd_device_get_usec_since_initialized
+libsystemd.so.0:sd_device_has_tag
+libsystemd.so.0:sd_device_monitor_attach_event
+libsystemd.so.0:sd_device_monitor_detach_event
+libsystemd.so.0:sd_device_monitor_filter_add_match_subsystem_devtype
+libsystemd.so.0:sd_device_monitor_filter_add_match_tag
+libsystemd.so.0:sd_device_monitor_filter_remove
+libsystemd.so.0:sd_device_monitor_filter_update
+libsystemd.so.0:sd_device_monitor_get_event
+libsystemd.so.0:sd_device_monitor_get_event_source
+libsystemd.so.0:sd_device_monitor_new
+libsystemd.so.0:sd_device_monitor_ref
+libsystemd.so.0:sd_device_monitor_set_receive_buffer_size
+libsystemd.so.0:sd_device_monitor_start
+libsystemd.so.0:sd_device_monitor_stop
+libsystemd.so.0:sd_device_monitor_unref
+libsystemd.so.0:sd_device_new_from_device_id
+libsystemd.so.0:sd_device_new_from_devnum
+libsystemd.so.0:sd_device_new_from_subsystem_sysname
+libsystemd.so.0:sd_device_new_from_syspath
+libsystemd.so.0:sd_device_ref
+libsystemd.so.0:sd_device_set_sysattr_value
+libsystemd.so.0:sd_device_unref
 libsystemd.so.0:sd_event_add_child
 libsystemd.so.0:sd_event_add_defer
 libsystemd.so.0:sd_event_add_exit
@@ -354,6 +423,7 @@ libsystemd.so.0:sd_event_source_get_description
 libsystemd.so.0:sd_event_source_get_destroy_callback
 libsystemd.so.0:sd_event_source_get_enabled
 libsystemd.so.0:sd_event_source_get_event
+libsystemd.so.0:sd_event_source_get_floating
 libsystemd.so.0:sd_event_source_get_inotify_mask
 libsystemd.so.0:sd_event_source_get_io_events
 libsystemd.so.0:sd_event_source_get_io_fd
@@ -370,6 +440,7 @@ libsystemd.so.0:sd_event_source_ref
 libsystemd.so.0:sd_event_source_set_description
 libsystemd.so.0:sd_event_source_set_destroy_callback
 libsystemd.so.0:sd_event_source_set_enabled
+libsystemd.so.0:sd_event_source_set_floating
 libsystemd.so.0:sd_event_source_set_io_events
 libsystemd.so.0:sd_event_source_set_io_fd
 libsystemd.so.0:sd_event_source_set_io_fd_own
@@ -385,8 +456,15 @@ libsystemd.so.0:sd_get_machine_names
 libsystemd.so.0:sd_get_seats
 libsystemd.so.0:sd_get_sessions
 libsystemd.so.0:sd_get_uids
+libsystemd.so.0:sd_hwdb_enumerate
+libsystemd.so.0:sd_hwdb_get
+libsystemd.so.0:sd_hwdb_new
+libsystemd.so.0:sd_hwdb_ref
+libsystemd.so.0:sd_hwdb_seek
+libsystemd.so.0:sd_hwdb_unref
 libsystemd.so.0:sd_id128_from_string
 libsystemd.so.0:sd_id128_get_boot
+libsystemd.so.0:sd_id128_get_boot_app_specific
 libsystemd.so.0:sd_id128_get_invocation
 libsystemd.so.0:sd_id128_get_machine
 libsystemd.so.0:sd_id128_get_machine_app_specific
diff --git a/symbols32 b/symbols32
index ac8f232..62a62e8 100644
--- a/symbols32
+++ b/symbols32
@@ -50,6 +50,8 @@ libsystemd.so.0:LIBSYSTEMD_236
 libsystemd.so.0:LIBSYSTEMD_237
 libsystemd.so.0:LIBSYSTEMD_238
 libsystemd.so.0:LIBSYSTEMD_239
+libsystemd.so.0:LIBSYSTEMD_240
+libsystemd.so.0:LIBSYSTEMD_241
 libsystemd.so.0:sd_booted
 libsystemd.so.0:sd_bus_add_fallback
 libsystemd.so.0:sd_bus_add_fallback_vtable
@@ -67,6 +69,7 @@ libsystemd.so.0:sd_bus_call_method
 libsystemd.so.0:sd_bus_call_method_async
 libsystemd.so.0:sd_bus_can_send
 libsystemd.so.0:sd_bus_close
+libsystemd.so.0:sd_bus_close_unref
 libsystemd.so.0:sd_bus_creds_get_audit_login_uid
 libsystemd.so.0:sd_bus_creds_get_audit_session_id
 libsystemd.so.0:sd_bus_creds_get_augmented_mask
@@ -126,6 +129,7 @@ libsystemd.so.0:sd_bus_error_free
 libsystemd.so.0:sd_bus_error_get_errno
 libsystemd.so.0:sd_bus_error_has_name
 libsystemd.so.0:sd_bus_error_is_set
+libsystemd.so.0:sd_bus_error_move
 libsystemd.so.0:sd_bus_error_set
 libsystemd.so.0:sd_bus_error_set_const
 libsystemd.so.0:sd_bus_error_set_errno
@@ -137,6 +141,7 @@ libsystemd.so.0:sd_bus_flush_close_unref
 libsystemd.so.0:sd_bus_get_address
 libsystemd.so.0:sd_bus_get_allow_interactive_authorization
 libsystemd.so.0:sd_bus_get_bus_id
+libsystemd.so.0:sd_bus_get_close_on_exit
 libsystemd.so.0:sd_bus_get_connected_signal
 libsystemd.so.0:sd_bus_get_creds_mask
 libsystemd.so.0:sd_bus_get_current_handler
@@ -148,6 +153,7 @@ libsystemd.so.0:sd_bus_get_event
 libsystemd.so.0:sd_bus_get_events
 libsystemd.so.0:sd_bus_get_exit_on_disconnect
 libsystemd.so.0:sd_bus_get_fd
+libsystemd.so.0:sd_bus_get_method_call_timeout
 libsystemd.so.0:sd_bus_get_n_queued_read
 libsystemd.so.0:sd_bus_get_n_queued_write
 libsystemd.so.0:sd_bus_get_name_creds
@@ -228,6 +234,7 @@ libsystemd.so.0:sd_bus_message_read
 libsystemd.so.0:sd_bus_message_read_array
 libsystemd.so.0:sd_bus_message_read_basic
 libsystemd.so.0:sd_bus_message_read_strv
+libsystemd.so.0:sd_bus_message_readv
 libsystemd.so.0:sd_bus_message_ref
 libsystemd.so.0:sd_bus_message_rewind
 libsystemd.so.0:sd_bus_message_seal
@@ -276,11 +283,13 @@ libsystemd.so.0:sd_bus_set_address
 libsystemd.so.0:sd_bus_set_allow_interactive_authorization
 libsystemd.so.0:sd_bus_set_anonymous
 libsystemd.so.0:sd_bus_set_bus_client
+libsystemd.so.0:sd_bus_set_close_on_exit
 libsystemd.so.0:sd_bus_set_connected_signal
 libsystemd.so.0:sd_bus_set_description
 libsystemd.so.0:sd_bus_set_exec
 libsystemd.so.0:sd_bus_set_exit_on_disconnect
 libsystemd.so.0:sd_bus_set_fd
+libsystemd.so.0:sd_bus_set_method_call_timeout
 libsystemd.so.0:sd_bus_set_monitor
 libsystemd.so.0:sd_bus_set_property
 libsystemd.so.0:sd_bus_set_sender
@@ -325,6 +334,66 @@ libsystemd.so.0:sd_bus_track_unref
 libsystemd.so.0:sd_bus_try_close
 libsystemd.so.0:sd_bus_unref
 libsystemd.so.0:sd_bus_wait
+libsystemd.so.0:sd_device_enumerator_add_match_parent
+libsystemd.so.0:sd_device_enumerator_add_match_property
+libsystemd.so.0:sd_device_enumerator_add_match_subsystem
+libsystemd.so.0:sd_device_enumerator_add_match_sysattr
+libsystemd.so.0:sd_device_enumerator_add_match_sysname
+libsystemd.so.0:sd_device_enumerator_add_match_tag
+libsystemd.so.0:sd_device_enumerator_allow_uninitialized
+libsystemd.so.0:sd_device_enumerator_get_device_first
+libsystemd.so.0:sd_device_enumerator_get_device_next
+libsystemd.so.0:sd_device_enumerator_get_subsystem_first
+libsystemd.so.0:sd_device_enumerator_get_subsystem_next
+libsystemd.so.0:sd_device_enumerator_new
+libsystemd.so.0:sd_device_enumerator_ref
+libsystemd.so.0:sd_device_enumerator_unref
+libsystemd.so.0:sd_device_get_devlink_first
+libsystemd.so.0:sd_device_get_devlink_next
+libsystemd.so.0:sd_device_get_devname
+libsystemd.so.0:sd_device_get_devnum
+libsystemd.so.0:sd_device_get_devpath
+libsystemd.so.0:sd_device_get_devtype
+libsystemd.so.0:sd_device_get_driver
+libsystemd.so.0:sd_device_get_ifindex
+libsystemd.so.0:sd_device_get_is_initialized
+libsystemd.so.0:sd_device_get_parent
+libsystemd.so.0:sd_device_get_parent_with_subsystem_devtype
+libsystemd.so.0:sd_device_get_property_first
+libsystemd.so.0:sd_device_get_property_next
+libsystemd.so.0:sd_device_get_property_value
+libsystemd.so.0:sd_device_get_subsystem
+libsystemd.so.0:sd_device_get_sysattr_first
+libsystemd.so.0:sd_device_get_sysattr_next
+libsystemd.so.0:sd_device_get_sysattr_value
+libsystemd.so.0:sd_device_get_sysname
+libsystemd.so.0:sd_device_get_sysnum
+libsystemd.so.0:sd_device_get_syspath
+libsystemd.so.0:sd_device_get_tag_first
+libsystemd.so.0:sd_device_get_tag_next
+libsystemd.so.0:sd_device_get_usec_since_initialized
+libsystemd.so.0:sd_device_has_tag
+libsystemd.so.0:sd_device_monitor_attach_event
+libsystemd.so.0:sd_device_monitor_detach_event
+libsystemd.so.0:sd_device_monitor_filter_add_match_subsystem_devtype
+libsystemd.so.0:sd_device_monitor_filter_add_match_tag
+libsystemd.so.0:sd_device_monitor_filter_remove
+libsystemd.so.0:sd_device_monitor_filter_update
+libsystemd.so.0:sd_device_monitor_get_event
+libsystemd.so.0:sd_device_monitor_get_event_source
+libsystemd.so.0:sd_device_monitor_new
+libsystemd.so.0:sd_device_monitor_ref
+libsystemd.so.0:sd_device_monitor_set_receive_buffer_size
+libsystemd.so.0:sd_device_monitor_start
+libsystemd.so.0:sd_device_monitor_stop
+libsystemd.so.0:sd_device_monitor_unref
+libsystemd.so.0:sd_device_new_from_device_id
+libsystemd.so.0:sd_device_new_from_devnum
+libsystemd.so.0:sd_device_new_from_subsystem_sysname
+libsystemd.so.0:sd_device_new_from_syspath
+libsystemd.so.0:sd_device_ref
+libsystemd.so.0:sd_device_set_sysattr_value
+libsystemd.so.0:sd_device_unref
 libsystemd.so.0:sd_event_add_child
 libsystemd.so.0:sd_event_add_defer
 libsystemd.so.0:sd_event_add_exit
@@ -354,6 +423,7 @@ libsystemd.so.0:sd_event_source_get_description
 libsystemd.so.0:sd_event_source_get_destroy_callback
 libsystemd.so.0:sd_event_source_get_enabled
 libsystemd.so.0:sd_event_source_get_event
+libsystemd.so.0:sd_event_source_get_floating
 libsystemd.so.0:sd_event_source_get_inotify_mask
 libsystemd.so.0:sd_event_source_get_io_events
 libsystemd.so.0:sd_event_source_get_io_fd
@@ -370,6 +440,7 @@ libsystemd.so.0:sd_event_source_ref
 libsystemd.so.0:sd_event_source_set_description
 libsystemd.so.0:sd_event_source_set_destroy_callback
 libsystemd.so.0:sd_event_source_set_enabled
+libsystemd.so.0:sd_event_source_set_floating
 libsystemd.so.0:sd_event_source_set_io_events
 libsystemd.so.0:sd_event_source_set_io_fd
 libsystemd.so.0:sd_event_source_set_io_fd_own
@@ -385,8 +456,15 @@ libsystemd.so.0:sd_get_machine_names
 libsystemd.so.0:sd_get_seats
 libsystemd.so.0:sd_get_sessions
 libsystemd.so.0:sd_get_uids
+libsystemd.so.0:sd_hwdb_enumerate
+libsystemd.so.0:sd_hwdb_get
+libsystemd.so.0:sd_hwdb_new
+libsystemd.so.0:sd_hwdb_ref
+libsystemd.so.0:sd_hwdb_seek
+libsystemd.so.0:sd_hwdb_unref
 libsystemd.so.0:sd_id128_from_string
 libsystemd.so.0:sd_id128_get_boot
+libsystemd.so.0:sd_id128_get_boot_app_specific
 libsystemd.so.0:sd_id128_get_invocation
 libsystemd.so.0:sd_id128_get_machine
 libsystemd.so.0:sd_id128_get_machine_app_specific
diff --git a/systemd-stack-1.patch b/systemd-stack-1.patch
deleted file mode 100644
index 5ca8023..0000000
--- a/systemd-stack-1.patch
+++ /dev/null
@@ -1,33 +0,0 @@
-commit 052c57f132f04a3cf4148f87561618da1a6908b4
-Author: Zbigniew Jędrzejewski-Szmek <zbyszek@in.waw.pl>
-Date:   Wed Dec 5 22:45:02 2018 +0100
-
-    journald: set a limit on the number of fields (1k)
-    
-    We allocate a iovec entry for each field, so with many short entries,
-    our memory usage and processing time can be large, even with a relatively
-    small message size. Let's refuse overly long entries.
-    
-    CVE-2018-16865
-    https://bugzilla.redhat.com/show_bug.cgi?id=1653861
-    
-    What from I can see, the problem is not from an alloca, despite what the CVE
-    description says, but from the attack multiplication that comes from creating
-    many very small iovecs: (void* + size_t) for each three bytes of input message.
-
-diff --git a/src/journal/journald-native.c b/src/journal/journald-native.c
-index e86178ed77..d0fee2a797 100644
---- a/src/journal/journald-native.c
-+++ b/src/journal/journald-native.c
-@@ -141,6 +141,11 @@ static int server_process_entry(
-                 }
- 
-                 /* A property follows */
-+                if (n > 1024) {
-+                        log_debug("Received an entry that has more than " STRINGIFY(1024) " fields, ignoring entry.");
-+                        r = 1;
-+                        goto finish;
-+                }
- 
-                 /* n existing properties, 1 new, +1 for _TRANSPORT */
-                 if (!GREEDY_REALLOC(iovec, m,
diff --git a/systemd-stack-2.patch b/systemd-stack-2.patch
deleted file mode 100644
index 3825b42..0000000
--- a/systemd-stack-2.patch
+++ /dev/null
@@ -1,69 +0,0 @@
-commit ef4d6abe7c7fab6cbff975b32e76b09feee56074
-Author: Zbigniew Jędrzejewski-Szmek <zbyszek@in.waw.pl>
-Date:   Fri Dec 7 10:48:10 2018 +0100
-
-    journal-remote: set a limit on the number of fields in a message
-    
-    Existing use of E2BIG is replaced with ENOBUFS (entry too long), and E2BIG is
-    reused for the new error condition (too many fields).
-    
-    This matches the change done for systemd-journald, hence forming the second
-    part of the fix for CVE-2018-16865
-    (https://bugzilla.redhat.com/show_bug.cgi?id=1653861).
-
-diff --git a/src/journal-remote/journal-remote-main.c b/src/journal-remote/journal-remote-main.c
-index 8543dbac39..802c3ea608 100644
---- a/src/journal-remote/journal-remote-main.c
-+++ b/src/journal-remote/journal-remote-main.c
-@@ -222,9 +222,12 @@ static int process_http_upload(
-                 if (r == -EAGAIN)
-                         break;
-                 if (r < 0) {
--                        if (r == -E2BIG)
--                                log_warning_errno(r, "Entry is too above maximum of %u, aborting connection %p.",
-+                        if (r == -ENOBUFS)
-+                                log_warning_errno(r, "Entry is above the maximum of %u, aborting connection %p.",
-                                                   DATA_SIZE_MAX, connection);
-+                        else if (r == -E2BIG)
-+                                log_warning_errno(r, "Entry with more fields than the maximum of %u, aborting connection %p.",
-+                                                  ENTRY_FIELD_COUNT_MAX, connection);
-                         else
-                                 log_warning_errno(r, "Failed to process data, aborting connection %p: %m",
-                                                   connection);
-diff --git a/src/journal-remote/journal-remote.c b/src/journal-remote/journal-remote.c
-index 3c0916c438..1da32c5f85 100644
---- a/src/journal-remote/journal-remote.c
-+++ b/src/journal-remote/journal-remote.c
-@@ -407,6 +407,9 @@ int journal_remote_handle_raw_source(
-                 log_debug("%zu active sources remaining", s->active);
-                 return 0;
-         } else if (r == -E2BIG) {
-+                log_notice("Entry with too many fields, skipped");
-+                return 1;
-+        } else if (r == -ENOBUFS) {
-                 log_notice("Entry too big, skipped");
-                 return 1;
-         } else if (r == -EAGAIN) {
-diff --git a/src/shared/journal-importer.c b/src/shared/journal-importer.c
-index b0e619205d..8638cd3cc9 100644
---- a/src/shared/journal-importer.c
-+++ b/src/shared/journal-importer.c
-@@ -23,6 +23,9 @@ enum {
- };
- 
- static int iovw_put(struct iovec_wrapper *iovw, void* data, size_t len) {
-+        if (iovw->count >= ENTRY_FIELD_COUNT_MAX)
-+                return -E2BIG;
-+
-         if (!GREEDY_REALLOC(iovw->iovec, iovw->size_bytes, iovw->count + 1))
-                 return log_oom();
- 
-@@ -97,7 +100,7 @@ static int get_line(JournalImporter *imp, char **line, size_t *size) {
- 
-                 imp->scanned = imp->filled;
-                 if (imp->scanned >= DATA_SIZE_MAX)
--                        return log_error_errno(SYNTHETIC_ERRNO(E2BIG),
-+                        return log_error_errno(SYNTHETIC_ERRNO(ENOBUFS),
-                                                "Entry is bigger than %u bytes.",
-                                                DATA_SIZE_MAX);
- 
diff --git a/systemd.spec b/systemd.spec
index 6e483c0..e6bf493 100644
--- a/systemd.spec
+++ b/systemd.spec
@@ -3,10 +3,10 @@
 # Generated by: autospec.py
 #
 Name     : systemd
-Version  : 239
-Release  : 226
-URL      : https://github.com/systemd/systemd/archive/v239.tar.gz
-Source0  : https://github.com/systemd/systemd/archive/v239.tar.gz
+Version  : 241
+Release  : 227
+URL      : https://github.com/systemd/systemd/archive/v241.tar.gz
+Source0  : https://github.com/systemd/systemd/archive/v241.tar.gz
 Summary  : systemd Library
 Group    : Development/Tools
 License  : GPL-2.0 LGPL-2.1
@@ -64,6 +64,7 @@ BuildRequires : libseccomp-dev
 BuildRequires : libseccomp-dev32
 BuildRequires : libxkbcommon-dev
 BuildRequires : libxslt-bin
+BuildRequires : openssl-dev
 BuildRequires : pkg-config-dev
 BuildRequires : pkgconfig(zlib)
 BuildRequires : python3
@@ -112,21 +113,11 @@ Patch35: 0035-don-t-use-libm-just-for-integer-exp10.patch
 Patch36: 0036-Notify-systemd-earlier-that-resolved-is-ready.patch
 Patch37: 0037-Do-not-crash-if-udev-hasn-t-initialized-one-link-yet.patch
 Patch38: 0038-Hand-off-coredumps-to-a-wrapper-that-will-optionally.patch
-Patch39: 0039-build-sys-Detect-whether-struct-statx-is-defined-in-.patch
-Patch40: 0040-meson-rename-Ddebug-to-Ddebug-extra.patch
-Patch41: 0041-Make-bzip2-an-optional-dependency-for-systemd-import.patch
-Patch42: 0042-add-stateless-for-locale-files-locale.conf-00-keyboa.patch
+Patch39: 0039-add-stateless-for-locale-files-locale.conf-00-keyboa.patch
+Patch40: 0040-Do-not-enable-audit-by-default-in-the-journal.patch
+Patch41: 0041-Disable-XZ-support-in-the-journal.patch
+Patch42: 0042-Localize-1-symbol.patch
 Patch43: 0043-mount-setup-Harden-a-bit-the-options-for-certan-moun.patch
-Patch44: cve-2018-15687.patch
-Patch45: cve-2018-15686.patch
-Patch46: CVE-2018-15688.patch
-Patch47: CVE-2018-6954_2.patch
-Patch48: no-audit-by-default.patch
-Patch49: no-xz-for-libsystemd.patch
-Patch50: mq_getattr.patch
-Patch51: systemd-stack-1.patch
-Patch52: CVE-2018-16864.patch
-Patch53: CVE-2018-16866.patch
 
 %description
 systemd System and Service Manager
@@ -264,7 +255,7 @@ services components for the systemd package.
 
 
 %prep
-%setup -q -n systemd-239
+%setup -q -n systemd-241
 %patch1 -p1
 %patch2 -p1
 %patch3 -p1
@@ -308,18 +299,8 @@ services components for the systemd package.
 %patch41 -p1
 %patch42 -p1
 %patch43 -p1
-%patch44 -p1
-%patch45 -p1
-%patch46 -p1
-%patch47 -p1
-%patch48 -p1
-%patch49 -p1
-%patch50 -p1
-%patch51 -p1
-%patch52 -p1
-%patch53 -p1
 pushd ..
-cp -a systemd-239 build32
+cp -a systemd-241 build32
 popd
 
 %build
@@ -327,10 +308,11 @@ export http_proxy=http://127.0.0.1:9/
 export https_proxy=http://127.0.0.1:9/
 export no_proxy=localhost,127.0.0.1,0.0.0.0
 export LANG=C
-export SOURCE_DATE_EPOCH=1551124879
+export SOURCE_DATE_EPOCH=1551309263
 export CFLAGS="-O2 -g -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wformat -Wformat-security -Wno-error -Wl,-z,max-page-size=0x1000 -march=westmere -mtune=haswell"
 export CXXFLAGS=$CFLAGS
 unset LDFLAGS
+export LDFLAGS="${LDFLAGS} -fno-lto"
 export CFLAGS="$CFLAGS -fstack-protector-strong -mzero-caller-saved-regs=used "
 export FCFLAGS="$CFLAGS -fstack-protector-strong -mzero-caller-saved-regs=used "
 export FFLAGS="$CFLAGS -fstack-protector-strong -mzero-caller-saved-regs=used "
@@ -366,15 +348,23 @@ meson --libdir=/usr/lib32 --prefix /usr --buildtype=plain -Ddefault-hierarchy=le
 -Dmicrohttpd=false \
 -Dremote=false \
 -Dxz=false \
--Dgcrypt=false builddir
+-Dgcrypt=false \
+-Dopenssl=false builddir
 ninja -v -C builddir
 popd
 
+%check
+export LANG=C
+export http_proxy=http://127.0.0.1:9/
+export https_proxy=http://127.0.0.1:9/
+export no_proxy=localhost,127.0.0.1,0.0.0.0
+ninja -C builddir test ||:
+
 %install
 ## install_prepend content
 pushd  builddir
-gcc  -o libsystemd.so.0.23.0  -Wl,--no-undefined -Wl,--as-needed -shared -fPIC -Wl,--start-group -Wl,-soname,libsystemd.so.0 -Wl,--whole-archive src/libsystemd/libsystemd_static.a src/journal/libjournal-client.a -Wl,--no-whole-archive -Wl,-z,relro -Wl,-z,now -pie -Wl,--gc-sections -O2 -g -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wformat -Wformat-security -Wno-error -Wl,-z,max-page-size=0x1000 -march=westmere -mtune=haswell -fstack-protector-strong -mzero-caller-saved-regs=used src/basic/libbasic.a src/basic/libbasic-gcrypt.a -shared -Wl,--version-script=/builddir/build/BUILD/systemd-239/src/libsystemd/libsystemd.sym /usr/lib64/liblzma.so //usr/lib64/libcap.a /usr/lib64/libblkid.a /usr/lib64/libmount.a -lgcrypt  -Wl,--end-group -pthread '-Wl,-rpath,$ORIGIN/src/basic' -Wl,-rpath-link,/builddir/build/BUILD/systemd-239/builddir/src/basic
-gcc  -o pam_systemd.so 'pam_systemd@sha/src_login_pam_systemd.c.o' -Wl,--no-undefined -Wl,--as-needed -shared -fPIC -Wl,--start-group -Wl,-soname,pam_systemd.so -Wl,-z,relro -Wl,-z,now -pie -Wl,--gc-sections -O2 -g -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wformat -Wformat-security -Wno-error -Wl,-z,max-page-size=0x1000 -march=westmere -mtune=haswell -fstack-protector-strong -mzero-caller-saved-regs=used src/libsystemd/libsystemd_static.a src/basic/libbasic.a src/shared/libsystemd-shared-239.a -shared -Wl,--version-script=/builddir/build/BUILD/systemd-239/src/login/pam_systemd.sym -lpam -lpam_misc -Wl,--end-group -pthread '-Wl,-rpath,$ORIGIN/src/libsystemd:$ORIGIN/src/basic:$ORIGIN/src/shared' -Wl,-rpath-link,/builddir/build/BUILD/systemd-239/builddir/src/libsystemd:/builddir/build/BUILD/systemd-239/builddir/src/basic:/builddir/build/BUILD/systemd-239/builddir/src/shared
+gcc  -o libsystemd.so.0.25.0 'systemd@sha/src_libsystemd_disable-mempool.c.o' -Wl,--no-undefined -Wl,--as-needed -shared -fPIC -Wl,--start-group -Wl,-soname,libsystemd.so.0 -Wl,--whole-archive src/libsystemd/libsystemd_static.a src/journal/libjournal-client.a -Wl,--no-whole-archive -Wl,-z,relro -Wl,-z,now -pie -Wl,--gc-sections -O2 -g -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wformat -Wformat-security -Wno-error -Wl,-z,max-page-size=0x1000 -march=westmere -mtune=haswell -fstack-protector-strong -mzero-caller-saved-regs=used -fno-lto src/basic/libbasic.a src/basic/libbasic-gcrypt.a -shared -Wl,--version-script=/builddir/build/BUILD/systemd-241/src/libsystemd/libsystemd.sym -lrt /usr/lib64/liblzma.so //usr/lib64/libcap.a /usr/lib64/libblkid.a /usr/lib64/libmount.a -lm -lgcrypt -lrt -Wl,--end-group -pthread '-Wl,-rpath,$ORIGIN/src/basic' -Wl,-rpath-link,/builddir/build/BUILD/systemd-241/builddir/src/basic
+gcc  -o pam_systemd.so 'pam_systemd@sha/src_login_pam_systemd.c.o' -Wl,--no-undefined -Wl,--as-needed -shared -fPIC -Wl,--start-group -Wl,-soname,pam_systemd.so -Wl,-z,relro -Wl,-z,now -pie -Wl,--gc-sections -O2 -g -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wformat -Wformat-security -Wno-error -Wl,-z,max-page-size=0x1000 -march=westmere -mtune=haswell -fstack-protector-strong -mzero-caller-saved-regs=used -fno-lto src/libsystemd/libsystemd_static.a src/basic/libbasic.a src/shared/libsystemd-shared-241.a -shared -Wl,--version-script=/builddir/build/BUILD/systemd-241/src/login/pam_systemd.sym -lpam -lpam_misc -lrt //usr/lib64/libcap.a -lm -lrt -lacl /usr/lib64/libcryptsetup.so -lgcrypt /usr/lib64/libip4tc.so /usr/lib64/libip6tc.so /usr/lib64/libkmod.so /usr/lib64/libmount.so /usr/lib64/libseccomp.so /usr/lib64/liblzma.so /usr/lib64/libblkid.so -Wl,--end-group -pthread '-Wl,-rpath,$ORIGIN/src/libsystemd:$ORIGIN/src/basic:$ORIGIN/src/shared' -Wl,-rpath-link,/builddir/build/BUILD/systemd-241/builddir/src/libsystemd:/builddir/build/BUILD/systemd-241/builddir/src/basic:/builddir/build/BUILD/systemd-241/builddir/src/shared
 popd
 ## install_prepend end
 mkdir -p %{buildroot}/usr/share/package-licenses/systemd
@@ -413,6 +403,8 @@ rm -f %{buildroot}/usr/lib/systemd/system/sysinit.target.wants/systemd-hwdb-upda
 rm -f %{buildroot}/usr/lib/systemd/system/sysinit.target.wants/systemd-journal-catalog-update.service
 rm -f %{buildroot}/usr/lib/systemd/system/sysinit.target.wants/systemd-sysusers.service
 rm -f %{buildroot}/usr/lib/systemd/system/sysinit.target.wants/systemd-update-done.service
+rm -f %{buildroot}/usr/lib/systemd/system/sysinit.target.wants/systemd-tmpfiles-setup-dev.service
+rm -f %{buildroot}/usr/lib/systemd/system/sockets.target.wants/systemd-journald-audit.socket
 rm -f %{buildroot}/etc/xdg/systemd/user
 rm -f %{buildroot}/usr/lib/environment.d/99-environment.conf
 mv %{buildroot}/etc/pam.d %{buildroot}/usr/share/.
@@ -449,7 +441,6 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 %exclude /usr/lib/systemd/systemd-pull
 %exclude /usr/lib/systemd/systemd-update-done
 %exclude /usr/lib/udev/cdrom_id
-%exclude /usr/lib/udev/collect
 %exclude /usr/lib/udev/hwdb.d/20-OUI.hwdb
 %exclude /usr/lib/udev/hwdb.d/20-acpi-vendor.hwdb
 %exclude /usr/lib/udev/hwdb.d/20-bluetooth-vendor-product.hwdb
@@ -492,18 +483,21 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/lib/systemd/portable/profile/nonetwork/service.conf
 /usr/lib/systemd/portable/profile/strict/service.conf
 /usr/lib/systemd/portable/profile/trusted/service.conf
-/usr/lib/systemd/portablectl
 /usr/lib/systemd/resolv.conf
+/usr/lib/systemd/system-generators/systemd-bless-boot-generator
 /usr/lib/systemd/system-generators/systemd-cryptsetup-generator
 /usr/lib/systemd/system-generators/systemd-debug-generator
 /usr/lib/systemd/system-generators/systemd-fstab-generator
 /usr/lib/systemd/system-generators/systemd-getty-generator
 /usr/lib/systemd/system-generators/systemd-gpt-auto-generator
+/usr/lib/systemd/system-generators/systemd-run-generator
 /usr/lib/systemd/system-preset/90-systemd.preset
 /usr/lib/systemd/systemd
 /usr/lib/systemd/systemd-ac-power
 /usr/lib/systemd/systemd-backlight
 /usr/lib/systemd/systemd-binfmt
+/usr/lib/systemd/systemd-bless-boot
+/usr/lib/systemd/systemd-boot-check-no-failures
 /usr/lib/systemd/systemd-cgroups-agent
 /usr/lib/systemd/systemd-coredump
 /usr/lib/systemd/systemd-cryptsetup
@@ -513,6 +507,7 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/lib/systemd/systemd-growfs
 /usr/lib/systemd/systemd-hibernate-resume
 /usr/lib/systemd/systemd-hostnamed
+/usr/lib/systemd/systemd-import-fs
 /usr/lib/systemd/systemd-initctl
 /usr/lib/systemd/systemd-journald
 /usr/lib/systemd/systemd-localed
@@ -569,7 +564,6 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/lib/systemd/system/remote-fs.target.wants/var-lib-machines.mount
 /usr/lib/systemd/system/sockets.target.wants/systemd-coredump.socket
 /usr/lib/systemd/system/sockets.target.wants/systemd-initctl.socket
-/usr/lib/systemd/system/sockets.target.wants/systemd-journald-audit.socket
 /usr/lib/systemd/system/sockets.target.wants/systemd-journald-dev-log.socket
 /usr/lib/systemd/system/sockets.target.wants/systemd-journald.socket
 /usr/lib/systemd/system/sockets.target.wants/systemd-networkd.socket
@@ -588,7 +582,6 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/lib/systemd/system/sysinit.target.wants/systemd-random-seed.service
 /usr/lib/systemd/system/sysinit.target.wants/systemd-sysctl.service
 /usr/lib/systemd/system/sysinit.target.wants/systemd-timesyncd.service
-/usr/lib/systemd/system/sysinit.target.wants/systemd-tmpfiles-setup-dev.service
 /usr/lib/systemd/system/sysinit.target.wants/systemd-tmpfiles-setup.service
 /usr/lib/systemd/system/sysinit.target.wants/systemd-udev-trigger.service
 /usr/lib/systemd/system/sysinit.target.wants/systemd-udevd.service
@@ -612,6 +605,7 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/bin/loginctl
 /usr/bin/machinectl
 /usr/bin/networkctl
+/usr/bin/portablectl
 /usr/bin/poweroff
 /usr/bin/reboot
 /usr/bin/resolvconf
@@ -627,6 +621,7 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/bin/systemd-delta
 /usr/bin/systemd-detect-virt
 /usr/bin/systemd-escape
+/usr/bin/systemd-id128
 /usr/bin/systemd-inhibit
 /usr/bin/systemd-machine-id-setup
 /usr/bin/systemd-mount
@@ -790,7 +785,9 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/include/systemd/sd-bus-vtable.h
 /usr/include/systemd/sd-bus.h
 /usr/include/systemd/sd-daemon.h
+/usr/include/systemd/sd-device.h
 /usr/include/systemd/sd-event.h
+/usr/include/systemd/sd-hwdb.h
 /usr/include/systemd/sd-id128.h
 /usr/include/systemd/sd-journal.h
 /usr/include/systemd/sd-login.h
@@ -836,6 +833,10 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/share/man/man3/SD_BUS_ERROR_UNKNOWN_METHOD.3
 /usr/share/man/man3/SD_BUS_ERROR_UNKNOWN_OBJECT.3
 /usr/share/man/man3/SD_BUS_ERROR_UNKNOWN_PROPERTY.3
+/usr/share/man/man3/SD_BUS_MESSAGE_METHOD_CALL.3
+/usr/share/man/man3/SD_BUS_MESSAGE_METHOD_ERROR.3
+/usr/share/man/man3/SD_BUS_MESSAGE_METHOD_RETURN.3
+/usr/share/man/man3/SD_BUS_MESSAGE_SIGNAL.3
 /usr/share/man/man3/SD_CRIT.3
 /usr/share/man/man3/SD_DEBUG.3
 /usr/share/man/man3/SD_EMERG.3
@@ -888,6 +889,8 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/share/man/man3/sd_booted.3
 /usr/share/man/man3/sd_bus_add_match.3
 /usr/share/man/man3/sd_bus_add_match_async.3
+/usr/share/man/man3/sd_bus_attach_event.3
+/usr/share/man/man3/sd_bus_close.3
 /usr/share/man/man3/sd_bus_creds_get_audit_login_uid.3
 /usr/share/man/man3/sd_bus_creds_get_audit_session_id.3
 /usr/share/man/man3/sd_bus_creds_get_augmented_mask.3
@@ -932,6 +935,7 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/share/man/man3/sd_bus_default_system.3
 /usr/share/man/man3/sd_bus_default_user.3
 /usr/share/man/man3/sd_bus_destroy_t.3
+/usr/share/man/man3/sd_bus_detach_event.3
 /usr/share/man/man3/sd_bus_error.3
 /usr/share/man/man3/sd_bus_error_add_map.3
 /usr/share/man/man3/sd_bus_error_copy.3
@@ -940,17 +944,27 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/share/man/man3/sd_bus_error_has_name.3
 /usr/share/man/man3/sd_bus_error_is_set.3
 /usr/share/man/man3/sd_bus_error_map.3
+/usr/share/man/man3/sd_bus_error_move.3
 /usr/share/man/man3/sd_bus_error_set.3
 /usr/share/man/man3/sd_bus_error_set_const.3
 /usr/share/man/man3/sd_bus_error_set_errno.3
 /usr/share/man/man3/sd_bus_error_set_errnof.3
 /usr/share/man/man3/sd_bus_error_set_errnofv.3
 /usr/share/man/man3/sd_bus_error_setf.3
+/usr/share/man/man3/sd_bus_flush.3
+/usr/share/man/man3/sd_bus_flush_close_unref.3
+/usr/share/man/man3/sd_bus_flush_close_unrefp.3
+/usr/share/man/man3/sd_bus_get_allow_interactive_authorization.3
+/usr/share/man/man3/sd_bus_get_close_on_exit.3
 /usr/share/man/man3/sd_bus_get_connected_signal.3
+/usr/share/man/man3/sd_bus_get_description.3
+/usr/share/man/man3/sd_bus_get_event.3
+/usr/share/man/man3/sd_bus_get_events.3
 /usr/share/man/man3/sd_bus_get_fd.3
 /usr/share/man/man3/sd_bus_get_n_queued_read.3
 /usr/share/man/man3/sd_bus_get_n_queued_write.3
 /usr/share/man/man3/sd_bus_get_sender.3
+/usr/share/man/man3/sd_bus_get_timeout.3
 /usr/share/man/man3/sd_bus_get_watch_bind.3
 /usr/share/man/man3/sd_bus_is_open.3
 /usr/share/man/man3/sd_bus_is_ready.3
@@ -967,14 +981,49 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/share/man/man3/sd_bus_message_append_string_space.3
 /usr/share/man/man3/sd_bus_message_append_strv.3
 /usr/share/man/man3/sd_bus_message_appendv.3
+/usr/share/man/man3/sd_bus_message_copy.3
+/usr/share/man/man3/sd_bus_message_get_auto_start.3
+/usr/share/man/man3/sd_bus_message_get_bus.3
 /usr/share/man/man3/sd_bus_message_get_cookie.3
+/usr/share/man/man3/sd_bus_message_get_destination.3
+/usr/share/man/man3/sd_bus_message_get_expect_reply.3
+/usr/share/man/man3/sd_bus_message_get_interface.3
+/usr/share/man/man3/sd_bus_message_get_member.3
 /usr/share/man/man3/sd_bus_message_get_monotonic_usec.3
+/usr/share/man/man3/sd_bus_message_get_path.3
 /usr/share/man/man3/sd_bus_message_get_realtime_usec.3
 /usr/share/man/man3/sd_bus_message_get_reply_cookie.3
+/usr/share/man/man3/sd_bus_message_get_sender.3
 /usr/share/man/man3/sd_bus_message_get_seqnum.3
+/usr/share/man/man3/sd_bus_message_get_signature.3
+/usr/share/man/man3/sd_bus_message_get_type.3
+/usr/share/man/man3/sd_bus_message_has_signature.3
+/usr/share/man/man3/sd_bus_message_is_empty.3
+/usr/share/man/man3/sd_bus_message_is_method_call.3
+/usr/share/man/man3/sd_bus_message_is_method_error.3
+/usr/share/man/man3/sd_bus_message_is_signal.3
+/usr/share/man/man3/sd_bus_message_new.3
+/usr/share/man/man3/sd_bus_message_new_method_call.3
+/usr/share/man/man3/sd_bus_message_new_method_errno.3
+/usr/share/man/man3/sd_bus_message_new_method_errnof.3
+/usr/share/man/man3/sd_bus_message_new_method_error.3
+/usr/share/man/man3/sd_bus_message_new_method_errorf.3
+/usr/share/man/man3/sd_bus_message_new_method_return.3
+/usr/share/man/man3/sd_bus_message_new_signal.3
+/usr/share/man/man3/sd_bus_message_read.3
+/usr/share/man/man3/sd_bus_message_read_array.3
 /usr/share/man/man3/sd_bus_message_read_basic.3
+/usr/share/man/man3/sd_bus_message_readv.3
+/usr/share/man/man3/sd_bus_message_ref.3
+/usr/share/man/man3/sd_bus_message_rewind.3
+/usr/share/man/man3/sd_bus_message_set_auto_start.3
 /usr/share/man/man3/sd_bus_message_set_destination.3
+/usr/share/man/man3/sd_bus_message_set_expect_reply.3
 /usr/share/man/man3/sd_bus_message_set_sender.3
+/usr/share/man/man3/sd_bus_message_skip.3
+/usr/share/man/man3/sd_bus_message_unref.3
+/usr/share/man/man3/sd_bus_message_unrefp.3
+/usr/share/man/man3/sd_bus_message_verify_type.3
 /usr/share/man/man3/sd_bus_negotiate_creds.3
 /usr/share/man/man3/sd_bus_negotiate_fds.3
 /usr/share/man/man3/sd_bus_negotiate_timestamp.3
@@ -983,7 +1032,10 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/share/man/man3/sd_bus_open_system.3
 /usr/share/man/man3/sd_bus_open_system_machine.3
 /usr/share/man/man3/sd_bus_open_system_remote.3
+/usr/share/man/man3/sd_bus_open_system_with_description.3
 /usr/share/man/man3/sd_bus_open_user.3
+/usr/share/man/man3/sd_bus_open_user_with_description.3
+/usr/share/man/man3/sd_bus_open_with_description.3
 /usr/share/man/man3/sd_bus_path_decode.3
 /usr/share/man/man3/sd_bus_path_decode_many.3
 /usr/share/man/man3/sd_bus_path_encode.3
@@ -992,15 +1044,32 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/share/man/man3/sd_bus_ref.3
 /usr/share/man/man3/sd_bus_release_name.3
 /usr/share/man/man3/sd_bus_release_name_async.3
+/usr/share/man/man3/sd_bus_reply_method_errno.3
+/usr/share/man/man3/sd_bus_reply_method_errnof.3
+/usr/share/man/man3/sd_bus_reply_method_error.3
+/usr/share/man/man3/sd_bus_reply_method_errorf.3
 /usr/share/man/man3/sd_bus_request_name.3
 /usr/share/man/man3/sd_bus_request_name_async.3
+/usr/share/man/man3/sd_bus_set_allow_interactive_authorization.3
+/usr/share/man/man3/sd_bus_set_anonymous.3
+/usr/share/man/man3/sd_bus_set_close_on_exit.3
 /usr/share/man/man3/sd_bus_set_connected_signal.3
+/usr/share/man/man3/sd_bus_set_description.3
 /usr/share/man/man3/sd_bus_set_sender.3
+/usr/share/man/man3/sd_bus_set_trusted.3
 /usr/share/man/man3/sd_bus_set_watch_bind.3
+/usr/share/man/man3/sd_bus_slot_get_bus.3
+/usr/share/man/man3/sd_bus_slot_get_description.3
 /usr/share/man/man3/sd_bus_slot_get_destroy_callback.3
 /usr/share/man/man3/sd_bus_slot_get_floating.3
+/usr/share/man/man3/sd_bus_slot_get_userdata.3
+/usr/share/man/man3/sd_bus_slot_ref.3
+/usr/share/man/man3/sd_bus_slot_set_description.3
 /usr/share/man/man3/sd_bus_slot_set_destroy_callback.3
 /usr/share/man/man3/sd_bus_slot_set_floating.3
+/usr/share/man/man3/sd_bus_slot_set_userdata.3
+/usr/share/man/man3/sd_bus_slot_unref.3
+/usr/share/man/man3/sd_bus_slot_unrefp.3
 /usr/share/man/man3/sd_bus_track_add_name.3
 /usr/share/man/man3/sd_bus_track_add_sender.3
 /usr/share/man/man3/sd_bus_track_contains.3
@@ -1024,6 +1093,7 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/share/man/man3/sd_bus_track_unrefp.3
 /usr/share/man/man3/sd_bus_unref.3
 /usr/share/man/man3/sd_bus_unrefp.3
+/usr/share/man/man3/sd_bus_wait.3
 /usr/share/man/man3/sd_event.3
 /usr/share/man/man3/sd_event_add_child.3
 /usr/share/man/man3/sd_event_add_defer.3
@@ -1098,6 +1168,7 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/share/man/man3/sd_id128_equal.3
 /usr/share/man/man3/sd_id128_from_string.3
 /usr/share/man/man3/sd_id128_get_boot.3
+/usr/share/man/man3/sd_id128_get_boot_app_specific.3
 /usr/share/man/man3/sd_id128_get_invocation.3
 /usr/share/man/man3/sd_id128_get_machine.3
 /usr/share/man/man3/sd_id128_get_machine_app_specific.3
@@ -1323,7 +1394,6 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/lib/systemd/systemd-journal-upload
 /usr/lib/systemd/systemd-pull
 /usr/lib/udev/cdrom_id
-/usr/lib/udev/collect
 /usr/lib/udev/hwdb.d/20-OUI.hwdb
 /usr/lib/udev/hwdb.d/20-acpi-vendor.hwdb
 /usr/lib/udev/hwdb.d/20-bluetooth-vendor-product.hwdb
@@ -1372,15 +1442,15 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 
 %files lib
 %defattr(-,root,root,-)
-/usr/lib/systemd/libsystemd-shared-239.so
+/usr/lib/systemd/libsystemd-shared-241.so
 /usr/lib64/libnss_myhostname.so.2
 /usr/lib64/libnss_mymachines.so.2
 /usr/lib64/libnss_resolve.so.2
 /usr/lib64/libnss_systemd.so.2
 /usr/lib64/libsystemd.so.0
-/usr/lib64/libsystemd.so.0.23.0
+/usr/lib64/libsystemd.so.0.25.0
 /usr/lib64/libudev.so.1
-/usr/lib64/libudev.so.1.6.11
+/usr/lib64/libudev.so.1.6.13
 /usr/lib64/security/pam_systemd.so
 
 %files lib32
@@ -1390,9 +1460,9 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/lib32/libnss_resolve.so.2
 /usr/lib32/libnss_systemd.so.2
 /usr/lib32/libsystemd.so.0
-/usr/lib32/libsystemd.so.0.23.0
+/usr/lib32/libsystemd.so.0.25.0
 /usr/lib32/libudev.so.1
-/usr/lib32/libudev.so.1.6.11
+/usr/lib32/libudev.so.1.6.13
 /usr/lib32/security/pam_systemd.so
 
 %files license
@@ -1438,6 +1508,7 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/share/man/man1/systemd-escape.1
 /usr/share/man/man1/systemd-firstboot.1
 /usr/share/man/man1/systemd-firstboot.service.1
+/usr/share/man/man1/systemd-id128.1
 /usr/share/man/man1/systemd-inhibit.1
 /usr/share/man/man1/systemd-machine-id-setup.1
 /usr/share/man/man1/systemd-mount.1
@@ -1506,7 +1577,9 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/share/man/man5/timesyncd.conf.d.5
 /usr/share/man/man5/tmpfiles.d.5
 /usr/share/man/man5/udev.conf.5
+/usr/share/man/man5/user-runtime-dir@.service.5
 /usr/share/man/man5/user.conf.d.5
+/usr/share/man/man5/user@.service.5
 /usr/share/man/man5/vconsole.conf.5
 /usr/share/man/man7/bootup.7
 /usr/share/man/man7/daemon.7
@@ -1547,6 +1620,9 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/share/man/man8/systemd-backlight@.service.8
 /usr/share/man/man8/systemd-binfmt.8
 /usr/share/man/man8/systemd-binfmt.service.8
+/usr/share/man/man8/systemd-bless-boot-generator.8
+/usr/share/man/man8/systemd-bless-boot.service.8
+/usr/share/man/man8/systemd-boot-check-no-failures.service.8
 /usr/share/man/man8/systemd-coredump.8
 /usr/share/man/man8/systemd-coredump.socket.8
 /usr/share/man/man8/systemd-coredump@.service.8
@@ -1615,6 +1691,7 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/share/man/man8/systemd-rfkill.8
 /usr/share/man/man8/systemd-rfkill.service.8
 /usr/share/man/man8/systemd-rfkill.socket.8
+/usr/share/man/man8/systemd-run-generator.8
 /usr/share/man/man8/systemd-shutdown.8
 /usr/share/man/man8/systemd-sleep.8
 /usr/share/man/man8/systemd-socket-proxyd.8
@@ -1675,7 +1752,6 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 %exclude /usr/lib/systemd/system/remote-fs.target.wants/var-lib-machines.mount
 %exclude /usr/lib/systemd/system/sockets.target.wants/systemd-coredump.socket
 %exclude /usr/lib/systemd/system/sockets.target.wants/systemd-initctl.socket
-%exclude /usr/lib/systemd/system/sockets.target.wants/systemd-journald-audit.socket
 %exclude /usr/lib/systemd/system/sockets.target.wants/systemd-journald-dev-log.socket
 %exclude /usr/lib/systemd/system/sockets.target.wants/systemd-journald.socket
 %exclude /usr/lib/systemd/system/sockets.target.wants/systemd-networkd.socket
@@ -1694,7 +1770,6 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 %exclude /usr/lib/systemd/system/sysinit.target.wants/systemd-random-seed.service
 %exclude /usr/lib/systemd/system/sysinit.target.wants/systemd-sysctl.service
 %exclude /usr/lib/systemd/system/sysinit.target.wants/systemd-timesyncd.service
-%exclude /usr/lib/systemd/system/sysinit.target.wants/systemd-tmpfiles-setup-dev.service
 %exclude /usr/lib/systemd/system/sysinit.target.wants/systemd-tmpfiles-setup.service
 %exclude /usr/lib/systemd/system/sysinit.target.wants/systemd-udev-trigger.service
 %exclude /usr/lib/systemd/system/sysinit.target.wants/systemd-udevd.service
@@ -1718,6 +1793,7 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/lib/systemd/system/autovt@.service
 /usr/lib/systemd/system/basic.target
 /usr/lib/systemd/system/bluetooth.target
+/usr/lib/systemd/system/boot-complete.target
 /usr/lib/systemd/system/console-getty.service
 /usr/lib/systemd/system/container-getty@.service
 /usr/lib/systemd/system/cryptsetup-pre.target
@@ -1805,6 +1881,8 @@ ln -sf /usr/lib/systemd/system/systemd-journald.service %{buildroot}/usr/share/c
 /usr/lib/systemd/system/systemd-ask-password-wall.service
 /usr/lib/systemd/system/systemd-backlight@.service
 /usr/lib/systemd/system/systemd-binfmt.service
+/usr/lib/systemd/system/systemd-bless-boot.service
+/usr/lib/systemd/system/systemd-boot-check-no-failures.service
 /usr/lib/systemd/system/systemd-coredump.socket
 /usr/lib/systemd/system/systemd-coredump@.service
 /usr/lib/systemd/system/systemd-exit.service
diff --git a/upstream b/upstream
index 5be074b..3263fc6 100644
--- a/upstream
+++ b/upstream
@@ -1 +1 @@
-8803baa484cbe36680463c8c5e6febeff074b8e7/v239.tar.gz
+66378cd752881489006dde6ae5faab971af8c0e5/v241.tar.gz
diff --git a/used_libs32 b/used_libs32
index 1e02e92..84150a9 100644
--- a/used_libs32
+++ b/used_libs32
@@ -2,7 +2,6 @@ ld-linux.so.2
 libc.so.6
 libcap.so.2
 libgcc_s.so.1
-libmount.so.1
 libpam.so.0
 libpam_misc.so.0
 libpthread.so.0
-- 
2.20.1

